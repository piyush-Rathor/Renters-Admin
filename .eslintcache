[{"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/index.js":"1","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/theme.js":"2","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Prompt.js":"3","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/routes/index.js":"4","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/index.js":"5","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/index.js":"6","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/routes/app.js":"7","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Login.js":"8","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResetPassword.js":"9","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResetPasswordRequest.js":"10","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/_layout.js":"11","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/index.js":"12","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/auth.js":"13","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/objectReducers.js":"14","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/arrayReducers.js":"15","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/app.js":"16","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/icons.js":"17","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Reseller.js":"18","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/form.schema.js":"19","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/services/api.js":"20","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/index.js":"21","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/config.js":"22","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/ShippingAddress.js":"23","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Password.js":"24","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Combobox.js":"25","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/File.js":"26","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Map.js":"27","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Address.js":"28","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/DateTime.js":"29","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Time.js":"30","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Date.js":"31","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Phone.js":"32","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Checkbox.js":"33","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Currency.js":"34","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/shippingAdress.config.js":"35","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/address.config.js":"36","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-referral.js":"37","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Reseller.js":"38","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/services/PageData/index.js":"39","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/index.js":"40","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/permissions.js":"41","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/utils/index.js":"42","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Coupons.js":"43","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/AdvertisementBanners.js":"44","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/SupplierPayment.js":"45","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResellersPayment.js":"46","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Bonuses.js":"47","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Bonus.js":"48","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Orders.js":"49","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResellersPayments.js":"50","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Order.js":"51","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Advertisements.js":"52","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Superusers.js":"53","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Products.js":"54","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Product.js":"55","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Settings.js":"56","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/SuppliersPayments.js":"57","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Collections.js":"58","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/SubSubcategories.js":"59","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Subcategories.js":"60","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Collection.js":"61","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Categories.js":"62","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Supplier.js":"63","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Resellers.js":"64","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Suppliers.js":"65","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Dashboard.js":"66","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/index.js":"67","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Table.js":"68","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-coupon.js":"69","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-advertisement.js":"70","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-advertisement-template.js":"71","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/reseller-payment-update.js":"72","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/AdvertisementBannerCard.js":"73","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/AdvertisementBannerTemplate.js":"74","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/Layouts.js":"75","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-bonus.js":"76","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Superuser.js":"77","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Collection.js":"78","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-order.js":"79","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/SubSubcategory.js":"80","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Subcategory.js":"81","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Category.js":"82","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-product.js":"83","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-bank.js":"84","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Supplier.js":"85","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/BankDetails.js":"86","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-supplier.js":"87","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-reseller.js":"88","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-category.js":"89","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-collection.js":"90","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-subcategory.js":"91","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add--sub-subcategory.js":"92","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-settings.js":"93","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-superuser.js":"94","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/login.js":"95","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-order-customer.js":"96","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-order-notes.js":"97","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Advertisement.js":"98","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/AdBannerTemplateCard.js":"99","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/tables/index.js":"100"},{"size":889,"mtime":1646119009000,"results":"101","hashOfConfig":"102"},{"size":315,"mtime":1646119009000,"results":"103","hashOfConfig":"102"},{"size":2423,"mtime":1646119009000,"results":"104","hashOfConfig":"102"},{"size":3457,"mtime":1646119009000,"results":"105","hashOfConfig":"102"},{"size":540,"mtime":1646119009000,"results":"106","hashOfConfig":"102"},{"size":15433,"mtime":1646119009000,"results":"107","hashOfConfig":"102"},{"size":5118,"mtime":1648631145724,"results":"108","hashOfConfig":"102"},{"size":2376,"mtime":1648702829188,"results":"109","hashOfConfig":"102"},{"size":2700,"mtime":1646119009000,"results":"110","hashOfConfig":"102"},{"size":2409,"mtime":1646119009000,"results":"111","hashOfConfig":"102"},{"size":6846,"mtime":1646119009000,"results":"112","hashOfConfig":"102"},{"size":15683,"mtime":1646119009000,"results":"113","hashOfConfig":"102"},{"size":1155,"mtime":1646119009000,"results":"114","hashOfConfig":"102"},{"size":1609,"mtime":1646119009000,"results":"115","hashOfConfig":"102"},{"size":1884,"mtime":1646119009000,"results":"116","hashOfConfig":"102"},{"size":485,"mtime":1646119009000,"results":"117","hashOfConfig":"102"},{"size":1955,"mtime":1646119009000,"results":"118","hashOfConfig":"102"},{"size":6099,"mtime":1648707639856,"results":"119","hashOfConfig":"102"},{"size":5751,"mtime":1646119009000,"results":"120","hashOfConfig":"102"},{"size":10304,"mtime":1648707615513,"results":"121","hashOfConfig":"102"},{"size":4938,"mtime":1646119009000,"results":"122","hashOfConfig":"102"},{"size":243,"mtime":1646119009000,"results":"123","hashOfConfig":"102"},{"size":2142,"mtime":1646119009000,"results":"124","hashOfConfig":"102"},{"size":874,"mtime":1646119009000,"results":"125","hashOfConfig":"102"},{"size":825,"mtime":1646119009000,"results":"126","hashOfConfig":"102"},{"size":5355,"mtime":1646119009000,"results":"127","hashOfConfig":"102"},{"size":6692,"mtime":1646119009000,"results":"128","hashOfConfig":"102"},{"size":1992,"mtime":1646119009000,"results":"129","hashOfConfig":"102"},{"size":1331,"mtime":1646119009000,"results":"130","hashOfConfig":"102"},{"size":1181,"mtime":1646119009000,"results":"131","hashOfConfig":"102"},{"size":1253,"mtime":1646119009000,"results":"132","hashOfConfig":"102"},{"size":406,"mtime":1646119009000,"results":"133","hashOfConfig":"102"},{"size":871,"mtime":1646119009000,"results":"134","hashOfConfig":"102"},{"size":422,"mtime":1646119009000,"results":"135","hashOfConfig":"102"},{"size":3516,"mtime":1646119009000,"results":"136","hashOfConfig":"102"},{"size":2067,"mtime":1646119009000,"results":"137","hashOfConfig":"102"},{"size":265,"mtime":1646119009000,"results":"138","hashOfConfig":"102"},{"size":3834,"mtime":1648636634791,"results":"139","hashOfConfig":"102"},{"size":4869,"mtime":1646119009000,"results":"140","hashOfConfig":"102"},{"size":30622,"mtime":1648475258744,"results":"141","hashOfConfig":"102"},{"size":849,"mtime":1646119009000,"results":"142","hashOfConfig":"102"},{"size":3105,"mtime":1646119009000,"results":"143","hashOfConfig":"102"},{"size":12304,"mtime":1646119009000,"results":"144","hashOfConfig":"102"},{"size":12608,"mtime":1648544837727,"results":"145","hashOfConfig":"102"},{"size":8752,"mtime":1646119009000,"results":"146","hashOfConfig":"102"},{"size":14041,"mtime":1646119009000,"results":"147","hashOfConfig":"102"},{"size":14465,"mtime":1646119009000,"results":"148","hashOfConfig":"102"},{"size":10401,"mtime":1646119009000,"results":"149","hashOfConfig":"102"},{"size":16995,"mtime":1646119009000,"results":"150","hashOfConfig":"102"},{"size":14918,"mtime":1646119009000,"results":"151","hashOfConfig":"102"},{"size":24759,"mtime":1646119009000,"results":"152","hashOfConfig":"102"},{"size":10641,"mtime":1646119009000,"results":"153","hashOfConfig":"102"},{"size":5245,"mtime":1648625230644,"results":"154","hashOfConfig":"102"},{"size":20237,"mtime":1646119009000,"results":"155","hashOfConfig":"102"},{"size":12480,"mtime":1646119009000,"results":"156","hashOfConfig":"102"},{"size":3016,"mtime":1646119009000,"results":"157","hashOfConfig":"102"},{"size":14712,"mtime":1646119009000,"results":"158","hashOfConfig":"102"},{"size":15845,"mtime":1646119009000,"results":"159","hashOfConfig":"102"},{"size":11411,"mtime":1646119009000,"results":"160","hashOfConfig":"102"},{"size":10455,"mtime":1646119009000,"results":"161","hashOfConfig":"102"},{"size":12292,"mtime":1646119009000,"results":"162","hashOfConfig":"102"},{"size":9162,"mtime":1646119009000,"results":"163","hashOfConfig":"102"},{"size":5404,"mtime":1646119009000,"results":"164","hashOfConfig":"102"},{"size":17084,"mtime":1648715834347,"results":"165","hashOfConfig":"102"},{"size":12814,"mtime":1646119009000,"results":"166","hashOfConfig":"102"},{"size":1090,"mtime":1648625577183,"results":"167","hashOfConfig":"102"},{"size":924,"mtime":1646119009000,"results":"168","hashOfConfig":"102"},{"size":4569,"mtime":1646119009000,"results":"169","hashOfConfig":"102"},{"size":1468,"mtime":1646119009000,"results":"170","hashOfConfig":"102"},{"size":5096,"mtime":1646119009000,"results":"171","hashOfConfig":"102"},{"size":6674,"mtime":1646119009000,"results":"172","hashOfConfig":"102"},{"size":5628,"mtime":1646119009000,"results":"173","hashOfConfig":"102"},{"size":1767,"mtime":1646119009000,"results":"174","hashOfConfig":"102"},{"size":10607,"mtime":1646119009000,"results":"175","hashOfConfig":"102"},{"size":1470,"mtime":1646119009000,"results":"176","hashOfConfig":"102"},{"size":1124,"mtime":1646119009000,"results":"177","hashOfConfig":"102"},{"size":3379,"mtime":1646119009000,"results":"178","hashOfConfig":"102"},{"size":2379,"mtime":1646119009000,"results":"179","hashOfConfig":"102"},{"size":16327,"mtime":1646119009000,"results":"180","hashOfConfig":"102"},{"size":1309,"mtime":1646119009000,"results":"181","hashOfConfig":"102"},{"size":939,"mtime":1646119009000,"results":"182","hashOfConfig":"102"},{"size":774,"mtime":1646119009000,"results":"183","hashOfConfig":"102"},{"size":9628,"mtime":1646119009000,"results":"184","hashOfConfig":"102"},{"size":948,"mtime":1646119009000,"results":"185","hashOfConfig":"102"},{"size":2126,"mtime":1646119009000,"results":"186","hashOfConfig":"102"},{"size":2170,"mtime":1646119009000,"results":"187","hashOfConfig":"102"},{"size":3084,"mtime":1646119009000,"results":"188","hashOfConfig":"102"},{"size":4373,"mtime":1646119009000,"results":"189","hashOfConfig":"102"},{"size":442,"mtime":1646119009000,"results":"190","hashOfConfig":"102"},{"size":2434,"mtime":1646119009000,"results":"191","hashOfConfig":"102"},{"size":616,"mtime":1646119009000,"results":"192","hashOfConfig":"102"},{"size":962,"mtime":1646119009000,"results":"193","hashOfConfig":"102"},{"size":2816,"mtime":1646119009000,"results":"194","hashOfConfig":"102"},{"size":967,"mtime":1646119009000,"results":"195","hashOfConfig":"102"},{"size":1569,"mtime":1646119009000,"results":"196","hashOfConfig":"102"},{"size":1844,"mtime":1646119009000,"results":"197","hashOfConfig":"102"},{"size":296,"mtime":1646119009000,"results":"198","hashOfConfig":"102"},{"size":698,"mtime":1646119009000,"results":"199","hashOfConfig":"102"},{"size":1384,"mtime":1646119009000,"results":"200","hashOfConfig":"102"},{"size":1840,"mtime":1646119009000,"results":"201","hashOfConfig":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},"11w8p2u",{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"204"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"204"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"204"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"204"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"204"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"204"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"204"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"304","usedDeprecatedRules":"204"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"204"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"204"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"204"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"204"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"204"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"204"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"204"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"204"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"204"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"204"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"204"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"204"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"204"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"204"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"204"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"204"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"204"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"204"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/index.js",[],["429","430"],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/theme.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Prompt.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/routes/index.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/index.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/index.js",["431"],"import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { format } from 'date-fns'\nimport { Link } from 'react-router-dom'\nimport {\n  ThemeProvider,\n  useTheme,\n  makeStyles,\n  Button as MuiButton,\n  IconButton as MuiIconButton,\n  Avatar as MuiAvatar,\n  Box,\n  CircularProgress,\n  Menu as MuiMenu,\n  MenuItem,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Chip,\n  CardActionArea,\n  Dialog as MuiDialog,\n  DialogTitle,\n  DialogContent,\n  ButtonGroup,\n} from '@material-ui/core'\nimport MdiIcon from '@mdi/react'\nimport { mdiChevronDown, mdiChevronUp } from '@mdi/js'\n\nimport Icons from '../constants/icons'\n\nconst absoluteFillObject = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n}\n\nconst useStyles = makeStyles(theme => ({\n  logo: {\n    maxHeight: '100%',\n    maxWidth: '100%',\n  },\n\n  avatar: {\n    color: theme.palette.getContrastText(theme.palette.primary.main),\n    backgroundColor: theme.palette.primary.main,\n  },\n\n  button: {\n    minWidth: 110,\n  },\n  buttonLoader: {\n    ...absoluteFillObject,\n  },\n  smallIconButton: {\n    padding: theme.spacing(0.75),\n  },\n\n  menuPaper: {\n    minWidth: 240,\n    maxWidth: 360,\n  },\n  menuPopover: {\n    marginTop: theme.spacing(0.5),\n  },\n\n  status: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n\n  notificationText: {\n    overflow: 'hidden',\n    whiteSpace: 'normal',\n    textOverflow: 'ellipsis',\n    '-webkit-line-clamp': 2,\n    display: '-webkit-box',\n    '-webkit-box-orient': 'vertical',\n  },\n\n  toggleButton: {\n    color: theme.palette.text.secondary,\n  },\n  activeToggleButton: {\n    color: theme.palette.getContrastText(theme.palette.primary.main),\n    backgroundColor: theme.palette.primary.main,\n    pointerEvents: 'none',\n  },\n}))\n\nexport const Logo = () => {\n  const classes = useStyles()\n  const { palette } = useTheme()\n\n  return (\n    <img\n      className={classes.logo}\n      src={`/logo_${palette.type === 'light' ? 'dark' : 'light'}.png`}\n      alt=\"logo\"\n    />\n  )\n}\n\nconst getAvatarText = (string = '', splitter = ' ') => {\n  return string\n    .split(splitter)\n    .filter(w => typeof w === 'string' && w.length)\n    .slice(0, 2)\n    .map(c => c[0].toUpperCase())\n    .join('')\n}\n\nexport const Avatar = React.forwardRef(({ size, style, text, ...props }, ref) => {\n  const classes = useStyles()\n\n  if (size) props.style = { width: size, height: size }\n  if (style) props.style = { ...props.style, ...style }\n\n  if (text) props.children = getAvatarText(text)\n\n  return <MuiAvatar ref={ref} classes={{ root: classes.avatar }} {...props} />\n})\nAvatar.propTypes = {\n  size: PropTypes.number,\n}\n\nexport const Icon = ({ color, ...props }) => {\n  const theme = useTheme()\n  const _color = color ? (theme.palette[color] ? theme.palette[color].main : color) : null\n\n  const iconProps = { ...props }\n  if (_color) iconProps.color = _color\n  return <MdiIcon size={1} {...iconProps} />\n}\nIcon.propTypes = {\n  path: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  color: PropTypes.string,\n}\n\nexport const Button = ({ color = 'primary', href, routerLink, icon, avatar, ...restProps }) => {\n  const { loading, onClick, containerProps, ...rest } = restProps\n  const classes = useStyles()\n  const theme = useTheme()\n  const [processing, setProcessing] = useState(false)\n\n  let isMounted = useRef(false)\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  const props = { ...rest }\n\n  const { disabled } = props\n  props.color = 'primary'\n  props.variant = props.variant || 'contained'\n  if (icon || avatar) props.variant = null\n  const _loading = loading || processing\n  props.disabled = disabled || _loading\n  props.children = props.children || props.text\n  if (onClick)\n    props.onClick = async (...args) => {\n      if (isMounted.current) setProcessing(true)\n      try {\n        await onClick(...args)\n      } catch (e) {\n        console.log(e.message)\n      } finally {\n        if (isMounted.current) setProcessing(false)\n      }\n    }\n\n  const avatarProps = {}\n  if (avatar)\n    avatarProps.style = {\n      background: theme.palette[color].main,\n      color: theme.palette.getContrastText(theme.palette[color].main),\n    }\n  return (\n    <ThemeProvider theme={t => ({ ...t, palette: { ...t.palette, primary: { ...t.palette[color] } } })}>\n      <Box position=\"relative\" display={props.fullWidth ? 'block' : 'inline-block'} {...containerProps}>\n        {avatar ? (\n          <MuiIconButton size=\"small\" {...props}>\n            {avatar.src ? (\n              <Avatar {...avatarProps} src={avatar.src} />\n            ) : avatar.text ? (\n              <Avatar {...avatarProps} text={avatar.text} />\n            ) : (\n              <Avatar {...avatarProps} />\n            )}\n          </MuiIconButton>\n        ) : icon ? (\n          <MuiIconButton size=\"small\" classes={{ sizeSmall: classes.smallIconButton }} {...props}>\n            <Icon path={icon} />\n          </MuiIconButton>\n        ) : href ? (\n          <MuiButton\n            component={routerLink ? Link : 'a'}\n            {...{ [routerLink ? 'to' : 'href']: href }}\n            rel=\"noopener noreferrer\"\n            {...props}\n          />\n        ) : (\n          <MuiButton {...props} classes={{ root: classes.button }} />\n        )}\n\n        {_loading && (\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.buttonLoader}>\n            <CircularProgress size={24} />\n          </Box>\n        )}\n      </Box>\n    </ThemeProvider>\n  )\n}\nButton.propTypes = {\n  color: PropTypes.oneOf(['primary', 'secondary', 'info', 'warning', 'success', 'error']),\n  text: PropTypes.string,\n\n  href: PropTypes.string,\n  routerLink: PropTypes.bool,\n\n  icon: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  avatar: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({ src: PropTypes.string, text: PropTypes.string }),\n  ]),\n\n  loading: PropTypes.bool,\n  disabled: PropTypes.bool,\n}\n\nexport const Menu = React.forwardRef(\n  ({ items, activator, itemRenderer, noItemText, menuProps, ...props }, ref) => {\n    const classes = useStyles()\n\n    const [anchorEl, setAnchorEl] = React.useState(null)\n    const handleClick = event => setAnchorEl(event.currentTarget)\n    const handleClose = () => setAnchorEl(null)\n\n    if (!props.avatar && !props.icon) props.endIcon = <Icon path={anchorEl ? mdiChevronUp : mdiChevronDown} />\n    return (\n      <Box ref={ref}>\n        {(activator && typeof activator === 'function' && activator(handleClick, Boolean(anchorEl))) || (\n          <Button {...props} onClick={handleClick} />\n        )}\n        <MuiMenu\n          open={Boolean(anchorEl)}\n          anchorEl={anchorEl}\n          getContentAnchorEl={null}\n          onClose={handleClose}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n          classes={{ paper: classes.menuPaper }}\n          PopoverClasses={{ root: classes.menuPopover }}\n          elevation={3}\n          PaperProps={{ style: { maxHeight: 640 } }}\n          {...menuProps}>\n          {items.length ? (\n            items.map(item => (\n              <MenuItem\n                key={item._id || item.label}\n                onClick={() => {\n                  const { persistOnClick, onClick, ...rest } = item\n                  if (!persistOnClick) handleClose()\n                  if (onClick) onClick(rest)\n                }}>\n                {itemRenderer ? itemRenderer({ item }) : item.label}\n              </MenuItem>\n            ))\n          ) : (\n            <MenuItem disabled>{noItemText || 'No option available'}</MenuItem>\n          )}\n        </MuiMenu>\n      </Box>\n    )\n  }\n)\nMenu.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.string,\n      label: PropTypes.string,\n      persistOnClick: PropTypes.bool,\n      onClick: PropTypes.func.isRequired,\n    })\n  ).isRequired,\n  activator: PropTypes.func,\n  itemRenderer: PropTypes.func,\n  ...Button.propTypes,\n}\n\nexport const LabelWithIcon = ({ icon, label }) => {\n  return (\n    <Box display=\"inline-flex\">\n      {!!icon && (\n        <Box mr={1} display=\"inline-flex\" alignItems=\"center\">\n          <Icon path={icon} />\n        </Box>\n      )}\n      <Typography variant=\"h6\" component=\"h2\" noWrap>\n        {label}\n      </Typography>\n    </Box>\n  )\n}\nLabelWithIcon.propTypes = {\n  icon: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  label: PropTypes.string.isRequired,\n}\n\nexport const SectionHeader = ({ icon, label, leftComponent, rightComponent, alignItems = \"flex-end\" }) => {\n  return (\n    <Box display=\"flex\" alignItems={alignItems} pb={2}>\n      <LabelWithIcon icon={icon} label={label} />\n      <Box p={1} />\n      {leftComponent}\n      <Box flexGrow={1} />\n      {rightComponent}\n    </Box>\n  )\n}\nSectionHeader.propTypes = {\n  ...LabelWithIcon.propTypes,\n  leftComponent: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  rightComponent: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n}\n\nexport const Section = ({ icon, label, leftComponent, rightComponent, ...props }) => {\n  const { cardContent, cardActions, containerProps } = props\n  return (\n    <Box {...(containerProps || { pt: 4 })}>\n      <Card elevation={0}>\n        <CardContent>\n          <SectionHeader {...{ icon, label, leftComponent, rightComponent }} />\n          {cardContent}\n        </CardContent>\n        {!!cardActions && (\n          <CardActions>\n            <Box flexGrow={1} />\n            {cardActions}\n          </CardActions>\n        )}\n      </Card>\n    </Box>\n  )\n}\nSection.propTypes = {\n  icon: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  actionButton: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  headerContent: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  cardContent: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  cardActions: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n}\n\nconst beautifyStatus = status => status.replace(/_/g, ' ').split(':')[0]\nexport const Status = ({ status,color='primary' }) => {\n  const classes = useStyles()\n\n  return (\n    <Chip size=\"small\" color={color} classes={{ root: classes.status }} label={beautifyStatus(status)} />\n  )\n}\nStatus.propTypes = {\n  status: PropTypes.string.isRequired,\n}\n\nexport const ContentCell = ({ label, content, divider, inline = true, children, containerProps }) => (\n  <Box display={inline ? 'flex' : 'block'} alignItems=\"center\" my={0.5} {...containerProps}>\n    <Box mr={inline ? 1.5 : 0}>\n      <Typography variant=\"body1\" style={{ fontWeight: 500 }} noWrap>\n        {label}\n        {divider || (inline ? ' -' : '')}\n      </Typography>\n    </Box>\n    {!!content && (\n      <Typography variant=\"body1\" component=\"span\">\n        {content}\n      </Typography>\n    )}\n    {children}\n  </Box>\n)\nContentCell.propTypes = {\n  label: PropTypes.string.isRequired,\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  inline: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n}\n\nexport const NotificationCell = ({ username, team, text, addedAt, read }) => {\n  const classes = useStyles()\n\n  return (\n    <Box>\n      <Typography variant=\"body2\">\n        {username}, {team}\n      </Typography>\n      <Typography variant=\"body1\" className={classes.notificationText}>\n        {text}\n      </Typography>\n      <Typography variant=\"caption\" color=\"textSecondary\">\n        {format(addedAt, 'hh:mma MMM do, yyyy')} {read && '✓'}\n      </Typography>\n    </Box>\n  )\n}\n\nexport const LinkBlock = ({ url, cardActions, containerProps, ...headerProps }) => {\n  return (\n    <Box mt={4} {...containerProps}>\n      <Card>\n        <CardActionArea component={Link} to={url}>\n          <CardContent>\n            <Box mb={-2}>\n              <SectionHeader {...headerProps} />\n            </Box>\n          </CardContent>\n        </CardActionArea>\n        {cardActions && <CardActions>{cardActions}</CardActions>}\n      </Card>\n    </Box>\n  )\n}\nLinkBlock.propTypes = {\n  url: PropTypes.string.isRequired,\n  ...SectionHeader.propTypes,\n}\n\nexport const Loader = ({ absolute }) => {\n  const theme = useTheme()\n\n  const style = {\n    ...absoluteFillObject,\n    background: theme.palette.background.default,\n  }\n  if (!absolute) style.position = 'fixed'\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={style}>\n      <CircularProgress />\n    </Box>\n  )\n}\n\nexport const StatCard = ({ label, count }) => {\n  return (\n    <Card title={label}>\n      <CardContent style={{ display: 'flex', alignItems: 'center' }}>\n        <Typography variant=\"h6\" style={{ flexGrow: 1 }} noWrap>\n          {label}\n        </Typography>\n        <Typography variant=\"h4\" align=\"center\">\n          {count}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport const Dialog = ({ title, buttonProps: bp, width, children, dialogProps, activator, dialogOpen = null }) => {\n  const theme = useTheme()\n\n  const [open, setOpen] = React.useState(dialogOpen?.open || false)\n  const handleClose = () => { setOpen(false); dialogOpen && dialogOpen?.handleClose(false) }\n\n  useEffect(() => {\n    if(dialogOpen && dialogOpen?.open) setOpen(dialogOpen?.open)\n  }, [dialogOpen])\n\n  useEffect(() => {\n    if(!open) setOpen(dialogOpen?.open)\n  }, [open])\n\n  const buttonProps = { ...bp }\n  if (buttonProps.startIcon) buttonProps.startIcon = <Icon path={buttonProps.startIcon} />\n  if (!buttonProps.icon && !buttonProps.startIcon) buttonProps.startIcon = <Icon path={Icons.add} />\n  return (\n    <Box>\n      {(activator && typeof activator === 'function' && activator(() => setOpen(true))) || (\n        <Button variant=\"outlined\" size=\"small\" onClick={() => setOpen(true)} {...buttonProps}>\n          {title}\n        </Button>\n      )}\n      <MuiDialog open={open} onClose={handleClose} maxWidth=\"xl\" {...dialogProps}>\n        <DialogTitle>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            {title}\n\n            <Button\n              size=\"small\"\n              color=\"error\"\n              icon={Icons.close}\n              onClick={handleClose}\n              style={{ marginTop: -8, marginRight: -8 }}\n            />\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Box width={theme.breakpoints.values[width || 'sm']}>\n            {typeof children === 'function' ? children({ handleClose }) : children}\n          </Box>\n        </DialogContent>\n      </MuiDialog>\n    </Box>\n  )\n}\nDialog.propTypes = {\n  title: PropTypes.string.isRequired,\n  buttonProps: PropTypes.object,\n  width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  activator: PropTypes.func,\n}\n\nexport const ToggleButtons = ({ options, value, onChange }) => {\n  const classes = useStyles()\n\n  return (\n    <ButtonGroup size=\"small\">\n      {options.map(o => {\n        return (\n          <MuiButton\n            key={o.label}\n            className={clsx(classes.toggleButton, value === o.value && classes.activeToggleButton)}\n            onClick={() => onChange(o.value)}>\n            {o.label}\n          </MuiButton>\n        )\n      })}\n    </ButtonGroup>\n  )\n}\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/routes/app.js",["432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460"],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Login.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResetPassword.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResetPasswordRequest.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/_layout.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/index.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/auth.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/objectReducers.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/arrayReducers.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/store/reducers/app.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/icons.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Reseller.js",["461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482"],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/form.schema.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/services/api.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/index.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/config.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/ShippingAddress.js",["483"],"import React, { useState } from 'react'\nimport {\n  Box,\n  Dialog,\n  DialogContent,\n  DialogContentText,\n  InputAdornment,\n  TextField,\n  useTheme,\n} from '@material-ui/core'\nimport { mdiMapMarker } from '@mdi/js'\n\nimport addressConfig from './address.config'\n\nimport Form from '../index'\nimport { Icon } from '../../../components'\nimport shippingAddressConfig from \"./shippingAdress.config\";\n\nconst ShippingAddressInput = ({ inputRef, onChange, onBlur, value, ...props }) => {\n  const theme = useTheme()\n\n  const [showDialog, setShowDialog] = useState(false)\n  const openDialog = () => {\n    setShowDialog(true)\n  }\n  const closeDialog = values => {\n    setShowDialog(false)\n    onBlur && onBlur()\n    if (values) {\n      const { map, ...address } = values\n      onChange(address)\n    }\n  }\n\n  const _value = getShippingAddressString(value)\n\n  if (!props.disabled) props.onClick = openDialog\n  return (\n    <>\n      <TextField\n        {...props}\n        value={_value}\n        InputLabelProps={{ shrink: !!_value }}\n        InputProps={{\n          readOnly: true,\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Icon path={mdiMapMarker} color={theme.palette.text.secondary} />\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <Dialog open={showDialog} onClose={() => closeDialog({})} keepMounted={false}>\n        <DialogContent>\n          <DialogContentText>Address</DialogContentText>\n          <Box>\n            <Form\n              formConfig={shippingAddressConfig}\n              incomingValue={{ ...value, map: value }}\n              submitHandler={closeDialog}\n              cancelHandler={() => closeDialog()}\n            />\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n\nexport default ShippingAddressInput\n\nexport const getShippingAddressString = value =>\n  [\n    'name',\n    'cityCode',\n    'contactNumber',\n    'addressType',\n    'flatNumber',\n    'floorNumber',\n    'buildingNumber',\n    'line1',\n    'line2',\n    'city',\n    'area',\n    'state',\n    'country',\n    'PIN',\n  ]\n    .map(k => value && value[k])\n    .filter(Boolean)\n    .join(', ')\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Password.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Combobox.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/File.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Map.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Address.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/DateTime.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Time.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Date.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Phone.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Checkbox.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/Currency.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/shippingAdress.config.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Form/Inputs/address.config.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-referral.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Reseller.js",["484","485","486","487","488"],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/services/PageData/index.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/index.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/permissions.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/utils/index.js",["489"],"\nexport const formatCurrency = currency =>\n  new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'AED',\n  }).format(currency)\n\nexport const getPhoneString = phone =>\n  [phone?.countryCode, phone?.areaCode, phone?.number].filter(Boolean).join(' ')\n\n/* cSpell:disable */\nexport const getShippingFee = (from = 'default', to = 'default') => {\n  const feeStructure = {\n    dubai: {\n      dubai: 15,\n      sharjah: 15,\n      ajman: 20,\n      'abu dhabi': 20,\n      default: 25,\n    },\n    'abu dhabi': {\n      'abu dhabi': 15,\n      default: 25,\n    },\n    sharjah: {\n      dubai: 15,\n      sharjah: 15,\n      ajman: 15,\n      default: 25,\n    },\n    ajman: {\n      dubai: 20,\n      sharjah: 15,\n      ajman: 15,\n      default: 25,\n    },\n    default: {\n      default: 25,\n    },\n  }\n\n  const _from = feeStructure[from.toLowerCase()] || feeStructure['default']\n  return _from[to.toLowerCase()] || _from['default']\n}\n\nexport const getErfaPrice = (supplierPrice, platformMarginType, platformMargin) => {\n  return (\n    supplierPrice +\n    (platformMarginType === 'Percentage' ? (supplierPrice * platformMargin) / 100 : platformMargin)\n  )\n}\n\nexport const getDiscountedPrice = (\n  supplierPrice,\n  platformMarginType,\n  platformMargin,\n  discountType,\n  discount\n) => {\n  const erfaPrice = getErfaPrice(supplierPrice, platformMarginType, platformMargin)\n  return erfaPrice - (discountType === 'Percentage' ? (erfaPrice * discount) / 100 : discount)\n}\n\nexport const getCouponDiscountedPrice = (price, coupons = null) => {\n  if (coupons) {\n    let coupontDiscount = (coupons.discountType === 'Percentage' ? (price * coupons.discount) / 100 : coupons.discount)\n    if (coupontDiscount >= price) {\n      coupontDiscount = price\n    }\n    return coupontDiscount\n  }\n  return 0\n}\n\nconst blobToBase64 = blob => {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise(resolve => {\n    reader.onloadend = () => {\n      resolve(reader.result);\n    };\n  });\n};\n\nexport const downloadPDFBlob = async blob => {\n  // It is necessary to create a new blob object with mime-type explicitly set\n  // otherwise only Chrome works like it should\n  // const base64 = await blobToBase64(blob)\n  var newBlob = new Blob([blob], { type: \"application/pdf\" })\n\n  // IE doesn't allow using a blob object directly as link href\n  // instead it is necessary to use msSaveOrOpenBlob\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveOrOpenBlob(newBlob);\n    return;\n  }\n\n  // For other browsers: \n  // Create a link pointing to the ObjectURL containing the blob.\n  const data = window.URL.createObjectURL(newBlob);\n  var link = document.createElement('a');\n  link.href = data;\n  link.download = \"file.pdf\";\n  link.click();\n  setTimeout(function () {\n    // For Firefox it is necessary to delay revoking the ObjectURL\n    window.URL.revokeObjectURL(data);\n  }, 100);\n}\n\nexport const isValidateDateRange = (startDate, endDate) => {\n  if(!startDate || !endDate) return true\n  if (new Date(startDate) > new Date(endDate)) {\n    return false\n  }\n  return true\n}\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Coupons.js",["490","491"],"import React, { useCallback, useState, useEffect } from \"react\";\nimport { Box, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, } from \"@material-ui/core\";\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport Icons from \"../constants/icons\";\nimport usePageData from \"../services/PageData\";\nimport { get, createCoupon, updateCoupon, deleteCoupon } from \"../services/api\";\nimport { Table } from \"../components/Table\";\nimport { Button, Icon, Loader, SectionHeader, StatCard, ToggleButtons } from \"../components\";\nimport { toast } from \"react-toastify\";\nimport debounce from \"lodash/debounce\";\nimport format from \"date-fns/format\";\nimport CsvDownload from \"react-json-to-csv\";\nimport { v4 as uuidv4 } from 'uuid'\n\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { FormDialog } from \"../components/Form\";\nimport addCoupon from \"../constants/forms/add-coupon\";\nimport { useSelector } from \"react-redux\";\nimport { getPermissions, PERMISSION_CODES } from \"../constants/permissions\";\nimport { useParams } from \"react-router\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\nconst addCouponForm = cloneDeep(addCoupon);\n\nfunction Coupons() {\n  const classes = useStyles();\n  const params = useParams()\n  const [status, setStatus] = useState('Existing')\n  const [couponId, setCouponId] = useState(params.couponCode || \"\");\n  const {\n    coupons: bonuses,\n    totalItems,\n    containerRef,\n    Pagination,\n    filters,\n    filter,\n    permissions,\n    refresh,\n  } = usePageData(\"coupons\", { filters: { status, couponId } });\n\n  const [couponCodeQuery, setCouponCodeQuery] = useState(filters.couponCode || \"\");\n  const [lastQuery, setLastQuery] = useState(filters.couponCode || \"\")\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByCouponCode = useCallback(\n    debounce(q => {\n      if (q !== lastQuery) {\n        setLastQuery(q)\n        filter(f => ({ ...f, couponCode: q }))\n      }\n    }, 1250),\n    [filter]\n  );\n\n  const _addCoupon = async (values) => {\n    let payload = {\n      couponCode: values.couponCode,\n      discountType: values.discountType,\n      discount: values.discount,\n    }\n   \n    if (values.date) payload = { ...payload, validity:  new Date(values.date).toISOString()}\n    if (values.description) payload = { ...payload, description:  values.description}\n    payload = (values.totalUsage) ? { ...payload, totalUsage: values.totalUsage } : { ...payload, totalUsage: 0 }\n    payload = (values.perUserUsage) ? { ...payload, perUserUsage: values.perUserUsage } : { ...payload, perUserUsage: 0 }\n    await createCoupon(payload).then(resp => refresh());\n    toast.success(\"Coupon updated successfully.\");\n  };\n\n  const _updateCoupon = async (_id, values) => {\n    let payload = {\n      couponCode: values.couponCode,\n      discountType: values.discountType,\n      discount: values.discount,\n    }\n    if (values.date) payload = { ...payload, validity:  new Date(values.date).toISOString()}\n    payload = (values.totalUsage) ? { ...payload, totalUsage: values.totalUsage } : { ...payload, totalUsage: 0 }\n    payload = (values.perUserUsage) ? { ...payload, perUserUsage: values.perUserUsage } : { ...payload, perUserUsage: 0 }\n    if (values.description) payload = { ...payload, description:  values.description}\n\n    await updateCoupon(_id, payload).then(resp => refresh());\n    toast.success(\"Coupon updated successfully.\");\n  };\n\n  const [downloadableData, setDownloadableData] = useState([])\n  const [confirmDelete, setConfirmDelete] = useState(false);\n  const [deleteAdvertisementId, setDeleteAdvertisementId] = useState(null);\n\n  const handleClickOpen = () => {\n    setConfirmDelete(true);\n  };\n\n  const handleClose = () => {\n    setConfirmDelete(false);\n  };\n  const _deleteAdvertisement = async (_id) => {\n    if (!_id)\n      return;\n    await deleteCoupon(_id).then(resp => refresh());\n    toast.success(\"Coupon deleted successfully.\");\n  };\n  const clearFilters = () => {\n    setCouponId(\"\")\n    setCouponCodeQuery(\"\");\n    filter({});\n  };\n\n  async function getDownloadableData(params) {\n    const res = await get['coupons']({ params })\n    let data = res.data.map(o => ({\n      \"Coupon Code\": o.couponCode,\n      \"Validity\": o.validity ? format(new Date(o?.validity), \"MMM do, yyyy\") : \"-\",\n      \"Total Usage Allowed\": o.totalUsage,\n      \"Per User Usage Allowed\": o.perUserUsage,\n      \"Total Used\": o.totalUsed,\n      \"Description\": o.description,\n    }));\n    setDownloadableData(data)\n  }\n\n  useEffect(() => {\n    getDownloadableData({ status, getAll: true })\n  }, [])\n\n\n  useDeepCompareEffect(() => {\n    getDownloadableData({ ...filters, getAll: true })\n  }, [filters])\n\n  const state = useSelector(state => state);\n  const PERMISSIONS = state.auth?.user?.permissions;\n  const allowUpdate = getPermissions(PERMISSIONS, \"coupon\").includes(PERMISSION_CODES.coupon[2]);\n  return (\n    <Box ref={containerRef}>\n      {!bonuses ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of coupons\" count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.coupon}\n              label=\"Coupons\"\n              rightComponent={\n                <>\n                  {\n                    bonuses.length ?\n                      <CsvDownload data={downloadableData}\n                        filename={`Coupons.${format(new Date(), \"MMM-do-yyyy\")}.csv`}\n                        style={{\n                          background: \"#738C4A\",\n                          color: \"#fff\",\n                          padding: \"6px  16px\",\n                          fontWeight: 500,\n                          lineHeight: 1.75,\n                          border: 0,\n                          borderRadius: \"4px\",\n                          cursor: \"pointer\",\n                          marginRight: \"20px\"\n                        }}>\n                        Download Report\n                      </CsvDownload> : <></>\n                  }\n                  {permissions.CREATE && <FormDialog\n                    title='Add Coupon'\n                    formProps={{\n                      formConfig: addCouponForm,\n                      submitHandler: val => _addCoupon(val),\n                    }}\n                  />}\n                </>\n              }\n            />\n          </Box>\n\n          <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n            <Box mr={2} mb={1}>\n              <Icon color=\"primary\" path={Icons.filter} />\n            </Box>\n            <Box mr={5} mb={-0.5}>\n              <TextField\n                label=\"Search\"\n                placeholder=\"Coupon Code\"\n                variant=\"outlined\"\n                value={couponCodeQuery}\n                onChange={e => {\n                  setCouponId(\"\")\n                  setCouponCodeQuery(e.target.value);\n                  filterByCouponCode(e.target.value);\n                }}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Icon color=\"primary\" path={Icons.search} />\n                    </InputAdornment>\n                  )\n                }}\n                size=\"small\"\n              />\n            </Box>\n            <Box mr={1} mb={1}>\n              <ToggleButtons\n                options={[\n                  { label: 'All', value: null },\n                  { label: 'Existing', value: 'Existing' },\n                  { label: 'Expired', value: 'Expired' },\n                ]}\n                value={status}\n                onChange={v => setCouponId(\"\") & setStatus(v) & filter(f => ({ ...f, status: v }))}\n              />\n            </Box>\n          </Box>\n\n          {!!Object.values(filters).filter(Boolean).length && (\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"warning\"\n              onClick={clearFilters}\n              text=\"Clear Filters\"\n              style={{ marginLeft: 12 }}\n            />\n          )}\n\n          <Box mt={5}>\n            {bonuses.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => uuidv4()}\n                  columns={[\n                    { field: \"couponCode\", label: \"Coupon Code\" },\n                    { field: \"discountType\", label: \"Discount Type\" },\n                    { field: \"discount\", label: \"Discount\" },\n                    { field: \"validity\", label: \"Validity\" },\n                    { field: \"totalUsage\", label: \"Total Usage Allowed\" },\n                    { field: \"perUserUsage\", label: \"Per User Usage Allowed\" },\n                    { field: \"totalUsed\", label: \"Total Used\" },\n                    { field: \"description\", label: \"Description\" },\n                    { field: \"actions\", label: \"\" }\n                  ]}\n\n                  rows={[\n                    ...bonuses.map(o => ({\n                      couponId: o._id,\n                      couponCode: o.couponCode,\n                      discountType: o.discountType,\n                      discount: o.discount,\n                      validity: o.validity ? format(new Date(o?.validity), \"MMM do, yyyy\") : \"-\",\n                      totalUsage:  o.totalUsage > 0 ? o.totalUsage : '-',\n                      perUserUsage:  o.perUserUsage > 0 ? o.perUserUsage : '-',\n                      totalUsed: o.totalUsed,\n                      description: o.description,\n                      actions: allowUpdate && [\n                        <FormDialog\n                          key={\"update-button\" + o._id}\n                          title=\"Update Coupon\"\n                          buttonProps={{ icon: Icons.edit }}\n                          formProps={{\n                            formConfig: addCouponForm,\n                            submitHandler: val => _updateCoupon(o._id, val),\n                            incomingValue: {\n                              ...o,\n                              date: o.validity || '',\n                              totalUsage: o.totalUsage > 0 ? o.totalUsage : '',\n                              perUserUsage: o.perUserUsage > 0 ? o.perUserUsage : '',\n                            }\n                          }}\n                        />,\n\n                        <Button onClick={() => {\n                          setDeleteAdvertisementId(o._id);\n                          handleClickOpen();\n                        }} icon={Icons.delete} />\n                      ]\n                    }))\n                  ]}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No Bonus in system.</Typography>\n              </Box>\n            )}\n            {\n              confirmDelete && <Dialog\n                open={confirmDelete}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n              >\n                <DialogTitle id=\"alert-dialog-title\">{\"Delete coupon\"}</DialogTitle>\n                <DialogContent>\n                  <DialogContentText id=\"alert-dialog-description\">\n                    Are you sure you want to delete this coupon?\n                  </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                  <Button onClick={handleClose} color=\"primary\">\n                    Disagree\n                  </Button>\n                  <Button onClick={() => {\n                    _deleteAdvertisement(deleteAdvertisementId);\n                    handleClose();\n                    setDeleteAdvertisementId(null);\n                  }} color=\"primary\" autoFocus>\n                    Agree\n                  </Button>\n                </DialogActions>\n              </Dialog>\n            }\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default Coupons;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/AdvertisementBanners.js",["492","493","494","495","496","497","498","499","500","501"],"import React, { useEffect, useState } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport {\n  Box,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Grid,\n  makeStyles,\n  Typography\n} from \"@material-ui/core\";\n\nimport Icons from \"../constants/icons\";\nimport { Icon } from '../components'\nimport addAdvertisement from \"../constants/forms/add-advertisement\";\nimport { createAdvertisementBanner, deleteAdvertisement, deleteAdvertisementBanner, get, updateAdvertisement, updateAdvertisementBanner } from \"../services/api\";\nimport usePageData from \"../services/PageData\";\n\nimport { FormDialog } from \"../components/Form\";\nimport { Button, Loader, SectionHeader, StatCard } from \"../components\";\nimport { AdvertisementBannerCard } from \"../components/entitywise/AdvertisementBannerTemplate/AdvertisementBannerCard\";\nimport { toggleProcessIndicator } from \"../store/reducers/app\";\nimport { GridContextProvider, GridDropZone, GridItem, swap } from \"react-grid-dnd\";\nimport { setObject } from \"../store/reducers/objectReducers\";\nimport { addAdvertisementDisplayLocation } from \"../constants/forms/add-advertisement-template\";\nimport AdvertisementBannerTemplate from \"../components/entitywise/AdvertisementBannerTemplate/AdvertisementBannerTemplate\";\nimport { Layout } from \"../components/entitywise/AdvertisementBannerTemplate/Layouts\";\n\nconst addAdvertisementForm = cloneDeep(addAdvertisement);\nconst updateAdvertisementForm = cloneDeep(addAdvertisement);\nconst advertisementDisplayForm = cloneDeep(addAdvertisementDisplayLocation);\nconst useStyles = makeStyles(theme => ({\n  p8: { padding: theme.spacing(1) }\n}));\n\nfunction AdvertisementBanners() {\n  const state = useSelector(state => state);\n  const [collections, setCollections] = useState(null);\n  const [categories, setCategories] = useState([])\n  const [subcategories, setSubcategories] = useState([])\n  const subSubcategories = state[\"sub-subcategories\"];\n  const [confirmDelete, setConfirmDelete] = useState(false);\n  const [deleteAdvertisementId, setDeleteAdvertisementId] = useState(null);\n  const [showAdvertisementTemplate, setShowAdvertisementTemplate] = useState(false);\n  const [advertisementBannerForm, setAdvertisementBannerForm] = useState(false);\n  const [bannerData, setBannerData] = useState({});\n\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    Promise.all([get.allCollections({ params: { status:\"Active\" } })])\n      .then(resp => {\n        setCollections(resp[0]);\n      })\n      .catch(console.log)\n      .finally(() => dispatch(toggleProcessIndicator(false)));\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    async function getCategoriesData() {\n      try {\n        const [categories, subcategories] = await Promise.all([get.categories(), get.subcategories()])\n        setCategories(categories);\n        setSubcategories(subcategories);\n        dispatch(toggleProcessIndicator(false));\n      } catch(e) {\n        dispatch(toggleProcessIndicator(false));\n      }\n    }\n    getCategoriesData()\n  }, [])\n\n  useEffect(() => {\n    if (!categories || !categories.length) return;\n    const categoryOptions = categories.filter(s=>s.status === 'Active').map(c => ({ label: c.name, value: c._id }));\n    advertisementDisplayForm.category.options = categoryOptions;\n\n    if (!subcategories || !subcategories.length) return;\n    const subcategoryOptions = subcategories.filter(s=>s.status === 'Active').map(c => ({ label: c.name, value: c._id, category: c.category }));\n      advertisementDisplayForm.subcategory.options = (path, { getValueAtPath }) =>\n      subcategoryOptions.filter(c => c.category === getValueAtPath([\"category\"]));\n\n    if (!subSubcategories || !subSubcategories.length) return;\n    const subSubcategoryOptions = subSubcategories.filter(s=>s.status === 'Active').map(c => ({\n      label: c.name,\n      value: c._id,\n      subcategory: c.subcategory\n    }));\n\n    if (!collections || !collections.length) return;\n    const collectionOptions = collections.filter(s=>s.status === 'Active').map(c => ({\n      label: c.name,\n      value: c._id,\n      category: c.category,\n      subcategory: c.subcategory,\n      subSubcategory: c.subSubcategory\n    }));\n    const collectionOptionsFilter = (path, { getValueAtPath }) =>\n      collectionOptions.filter(c => {\n        const subSubcategory = getValueAtPath([\"subSubcategory\"]);\n        if (subSubcategory) return c.subSubcategory === subSubcategory;\n        const subcategory = getValueAtPath([\"subcategory\"]);\n        if (subcategory) return c.subcategory === subcategory;\n        const category = getValueAtPath([\"category\"]);\n        if (category) return c.category === category;\n        return false;\n      });\n    //advertisementDisplayForm._collection.options = collectionOptionsFilter;\n  }, [categories, subcategories, subSubcategories, collections]);\n\n  const advertisements = []\n\n  let { advertisementBanners, totalItems, containerRef, refresh, permissions  } = usePageData(\n    \"advertisementBanners\"\n  );\n\n  const saveBannerData = (data) => {\n    if(!advertisementBannerForm?.displayLocation || !advertisementBannerForm?.status) {\n      toast.error(\"Please fill all the details!\");\n      return\n    }\n    const tempData = {\n      displayLocation: advertisementBannerForm?.displayLocation,\n      status: advertisementBannerForm?.status,\n      category: advertisementBannerForm.category,\n      bannerData: data\n    }\n    if(bannerData && bannerData?._id) {\n      _updateAdvertisement(bannerData._id, tempData)\n    }\n    else\n    _createAdvertisement(tempData)\n  }\n\n  const closeAdTemplate = () => {\n    setShowAdvertisementTemplate();\n    setAdvertisementBannerForm();\n    setBannerData();\n\n  }\n\n  const _createAdvertisement = async data => {\n    await createAdvertisementBanner(data).then(resp => refresh());\n    closeAdTemplate()\n    toast.success(\"Advertisement added successfully.\");\n  };\n\n  const _updateAdvertisement = async (_id, data, noToast = false) => {\n    await updateAdvertisementBanner(_id, data).then(resp => refresh());\n    closeAdTemplate()\n    !noToast && toast.success(\"Advertisement updated successfully.\");\n  };\n\n  const _deleteAdvertisement = async (_id) => {\n    if (!_id)\n      return;\n    await deleteAdvertisementBanner(_id).then(resp => refresh());\n    toast.success(\"Advertisement deleted successfully.\");\n  };\n\n  const _createAdvertisementLayout = values => {\n    setBannerData();\n    setShowAdvertisementTemplate(true)\n    setAdvertisementBannerForm(values)\n  }\n\n  const _openEditBannerScreen = (ad, values) => {\n    if(!values?.displayLocation || !values?.status) {\n      toast.error(\"Please fill all the details!\");\n      return\n    }\n    const data = {\n      ...Layout,\n      layouts: {\n        ...ad.bannerData.coords,\n        lg: ad.bannerData.map(e => ({\n          ...e.coords,\n          data: e.data\n        }))\n      }\n    }\n    setAdvertisementBannerForm(values)\n    setBannerData({_id: ad._id, data})\n    setShowAdvertisementTemplate(true)\n  }\n\n  const handleClickOpen = () => {\n    setConfirmDelete(true);\n  };\n\n  const handleClose = () => {\n    setConfirmDelete(false);\n  };\n\n  function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n    // try {\n    //   if (sourceIndex === targetIndex) return;\n    //   _updateAdvertisement(advertisementBanners[targetIndex - 1]._id, { order: sourceIndex }, true);\n    //   _updateAdvertisement(advertisementBanners[sourceIndex - 1]._id, { order: targetIndex }, true);\n    //   const nextState = swap(advertisementBanners, sourceIndex - 1, targetIndex - 1);\n    //   dispatch(setObject(\"advertisementBanners\", nextState));\n    // } catch (e) {\n    //   toast.error(e.message);\n    // }\n  }\n\n  if(showAdvertisementTemplate)\n\n  return (\n    <Box ref={containerRef}>\n    {!advertisementBanners ? (\n      <Loader absolute />\n    ) : (\n      <>\n        <AdvertisementBannerTemplate categories={categories} subcategories={subcategories} getBannerData={(data) => saveBannerData(data)} permissions={permissions} defaultBanner={bannerData?.data} showScreen={closeAdTemplate} />\n      </>\n    )}\n    </Box>\n  )\n  return (\n    <Box ref={containerRef}>\n      {!advertisementBanners ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of Advertisements\" count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.ads}\n              label=\"Advertisements Banner\"\n              rightComponent={\n                permissions.CREATE && (\n                  <FormDialog\n                    title=\"Add Banner\"\n                    formProps={{\n                      formConfig: advertisementDisplayForm,\n                      uiProps: { ctaAreaBoxProps: { pt: 2 }, submitButtonText: 'Next' },\n                      submitHandler: _createAdvertisementLayout\n                    }}\n                  />\n                )\n              }\n            />\n            <Box mb={2} />\n\n            {advertisementBanners.length ? (\n              <GridContextProvider onChange={onChange}>\n                <GridDropZone\n                  boxesPerRow={4}\n                  rowHeight={300}\n                  style={{ height: Math.ceil(advertisements.length / 4) * 300 }}>\n                  {advertisementBanners.map(s => (\n                    <GridItem key={s._id} className={classes.p8}>\n                      <AdvertisementBannerCard\n                        advertisement={{\n                          ...s,\n                          category: s.category && categories && categories.filter(c => c._id === s.category)[0],\n                          subcategory: s.subcategory && subcategories && subcategories.filter(c => c._id === s.subcategory)[0]\n                        }}\n                        actions={\n                          permissions.UPDATE && (\n                            <>\n                              <FormDialog\n                                title=\"Update Advertisement\"\n                                buttonProps={{ icon: Icons.edit }}\n\n                                formProps={{\n                                  formConfig: advertisementDisplayForm,\n                                  submitHandler: val => _openEditBannerScreen(s, val),\n                                  incomingValue: s,\n                                  uiProps: { ctaAreaBoxProps: { pt: 2 }, submitButtonText: 'Next' },\n                                  selfDisabled: true\n                                }}\n                              />\n                              <Button onClick={() => {\n                                setDeleteAdvertisementId(s._id);\n                                handleClickOpen();\n                              }} icon={Icons.delete} />\n                            </>\n                          )\n                        }\n                      />\n                    </GridItem>\n                  ))}\n                </GridDropZone>\n              </GridContextProvider>\n            ) : (\n              <Box mt={4}>\n                <Typography variant=\"body2\">No advertisements in system.</Typography>\n              </Box>\n            )}\n            {\n              confirmDelete && <Dialog\n                open={confirmDelete}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n              >\n                <DialogTitle id=\"alert-dialog-title\">{\"Delete advertisement\"}</DialogTitle>\n                <DialogContent>\n                  <DialogContentText id=\"alert-dialog-description\">\n                    Are you sure you want to delete this advertisement?\n                  </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                  <Button onClick={handleClose} color=\"primary\">\n                    Disagree\n                  </Button>\n                  <Button onClick={() => {\n                    _deleteAdvertisement(deleteAdvertisementId);\n                    handleClose();\n                    setDeleteAdvertisementId(null);\n                  }} color=\"primary\" autoFocus>\n                    Agree\n                  </Button>\n                </DialogActions>\n              </Dialog>\n            }\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default AdvertisementBanners;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/SupplierPayment.js",["502","503"],"import { Box, Grid, Typography } from \"@material-ui/core\";\nimport { Button, ContentCell, Loader, Section } from \"../components\";\nimport { Table } from \"../components/Table\";\nimport { formatCurrency } from \"../utils\";\nimport { Link, useParams } from \"react-router-dom\";\nimport Icons from \"../constants/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport { get, updateSupplierPayment } from \"../services/api\";\nimport { FormDialog } from \"../components/Form\";\nimport { cloneDeep } from \"lodash\";\nimport supplierPaymentUpdate from \"../constants/forms/reseller-payment-update\";\nimport { toggleProcessIndicator } from \"../store/reducers/app\";\nimport { toast } from \"react-toastify\";\nimport { useDispatch } from \"react-redux\";\nimport format from \"date-fns/format\";\n\nconst SupplierPayment = () => {\n  const params = useParams();\n  const [supplier, setsupplier] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useDispatch();\n  const [refreshCount, setRefreshCount] = useState(0);\n  const refresh = () => setRefreshCount(refreshCount + 1);\n\n  const _updateOrder = (values) => {\n    delete values.amountToPay\n    const data = {\n      supplierBankDetails: values.bankDetails,\n      supplierPaymentStatus: values.status,\n      supplierPaymentMode: values.mode,\n      supplierTransactionDate: new Date(values.date).toISOString(),\n      supplierTransactionId: values?.transactionId,\n      supplierNotes: values.notes\n    };\n    if (['Waiting Payout', 'Eligible for Payout', 'Not Payable'].includes(data.supplierPaymentStatus)) {\n      data.supplierPaymentMode = null\n      data.supplierTransactionDate = null\n      data.supplierTransactionId = null\n    }\n    dispatch(toggleProcessIndicator(true));\n    let ids = []\n    if (values.orderIds) {\n      values.orderIds.filter(id => {\n        supplier.payments.map(order => {\n          if (order?.orderSystemId === id) {\n            ids.push(order?.orderId, id)\n          }\n        })\n      })\n    }\n    return updateSupplierPayment(ids, data)\n      .then(resp => {\n        toast.success(\"Order updated successfully.\");\n        refresh();\n        window.location.href = \"/supplier-payments\";\n      })\n      .catch(() => toast(\"Something went wrong!\", { type: \"error\" }))\n      .finally(() => {\n        dispatch(toggleProcessIndicator(false));\n      });\n  };\n\n  const supplierPaymentUpdateForm = cloneDeep(supplierPaymentUpdate);\n  const _UpdateSupplierPayment = async values => await _updateOrder(values);\n\n  useEffect(() => {\n    get[\"supplierPaymentDetail\"](params.supplier, params.status, params.transactionDate || \"\").then(r => setsupplier(r.data[0])).catch(e => console.log(e)).finally(() => setIsLoading(false));\n  }, [params]);\n\n  if(supplier && supplier.payments && supplier.payments.length)\n  {\n    supplierPaymentUpdateForm.orderIds.options = supplier.payments.map(p=>({label:p.orderId,value:p.order?._id}))\n  }\n\n  const [totalAmount, setTotalAmount] = useState(0)\n  useEffect(() => {\n    if(!!supplier?.payments?.length){\n      let amt = supplier.payments.reduce((total,next)=> total += (next.supplierPrice * next.order?.items[0].quantity),0)\n      setTotalAmount(amt)\n    }\n  }, [supplier])\n\n  return (\n    <Box>\n      {!supplier.length && isLoading ? (\n        <Loader absolute />\n      ) : (\n        <>\n\n          <Box mt={2.5} display=\"flex\">\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Section\n                  label=\"supplier Details\"\n                  containerProps={{ pt: 0 }}\n                  cardContent={\n                    <Box pl={1} mt={-1}>\n                      <ContentCell label=\"Id\" content={supplier.suppliers.humanFriendlyId || supplier.suppliers?._id} />\n                      <ContentCell label=\"Name\"\n                                   content={`${supplier.suppliers.name}`} />\n                      {supplier?.suppliers?.email && <ContentCell label=\"Email\" content={supplier.suppliers.email} />}\n                      {supplier?.totalAmount ? <ContentCell label=\"Supplier Margin\" content={formatCurrency(totalAmount)} /> : null}\n                      {supplier?.payments[0]?.supplierPaymentStatus &&\n                      <ContentCell label=\"Payment Status\" content={supplier?.payments[0]?.supplierPaymentStatus} />}\n                      {supplier?.payments[0]?.supplierPaymentMode &&\n                      <ContentCell label=\"Payment Mode\" content={supplier?.payments[0]?.supplierPaymentMode} />}\n                      {supplier?.payments[0]?.supplierTransactionDate && <ContentCell label=\"Transaction Date\"\n                                                                                      content={format(new Date(supplier?.payments[0]?.supplierTransactionDate), \"MMM do, yyyy\")} />}\n                      {supplier?.payments[0]?.supplierTransactionId &&\n                      <ContentCell label=\"Transaction Id\" content={supplier?.payments[0]?.supplierTransactionId} />}\n                      {supplier?.payments[0]?.supplierNotes &&\n                      <ContentCell label=\"Notes\" content={supplier?.payments[0]?.supplierNotes} />}\n                      {supplier?.payments[0]?.supplierPaymentMode === 'bank' &&  supplier?.payments[0]?.supplierBankDetails && <ContentCell label=\"Beneficiary Name\" content={supplier?.payments[0]?.supplierBankDetails.beneficiaryName} />}\n                      {supplier?.payments[0]?.supplierPaymentMode === 'bank' &&  supplier?.payments[0]?.supplierBankDetails && <ContentCell label=\"Bank Name\" content={supplier?.payments[0]?.supplierBankDetails.bankName} />}\n                      {supplier?.payments[0]?.supplierPaymentMode === 'bank' &&  supplier?.payments[0]?.supplierBankDetails && <ContentCell label=\"IBAN\" content={supplier?.payments[0]?.supplierBankDetails.iban} />}\n                    </Box>\n                  }\n                  rightComponent={\n                    <FormDialog\n                      title=\"Update Payments\"\n                      buttonProps={{ startIcon: Icons.supplier, disabled: (supplier?.payments[0]?.supplierPaymentStatus === 'Not Payable' || supplier?.payments[0]?.supplierPaymentStatus === 'Waiting Payout') }}\n                      formProps={{\n                        formConfig: supplierPaymentUpdateForm,\n                        submitHandler: _UpdateSupplierPayment,\n                        incomingValue: {\n                          entity:\"supplier\",\n                          payments:supplier.payments,\n                          date: supplier.payments[0].supplierTransactionDate || \"\",\n                          notes: supplier.payments[0].supplierNotes || \"\",\n                          orderIds: supplier.payments.map(p => p.order?._id),\n                          amountToPay: totalAmount,\n                          status: supplier.payments[0].supplierPaymentStatus,\n                          mode: supplier.payments[0].supplierPaymentMode,\n                          transactionId: supplier.payments[0].supplierTransactionId,\n                          bankDetails: supplier.suppliers.banks && supplier.suppliers.banks.length ? { ...supplier.suppliers.banks[0] } : {}}\n                      }}\n                    />\n                  }\n                />\n              </Grid>\n            </Grid>\n          </Box>\n          <Box mt={5}>\n            {supplier.payments.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => `${v.supplierId}${new Date().getTime()}`}\n                  columns={[\n                    { field: \"orderId\", label: \"Order Id\" },\n                    { field: \"orderDate\", label: \"Order Date\" },\n                    { field: 'deliveredAt', label: 'Delivery Date' },\n                    { field: \"total\", label: \"Total Amount\" },\n                    { field: \"actions\", label: \"\" }\n                  ]}\n                  rows={[\n                    ...supplier.payments.map(o => ({\n                      orderId: o?.orderId,\n                      orderDate: format(new Date(o.order?.createdAt), \"MMM do, yyyy\"),\n                      deliveredAt: o.order?.deliveredAt ? format(new Date(o.order.deliveredAt), 'MMM do, yyyy') : 'Not Yet Delivered',\n                      total: formatCurrency(o.supplierPrice * o.order?.items[0].quantity),\n                      actions: <Button component={Link} to={`/orders/` + o.orderSystemId} icon={Icons.send} />\n                    }))\n                  ]}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No orders in system.</Typography>\n              </Box>\n            )}\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default SupplierPayment;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResellersPayment.js",["504","505","506","507","508"],"import { Box, Grid, Typography } from '@material-ui/core'\nimport { Button, ContentCell, Loader, Section } from '../components'\nimport { Table } from '../components/Table'\nimport { formatCurrency } from '../utils'\nimport { Link, useParams } from 'react-router-dom'\nimport Icons from '../constants/icons'\nimport React, { useEffect, useState } from 'react'\nimport { get, updateResellerPayment } from '../services/api'\nimport { FormDialog } from '../components/Form'\nimport { cloneDeep } from 'lodash'\nimport resellerPaymentUpdate from '../constants/forms/reseller-payment-update'\nimport { toggleProcessIndicator } from '../store/reducers/app'\nimport { toast } from 'react-toastify'\nimport { useDispatch } from 'react-redux'\nimport format from 'date-fns/format'\n\nconst ResellersPayment = () => {\n  const params = useParams()\n  const [reseller, setReseller] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isReferralBonus, setIsReferralBonus] = useState(false)\n  const dispatch = useDispatch()\n  const [refreshCount, setRefreshCount] = useState(0)\n  const refresh = () => setRefreshCount(refreshCount + 1)\n\n  const _updateOrder = values => {\n    // delete values.amountToPay\n    const data = {\n      resellerBankDetails: values.bankDetails,\n      resellerPaymentStatus: values.status,\n      resellerPaymentMode: values.mode,\n      resellerTransactionDate: new Date(values.date).toISOString(),\n      resellerTransactionId: values?.transactionId,\n      resellerNotes: values.notes,\n      paymentAmount: values.amountToPay\n    }\n\n    if (['Waiting Payout', 'Eligible for Payout', 'Not Payable'].includes(data.resellerPaymentStatus)) {\n      data.resellerPaymentMode = null\n      data.resellerTransactionDate = null\n      data.resellerTransactionId = null\n    }\n    dispatch(toggleProcessIndicator(true))\n    let ids = []\n    if (values.orderIds) {\n      values.orderIds.filter(id => {\n        reseller.order.map(order => {\n          if (order?.orderSystemId === id) {\n            ids.push(order.orderId, id)\n          }\n        })\n      })\n    }\n    if (values.bonusIds) ids = [...ids, ...values.bonusIds]\n    return updateResellerPayment(ids, data)\n      .then(resp => {\n        toast.success('Order updated successfully.')\n        if (data.resellerTransactionDate) {\n          return window.location.pathname = `/reseller-payments/${params.reseller}/${data.resellerPaymentStatus}/${data.resellerTransactionDate}`\n        } else {\n          return window.location.pathname = `/reseller-payments/${params.reseller}/${data.resellerPaymentStatus}`\n        }\n      })\n      .catch(() => toast('Something went wrong!', { type: 'error' }))\n      .finally(() => {\n        dispatch(toggleProcessIndicator(false))\n      })\n  }\n\n  const sendEmail = () => {\n    get['sendEmail'](params.reseller, params.status, params.transactionId || '', isReferralBonus, params.transactionDate)\n      .then(res => {\n        toast.success('Successfully Sent Email Receipt')\n      })\n      .catch(e => {\n        toast.error(e)\n      })\n  }\n\n  const resellerPaymentUpdateForm = cloneDeep(resellerPaymentUpdate)\n\n  const _UpdateResellerPayment = async values => await _updateOrder(values)\n\n  useEffect(() => {\n    get['resellerPaymentDetail'](params.reseller, params.status, params.transactionDate || '')\n      .then(r => {\n        let order = [], bonus = [], payments = []\n        if (r.data.length > 0) {\n          r.data.map(data => {\n            if (data.payments.length > 0) {\n              data.payments.map(pay => {\n                if (pay.bonusId !== undefined) {\n                  if (pay.orderId !== undefined) {\n                    setIsReferralBonus(true)\n                  }\n                  bonus.push(pay)\n                } else {\n                  order.push(pay)\n                }\n                payments.push(pay)\n              })\n            }\n          })\n        }\n        if (!r.data[0]) {\n          return window.location.pathname = 'reseller-payments'\n        }\n        setReseller({ ...r.data[0], order, bonus, payments })\n      })\n      .catch(e => console.log(e))\n      .finally(() => setIsLoading(false))\n  }, [params])\n\n  if (reseller && reseller.order) {\n    if (reseller.order.length) {\n      resellerPaymentUpdateForm.orderIds.options = reseller.order.map(p => ({\n        label: p.orderId,\n        value: p?.orderSystemId,\n      }))\n    } else {\n      resellerPaymentUpdateForm.orderIds._hide = () => true\n    }\n  }\n  if (reseller && reseller.bonus && reseller.bonus.length) {\n    resellerPaymentUpdateForm.bonusIds._hide = () => false\n    resellerPaymentUpdateForm.bonusIds.options = reseller.bonus.map(p => ({\n      label: p.bonusId,\n      value: p.bonusId,\n    }))\n  }\n  return (\n    <Box>\n      {(!reseller || !reseller.length) && isLoading ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Box mt={2.5} display=\"flex\">\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Section\n                  label=\"Reseller Details\"\n                  containerProps={{ pt: 0 }}\n                  cardContent={\n                    <Box pl={1} mt={-1}>\n                      <ContentCell\n                        label=\"Id\"\n                        content={reseller?.resellers?.humanFriendlyId || reseller?.resellers?._id}\n                      />\n                      <ContentCell\n                        label=\"Name\"\n                        content={`${reseller?.resellers?.firstName} ${reseller?.resellers?.lastName || ''}`}\n                      />\n                      {reseller?.resellers?.email && (\n                        <ContentCell label=\"Email\" content={reseller.resellers.email} />\n                      )}\n                      {reseller?.totalAmount ? (\n                        <ContentCell\n                          label=\"Reseller Margin\"\n                          content={formatCurrency(reseller?.totalAmount || 0)}\n                        />\n                      ) : null}\n                      {reseller?.payments[0]?.resellerPaymentStatus && (\n                        <ContentCell\n                          label=\"Payment Status\"\n                          content={reseller?.payments[0]?.resellerPaymentStatus}\n                        />\n                      )}\n                      {reseller?.payments[0]?.resellerPaymentMode && (\n                        <ContentCell\n                          label=\"Payment Mode\"\n                          content={reseller?.payments[0]?.resellerPaymentMode}\n                        />\n                      )}\n                      {reseller?.payments[0]?.resellerTransactionDate && (\n                        <ContentCell\n                          label=\"Transaction Date\"\n                          content={format(\n                            new Date(reseller?.payments[0]?.resellerTransactionDate),\n                            'MMM do, yyyy'\n                          )}\n                        />\n                      )}\n                      {reseller?.payments[0]?.resellerTransactionId && (\n                        <ContentCell\n                          label=\"Transaction Id\"\n                          content={reseller?.payments[0]?.resellerTransactionId}\n                        />\n                      )}\n                      {reseller?.payments[0]?.resellerNotes && (\n                        <ContentCell label=\"Notes\" content={reseller?.payments[0]?.resellerNotes} />\n                      )}\n                      {reseller?.payments[0]?.resellerPaymentMode === 'bank' &&\n                        reseller?.payments[0]?.resellerBankDetails && (\n                          <ContentCell\n                            label=\"Beneficiary Name\"\n                            content={reseller?.payments[0]?.resellerBankDetails.beneficiaryName}\n                          />\n                        )}\n                      {reseller?.payments[0]?.resellerPaymentMode === 'bank' &&\n                        reseller?.payments[0]?.resellerBankDetails && (\n                          <ContentCell\n                            label=\"Bank Name\"\n                            content={reseller?.payments[0]?.resellerBankDetails.bankName}\n                          />\n                        )}\n                      {reseller?.payments[0]?.resellerPaymentMode === 'bank' &&\n                        reseller?.payments[0]?.resellerBankDetails && (\n                          <ContentCell\n                            label=\"IBAN\"\n                            content={reseller?.payments[0]?.resellerBankDetails.iban}\n                          />\n                        )}\n                    </Box>\n                  }\n                  rightComponent={\n                    <>\n                      {['Paid', 'Payment Initiated'].includes(params.status) &&\n                        reseller.resellers.email &&\n                        reseller.resellers.email.length && (\n                          <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            color=\"warning\"\n                            onClick={sendEmail}\n                            text=\"Send Email\"\n                            style={{ marginLeft: 12, marginRight: 12 }}\n                          />\n                        )}\n                      <FormDialog\n                        title=\"Update Payments\"\n                        buttonProps={{\n                          startIcon: Icons.reseller,\n                          disabled:\n                            reseller?.payments[0]?.resellerPaymentStatus === 'Not Payable' ||\n                            reseller?.payments[0]?.resellerPaymentStatus === 'Waiting Payout',\n                        }}\n                        formProps={{\n                          formConfig: resellerPaymentUpdateForm,\n                          submitHandler: _UpdateResellerPayment,\n                          incomingValue: {\n                            entity: 'reseller',\n                            payments: reseller.payments,\n                            date: reseller.payments[0].resellerTransactionDate || new Date().toISOString(),\n                            notes: reseller.payments[0].resellerNotes || '',\n                            orderIds: reseller.order.map(p => p?.orderSystemId),\n                            bonusIds: reseller.bonus.map(p => p.bonusId),\n                            amountToPay: reseller.payments.reduce(\n                              (total, next) => (total += next.resellerMargin),\n                              0\n                            ),\n                            status: reseller.payments[0].resellerPaymentStatus,\n                            mode: reseller.payments[0].resellerPaymentMode,\n                            transactionId: reseller.payments[0].resellerTransactionId,\n                            bankDetails:\n                              reseller.resellers.banks && reseller.resellers.banks.length\n                                ? { ...reseller.resellers.banks[0] }\n                                : {},\n                          },\n                        }}\n                      />\n                    </>\n                  }\n                />\n              </Grid>\n            </Grid>\n          </Box>\n          <Box mt={5}>\n            {reseller.order.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => `${v.orderId}${new Date().getTime()}`}\n                  columns={[\n                    { field: 'orderId', label: 'Order Id' },\n                    { field: 'orderDate', label: 'Order Date' },\n                    { field: 'deliveredAt', label: 'Delivery Date' },\n                    { field: 'total', label: 'Total Amount' },\n                    { field: 'actions', label: '' },\n                  ]}\n                  rows={reseller.order.map(o => ({\n                    orderId: o?.orderId,\n                    orderDate: o.order ? format(new Date(o.order.createdAt), 'MMM do, yyyy') : null,\n                    deliveredAt: o.order?.deliveredAt ? format(new Date(o.order.deliveredAt), 'MMM do, yyyy') : 'Not Yet Delivered',\n                    total: formatCurrency(o.resellerMargin),\n                    actions: <Button component={Link} to={`/orders/` + o.orderSystemId} icon={Icons.send} />,\n                  }))}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No orders in system.</Typography>\n              </Box>\n            )}\n          </Box>\n          <Box mt={5}>\n            {reseller.bonus.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => `${v.orderId}${new Date().getTime()}`}\n                  columns={[\n                    { field: 'bonusId', label: 'Bonus Id' },\n                    { field: 'orderId', label: 'Order Id' },\n                    { field: 'orderDate', label: 'Order Date' },\n                    { field: 'bonusType', label: 'Bonus Type' },\n                    { field: 'total', label: 'Total Amount' },\n                  ]}\n                  rows={reseller.bonus.map(o => ({\n                    bonusId: (o?.orderId && o?.bonusId) ? <Link style={{ color: \"#000\" }} to={`/bonus/${o?.bonusId}`} >{o?.bonusId}</Link> : o?.bonusId,\n                    orderId: o?.orderId,\n                    orderDate: o?.order?.createdAt ? format(new Date(o?.order?.createdAt), 'MMM do, yyyy') : null,\n                    bonusType: (o?.orderId && o?.bonusId) ? \"Referral Bonus\" : (!o?.orderId && o?.bonusId) ? \"Joining Bonus\" : \"\",\n                    total: formatCurrency(o.resellerMargin),\n                  }))}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No bonuses in system.</Typography>\n              </Box>\n            )}\n          </Box>\n        </>\n      )}\n    </Box>\n  )\n}\n\nexport default ResellersPayment\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Bonuses.js",["509","510","511","512","513","514","515","516","517","518","519"],"import React, { useCallback, useState, useEffect } from \"react\";\nimport { Box, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport Icons from \"../constants/icons\";\nimport usePageData from \"../services/PageData\";\nimport { get, updateBonus } from \"../services/api\";\nimport { Table } from \"../components/Table\";\nimport { Button, Icon, Loader, SectionHeader, StatCard, Status } from \"../components\";\nimport { formatCurrency, isValidateDateRange } from \"../utils\";\nimport { Link } from \"react-router-dom\";\nimport { RS_PAYMENT_MODE, RS_PAYMENT_STATUS } from \"../constants\";\nimport { toast } from \"react-toastify\";\nimport debounce from \"lodash/debounce\";\nimport format from \"date-fns/format\";\nimport CsvDownload from \"react-json-to-csv\";\nimport { v4 as uuidv4 } from 'uuid'\n\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { FormDialog } from \"../components/Form\";\nimport updateBonuses from \"../constants/forms/update-bonus\";\nimport { createSupplier } from \"../services/api\";\nimport { updateItem } from \"../store/reducers/arrayReducers\";\nimport { useDispatch } from \"react-redux\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\nconst updateBonusForm = cloneDeep(updateBonuses);\n\nfunction Bonus() {\n  const classes = useStyles();\n  const {\n    bonuses: bonuses,\n    totalItems,\n    containerRef,\n    Pagination,\n    filters,\n    filter,\n    permissions,\n    refresh,\n  } = usePageData(\"bonuses\", { filters: { status: null } });\n\n  const [humanFriendlyIdQuery, setHumanFriendlyIdQuery] = useState(filters.reseller || \"\");\n  const [lastQuery, setLastQuery] = useState(filters.reseller || \"\")\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByHumanFriendlyId = useCallback(\n    debounce(q => {\n      if (q !== lastQuery) {\n        setLastQuery(q)\n        filter(f => ({ ...f, reseller: q }))\n      }\n    }, 1250),\n    [filter]\n  );\n\n  const _updateBonus = async (values) => {\n    let opt = {}\n    opt = {\n      type: values.type,\n      config: {\n        [values.amountType]: values.amount,\n        expiryDate: values.expiryDate\n      }\n    }\n    await updateBonus(opt).then(resp => getBonusSettings());\n    toast.success(\"Bonus updated successfully.\");\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByTransactionId = useCallback(\n    debounce(q => filter(f => ({ ...f, transactionId: q })), 1250),\n    [filter]\n  );\n\n  const [downloadableData, setDownloadableData] = useState([])\n  const [bonusSetting, setBonusSetting] = useState([])\n  const [bonusType, setBonusType] = useState([])\n\n  const clearFilters = () => {\n    setHumanFriendlyIdQuery(\"\");\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n    filter({});\n  };\n\n  async function getDownloadableData(params) {\n    const res = await get['bonuses']({ params })\n    let data = res.data.map(r => ({\n      \"Bonus Id\": r._id,\n      \"Reseller Id\": r.reseller.humanFriendlyId || r.reseller_id,\n      \"Reseller Name\": `${r.reseller.firstName} ${r.reseller.lastName}`,\n      \"Referral Id\": r.reseller?.referralCode,\n      \"Bonus Type\": r.bonusConfig.type,\n      \"Total Amount\": r.amount,\n      \"Payment Status\": r.payment.resellerPaymentStatus,\n    }));\n    setDownloadableData(data)\n  }\n\n  useEffect(() => {\n    getDownloadableData({ getAll: true })\n    getBonusSettings()\n  }, [])\n  useDeepCompareEffect(() => {\n    getDownloadableData({ ...filters, getAll: true })\n  }, [filters])\n\n\n  const getBonusSettings = async () => {\n    const res = await get['bonusSettings']({ page:1,limit:10 })\n    setBonusSetting(res)\n  }\n\n  useEffect(() => {\n    if (bonusSetting.length > 0) {\n      let opt = []\n      let amountTypeOpt = []\n      bonusSetting?.map(item => {\n        if(item.type === 'joiningBonus') return // to hide joiningBouns\n        if(!item['isActive']) return\n        let object = item.config;\n        let config = {}\n        for (const property in object) {\n          if (property === \"expiryDate\") {\n            config = {\n              ...config, ...{\n                [property]: {\n                  type: \"date\",\n                  label: \"Expiry Date\",\n                  name: property,\n                  value: object[property],\n                  breakpoints: { xs: 6 },\n                }\n              }\n            }\n          } else {\n            config = {\n              ...config, ...{\n                amount: {\n                  type: \"text\",\n                  label: property,\n                  name: property,\n                  defaultValue: object[property],\n                  value: object[property],\n                  breakpoints: { xs: 6 },\n                }\n              }\n            }\n          }\n        }\n        opt.push({\n          label: item.type,\n          value: item.type,\n          config\n        })\n        amountTypeOpt = [\n          {\n            label: 'fixedAmount',\n            value: 'fixedAmount',\n            config\n          },\n          {\n            label: 'percentage',\n            value: 'percentage',\n            config\n          }\n        ];\n      })\n      setBonusType(opt)\n      updateBonusForm.type.options = opt\n      updateBonusForm.type.defaultValue = opt[0].value\n      updateBonusForm.amountType.options = amountTypeOpt\n      updateBonusForm.amountType.defaultValue = opt[0]?.config?.amount?.name\n      updateBonusForm.amount.defaultValue = opt[0].config.amount?.value\n      updateBonusForm.expiryDate.defaultValue = opt[0].config?.expiryDate?.value\n\n      updateBonusForm.amountType.onChange = (currentPath, currentValue, { setFieldValue, backTracePath, getDefaultValue }) => {\n        if (currentValue !== '') {\n          let filtered = amountTypeOpt.filter(c => c.value === currentValue)[0]\n          setFieldValue(backTracePath(currentPath, 'amount'), filtered?.config?.amount?.value)\n          setFieldValue(backTracePath(currentPath, 'expiryDate'), filtered?.config?.expiryDate?.value)\n        }\n      }\n    }\n  }, [bonusSetting])\n\n  useDeepCompareEffect(() => {\n    getDownloadableData({ ...filters, page:1,limit:10 })\n  }, [filters])\n\n  const [dateRate, setDateRange] = useState({ startDate: null, endDate: null });\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (!isValidateDateRange(startDateValue, value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      setEndDateValue(value)\n    }\n    if (id === 'startDate') {\n      if (endDateValue !== null && !isValidateDateRange(value, endDateValue)){\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      setStartDateValue(value)\n    }\n    setDateRange({ ...dateRate, [id]: new Date(value).toISOString() });\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      filter(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  return (\n    <Box ref={containerRef}>\n      {!bonuses ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of bonuses\" count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.orders}\n              label=\"Bonus\"\n              rightComponent={\n                <>\n                  {\n                    bonuses.length ?\n                      <CsvDownload data={downloadableData}\n                        filename={`Bonus.${format(new Date(), \"MMM-do-yyyy\")}.csv`}\n                        style={{\n                          background: \"#738C4A\",\n                          color: \"#fff\",\n                          padding: \"6px  16px\",\n                          fontWeight: 500,\n                          lineHeight: 1.75,\n                          border: 0,\n                          borderRadius: \"4px\",\n                          cursor: \"pointer\"\n                        }}>\n                        Download Report\n                      </CsvDownload> : <></>\n                  }\n                </>\n              }\n            />\n          </Box>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.bonus}\n              label=\"Bonus\"\n              rightComponent={\n                permissions.UPDATE && (\n                  <FormDialog\n                    title=\"Setting\"\n                    buttonProps={{ icon: Icons.settings }}\n                    formProps={{\n                      formConfig: updateBonusForm,\n                      submitHandler: val => _updateBonus(val),\n                    }}\n                  />\n                )\n              }\n            />\n          </Box>\n\n          <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n            <Box mr={2} mb={1}>\n              <Icon color=\"primary\" path={Icons.filter} />\n            </Box>\n            <Box mr={4} mb={-0.5}>\n              <TextField\n                label=\"Search\"\n                placeholder=\"name\"\n                variant=\"outlined\"\n                value={humanFriendlyIdQuery}\n                onChange={e => {\n                  setHumanFriendlyIdQuery(e.target.value);\n                  filterByHumanFriendlyId(e.target.value);\n                }}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Icon color=\"primary\" path={Icons.search} />\n                    </InputAdornment>\n                  )\n                }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"Payment Status\"\n                size=\"small\"\n                variant=\"outlined\"\n                placeholder=\"payment status\"\n                value={filters.resellerPaymentStatus || \"\"}\n                onChange={e => filter(filters => ({ ...filters, \"resellerPaymentStatus\": e.target.value }))}\n                select>\n                {RS_PAYMENT_STATUS.map(option => (\n                  <MenuItem key={option} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </TextField>\n\n              <TextField\n                label=\"Bonus type\"\n                size=\"small\"\n                variant=\"outlined\"\n                placeholder=\"Bonus type\"\n                value={filters.bonusType || \"\"}\n                onChange={e => filter(filters => ({ ...filters, \"bonusType\": e.target.value }))}\n                select>\n                {bonusType.map(option => (\n                  <MenuItem key={option?.label} value={option?.value}>\n                    {option?.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                id=\"startDate\"\n                size=\"small\"\n                variant=\"outlined\"\n                label=\"Select Start Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={startDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                id=\"endDate\"\n                size=\"small\"\n                variant=\"outlined\"\n                label=\"Select End Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={endDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n            </Box>\n          </Box>\n\n          {!!Object.values(filters).filter(Boolean).length && (\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"warning\"\n              onClick={clearFilters}\n              text=\"Clear Filters\"\n              style={{ marginLeft: 12 }}\n            />\n          )}\n\n          <Box mt={5}>\n            {bonuses.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => uuidv4()}\n                  columns={[\n                    { field: \"bonusCreatedDate\", label: \"Date\" },\n                    { field: \"resellerId\", label: \"Reseller Id\" },\n                    { field: \"resellerName\", label: \"Reseller Name\" },\n                    { field: \"referralName\", label: \"Referral Name\" },\n                    { field: \"orderId\", label: \"Order Id\" },\n                    { field: \"type\", label: \"Bonus Type\" },\n                    { field: \"total\", label: \"Bonus Amount\" },\n                    { field: \"paymentStatus\", label: \"Payment status\" },\n                    // { field: \"updatedBy\", label: \"Updated By\" },\n                    { field: \"actions\", label: \"\" }\n                  ]}\n\n                  rows={[\n                    ...bonuses.map(o => ({\n                      bonusCreatedDate: format(new Date(o.bonusCreatedDate), \"MMM do, yyyy\"),\n                      resellerId: o.reseller?.humanFriendlyId || o.reseller_id,\n                      resellerName: `${o.reseller?.firstName} ${o.reseller?.lastName}`,\n                      referralName: `${o.referredReseller?.firstName} ${o.referredReseller?.lastName}`,\n                      referralId: o.reseller?.referralCode || o.reseller?.referralId,\n                      orderId: o?.payment?.orderId ? <Link style={{ color: \"rgba(0, 0, 0, 0.87)\" }} to={`/orders/${o?.payment?.orderSystemId}`}>{o?.payment?.orderId}</Link> : \"-\",\n                      type: o.bonusConfig?.type,\n                      total: formatCurrency(o.amount),\n                      paymentStatus: <Status status={o.payment.resellerPaymentStatus}\n                        color={o.payment.resellerPaymentStatus === RS_PAYMENT_STATUS[1] ? \"secondary\" : \"primary\"} />\n                    }))\n                  ]}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No Bonus in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default Bonus;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Bonus.js",["520","521","522","523"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { format } from \"date-fns\";\nimport { Box, Card, CardActionArea, CardContent, CardMedia, Grid, Typography } from \"@material-ui/core\";\n\nimport { get } from \"../services/api\";\nimport { ContentCell, Loader, Section, Status } from \"../components\";\nimport { toggleProcessIndicator } from \"../store/reducers/app\";\nimport { formatCurrency, getCouponDiscountedPrice, getDiscountedPrice, getErfaPrice, getPhoneString } from \"../utils\";\nimport { Table } from \"../components/Table\";\n\n\nfunction Order() {\n  const params = useParams();\n\n  const [refreshCount, setRefreshCount] = useState(0);\n  const refresh = () => setRefreshCount(refreshCount + 1);\n  const [bonus, setBonus] = useState(null);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    get[\"bonus\"](params.bonusId)\n      .then(res => res.data)\n      .then(async b => {\n        b.type = \"Joining Bonus\"\n        if (b[0].payment?.orderSystemId) {\n          await get[\"order\"](b[0].payment?.orderSystemId)\n            .then(async o => {\n              const [items] = await Promise.all([\n                await Promise.all(\n                  o.items.map(async ({ ...i }) => {\n                    i.product = await get[\"product\"](i.product);\n                    return i;\n                  })\n                )\n              ]);\n              b.items = items\n              b.order = o\n              b.type = \"Referral Bonus\"\n            })\n            .catch(console.log)\n            .finally(() => dispatch(toggleProcessIndicator(false)));\n        }\n        let reseller = await get[\"reseller\"](b[0].referredResellerId)\n        b.reseller = reseller;\n        setBonus(b);\n      })\n      .catch(console.log)\n      .finally(() => dispatch(toggleProcessIndicator(false)));\n  }, [dispatch, params.bonusId, refreshCount]);\n\n  if (!bonus) return <Loader absolute />;\n\n  return (\n    <>\n      <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n        <Box display=\"flex\" flexDirection=\"column\">\n          <ContentCell label=\"Bonus ID\" content={bonus[0].humanFriendlyId || bonus[0]._id} />\n        </Box>\n        <ContentCell label=\"Bonus Type\" content={bonus.type} />\n      </Box>\n\n      <Box mt={2.5} display=\"flex\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Section\n              label=\"Reseller Details\"\n              containerProps={{ pt: 0 }}\n              cardContent={\n                bonus.reseller?.firstName && (\n                  <Box pl={1} mt={-1}>\n                    <Box display=\"flex\">\n                      <Typography\n                        variant=\"body1\">{`${bonus.reseller?.firstName} ${bonus.reseller?.lastName} (${bonus.reseller?.humanFriendlyId || bonus.reseller?._id})`}</Typography>\n                      <Box ml={1}>\n                        <Status status={bonus?.payment?.resellerPaymentStatus || \"Not Payable\"}\n                          color={bonus?.payment?.resellerPaymentStatus === \"Eligible for Payout\" ? \"secondary\" : \"primary\"} />\n                      </Box>\n                    </Box>\n                    <ContentCell label=\"Phone\" content={getPhoneString(bonus.reseller?.phone)} />\n                    <ContentCell label=\"Email\" content={bonus.reseller?.email} />\n                  </Box>\n                )\n              }\n            />\n          </Grid>\n          {\n            bonus[0].payment?.orderSystemId !== undefined ?\n              <>\n                <Grid item xs={6}>\n                  <Section\n                    label=\"Order Details\"\n                    containerProps={{ pt: 0 }}\n                    cardContent={\n                      bonus.reseller?.firstName && (\n                        <Box pl={1} mt={-1}>\n                          <ContentCell label=\"Order ID\" content={bonus?.order?.humanFriendlyId || bonus?.order?._id} />\n                          {bonus?.order?.createdAt && (\n                            <ContentCell label=\"Order Time\" content={format(new Date(bonus?.order?.createdAt), \"dd/MM/yyyy hh:mma\")} />\n                          )}\n                          <Status status={bonus?.order?.status} />\n                        </Box>\n                      )\n                    }\n                  />\n                </Grid>\n                <Grid item xs={8}>\n                  <Section\n                    label=\"Items\"\n                    containerProps={{ pt: 0 }}\n                    cardContent={bonus?.items?.map(item => {\n                      const supplierPrice = item.supplierPrice;\n                      const platformMargin = item.platformMarginType === \"Percentage\"\n                        ? formatCurrency(((item.supplierPrice * item.platformMargin) / 100) * item.quantity)\n                        : formatCurrency(item.platformMargin * item.quantity);\n                      const erfaPrice = getErfaPrice(supplierPrice, item.platformMarginType, item.platformMargin);\n                      const discount =\n                        item.discountType === \"Percentage\" ? item.discount + \"%\" : formatCurrency(item.discount);\n                      const discountedPrice = getDiscountedPrice(\n                        supplierPrice,\n                        item.platformMarginType,\n                        item.platformMargin,\n                        item.discountType,\n                        item.discount\n                      );\n\n                      const discountedCouponPrice = getCouponDiscountedPrice(\n                        discountedPrice * item.quantity, bonus?.order?.coupons\n                      )\n\n                      return (\n                        <Card key={item._id} style={{ marginRight: 4 }}>\n                          <CardActionArea component={Link} to={`/products/${item.product._id}`}>\n                            <Box style={{ display: \"flex\", alignItems: \"center\" }}>\n                              <CardMedia\n                                image={item.product?.images[0]?.image.thumbnail}\n                                style={{ height: 120, width: 120 }}\n                              />\n                              <CardContent>\n                                <Typography variant=\"body1\" noWrap>\n                                  {item.product.name}\n                                </Typography>\n                                <Box display=\"flex\">\n                                  <ContentCell label=\"Size\" content={item.size} />\n                                  <Box px={2} />\n                                  <ContentCell label=\"Quantity\" content={item.quantity} />\n                                </Box>\n                              </CardContent>\n                            </Box>\n                          </CardActionArea>\n                          <CardContent style={{ alignItems: \"flex-start\", display: \"block\" }}>\n                            <ContentCell label=\"Cost Breakup\" inline={false}>\n                              <Box pl={1} pt={1}>\n                                <Table\n                                  hideHeader\n                                  containerProps={{ style: { width: 360 } }}\n                                  getKey={v => v.id}\n                                  columns={[\n                                    { field: \"label\", label: \"Label\" },\n                                    { field: \"operator\", label: \"Op\", props: { width: 12 } },\n                                    { field: \"value\", label: \"Value\" }\n                                  ]}\n                                  rows={[\n                                    [\"Quantity\", null, item.quantity],\n                                    [\"Supplier Price\", null, formatCurrency(item.supplierPrice)],\n                                    [\"Supplier Total\", null, formatCurrency(item.supplierPrice * item.quantity)],\n                                    [\"Platform Margin\", null, formatCurrency((discountedPrice * item.quantity) - (item.supplierPrice * item.quantity))],\n                                    [\"Order Unit\", null, formatCurrency(discountedPrice)],\n                                    [\"Sub total\", null, formatCurrency(discountedPrice * item.quantity)],\n                                    [\"Coupon Discount\", null, `- ${formatCurrency(discountedCouponPrice)}`, null],\n                                    [\"Shipping Fee\", null, formatCurrency(item.shippingFee)],\n                                    [\"Reseller Margin\", null, formatCurrency(item.resellerMargin)],\n                                    [\n                                      \"Customer Price\",\n                                      null,\n                                      formatCurrency((discountedPrice * item.quantity) + item.resellerMargin + item.shippingFee - discountedCouponPrice)\n                                    ]\n                                  ].map((o, idx, arr) => ({\n                                    id: o[0],\n                                    label: (\n                                      <Typography variant={idx === arr.length - 1 ? \"body1\" : \"body2\"} noWrap>\n                                        {o[0]}\n                                      </Typography>\n                                    ),\n                                    operator: (\n                                      <Typography variant={idx === arr.length - 1 ? \"body1\" : \"body2\"} noWrap>\n                                        {o[1]}\n                                      </Typography>\n                                    ),\n                                    value: (\n                                      <Typography variant={idx === arr.length - 1 ? \"body1\" : \"body2\"} noWrap>\n                                        {o[2]}\n                                      </Typography>\n                                    )\n                                  }))}\n                                  size=\"small\"\n                                />\n                              </Box>\n                            </ContentCell>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  />\n                </Grid>\n              </>\n              : null\n          }\n        </Grid>\n      </Box>\n    </>\n  );\n}\n\nexport default Order;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Orders.js",["524","525","526","527"],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport debounce from \"lodash/debounce\";\nimport { Link } from \"react-router-dom\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport { Box, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography } from \"@material-ui/core\";\n\nimport Icons from \"../constants/icons\";\nimport { get } from \"../services/api\";\nimport usePageData from \"../services/PageData\";\n\nimport { Table } from \"../components/Table\";\nimport { Button, Icon, Loader, SectionHeader, StatCard, Status, ToggleButtons } from \"../components\";\nimport { getShippingAddressString } from \"../components/Form/Inputs/ShippingAddress\";\nimport { formatCurrency, getCouponDiscountedPrice, getPhoneString } from \"../utils\";\nimport { toast } from \"react-toastify\";\nimport CsvDownload from \"react-json-to-csv\";\nimport { RS_PAYMENT_STATUS } from \"../constants\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\nfunction Orders() {\n  const { orders: _orders, totalItems, containerRef, metaData, Pagination, filters, filter } = usePageData(\"orders\", { filters: { activeStatus: 'Active' } });\n  const classes = useStyles();\n  const orderValueRangeRef = useRef([0, 100]);\n  const [orders, setOrders] = useState(null);\n  const [ordersReport, setOrdersReport] = useState(null);\n  useDeepCompareEffect(() => {\n    if (metaData) orderValueRangeRef.current = metaData.orderValueRange;\n\n    if (_orders) {\n      Promise.all([\n        get[\"resellers\"]({ params: { _id: _orders.map(o => o.reseller), limit: 0 } }),\n        get[\"suppliers\"]({ params: { _id: _orders.map(o => o.supplier), limit: 0 } }),\n        get[\"orderReport\"]({ params: filters })\n      ]).then(([resellers, suppliers, orderReport]) => {\n        setOrdersReport(orderReport);\n        Promise.all(\n          _orders.map(async ({ ...o }) => {\n            o.supplier = suppliers.data.filter(s => o.supplier === s._id)[0];\n            o.reseller = resellers.data.filter(r => o.reseller === r._id)[0];\n            return o;\n          })\n        ).then(orders => setOrders(orders));\n      });\n    }\n  }, [_orders || [null]]);\n\n  const [resellerQuery, setResellerQuery] = useState(\"\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByReseller = useCallback(\n    debounce(q => filter(f => ({ ...f, reseller: q })), 1250),\n    [filter]\n  );\n  const [supplierQuery, setSupplierQuery] = useState(\"\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterBySupplier = useCallback(\n    debounce(q => filter(f => ({ ...f, supplier: q })), 1250),\n    [filter]\n  );\n  const [humanFriendlyIdQuery, setHumanFriendlyIdQuery] = useState(\"\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByHumanFriendlyId = useCallback(\n    debounce(q => filter(f => ({ ...f, humanFriendlyId: q })), 1250),\n    [filter]\n  );\n\n  const orderValueRange = orderValueRangeRef.current;\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByPriceRange = useCallback(\n    debounce(q => filter(f => ({ ...f, minPrice: q[0] || undefined, maxPrice: q[1] || undefined })), 1250),\n    [filter]\n  );\n\n  useEffect(() => {\n    get[\"orderReport\"]({ params: filters }).then(orderReport => setOrdersReport(orderReport))\n  }, []);\n\n  const clearFilters = () => {\n    setResellerQuery(\"\");\n    setSupplierQuery(\"\");\n    setHumanFriendlyIdQuery(\"\");\n    setMinOrderPrice(\"\")\n    setMaxOrderPrice(\"\")\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n    filter({});\n  };\n\n  const [dateRate, setDateRange] = useState({ startDate:null, endDate: null });\n  const [minOrderPrice, setMinOrderPrice] = useState('');\n  const [maxOrderPrice, setMaxOrderPrice] = useState('');\n\n  // const getCouponDiscountedPrice = (price, resellerMargin = 0, shippingFee = 0, coupons = null) => {\n  //   if (coupons) {\n  //     let amount = price - resellerMargin - shippingFee\n  //     let coupontDiscount = (coupons.discountType === 'Percentage' ? (amount * coupons.discount) / 100 : coupons.discount)\n  //     if (coupontDiscount >= amount) {\n  //       coupontDiscount = amount\n  //     }\n  //     return price - coupontDiscount\n  //   }\n  //   return price\n  // }\n\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, startDate: new Date(value).toISOString() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      filter(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  return (\n    <Box ref={containerRef}>\n      {(!orders || !_orders) ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of Orders\" count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.orders}\n              label=\"Orders\"\n              rightComponent={\n                <>\n                  {\n                    ordersReport.length ?\n                      <CsvDownload data={ordersReport} filename={`orders.${format(new Date(), \"MMM-do-yyyy\")}.csv`}\n                        style={{\n                          background: \"#738C4A\",\n                          color: \"#fff\",\n                          padding: \"6px  16px\",\n                          fontWeight: 500,\n                          lineHeight: 1.75,\n                          border: 0,\n                          borderRadius: \"4px\",\n                          cursor: \"pointer\"\n                        }}>\n                        Download Report\n                      </CsvDownload> : <></>\n                  }\n                </>\n              }\n            />\n\n\n            <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n              <Box mr={2} mb={1}>\n                <Icon color=\"primary\" path={Icons.filter} />\n              </Box>\n              <Box mr={4} mb={-0.5}>\n                <TextField\n                  label=\"Search\"\n                  placeholder=\"code\"\n                  variant=\"outlined\"\n                  value={humanFriendlyIdQuery}\n                  onChange={e => {\n                    setHumanFriendlyIdQuery(e.target.value);\n                    filterByHumanFriendlyId(e.target.value);\n                  }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Icon color=\"primary\" path={Icons.search} />\n                      </InputAdornment>\n                    )\n                  }}\n                  size=\"small\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  placeholder=\"Reseller Name\"\n                  value={resellerQuery}\n                  onChange={e => {\n                    setResellerQuery(e.target.value);\n                    filterByReseller(e.target.value);\n                  }}\n                  size=\"small\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  placeholder={`Supplier Name`}\n                  value={supplierQuery}\n                  onChange={e => {\n                    setSupplierQuery(e.target.value);\n                    filterBySupplier(e.target.value);\n                  }}\n                  size=\"small\"\n                />\n                <TextField\n                  label=\"Status\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  placeholder=\"status\"\n                  value={filters.status || \"\"}\n                  onChange={e => filter(filters => ({ ...filters, status: e.target.value }))}\n                  select>\n                  {[\n                    'Created',\n                    'Accepted',\n                    'Rejected',\n                    'Ready to ship',\n                    'Cancelled',\n                    'Shipped',\n                    'Out for delivery',\n                    'Delivered',\n                    'Exchange requested',\n                    'Exchange accepted',\n                    'Exchange rejected',\n                    'Exchange initiated',\n                    'Exchange picked up',\n                    'Exchanged',\n                    'Refund requested',\n                    'Refund initiated',\n                    'Refund accepted',\n                    'Refund rejected',\n                    'Refund processing',\n                    'Refund processed',\n                    'Return initiated',\n                    'Return picked up',\n                    'Returned',\n                    'Cancelled refund request',\n                    'Cancelled exchange request',\n                  ].map(option => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              <TextField\n                id=\"startDate\"\n                label=\"Select Start Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={startDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                id=\"endDate\"\n                label=\"Select End Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={endDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              </Box>\n            </Box>\n            <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n              <Box mr={4} mb={-0.5} display=\"flex\" alignItems={\"center\"}>\n                <TextField\n                  label=\"Payment Status\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  placeholder=\"payment status\"\n                  value={filters[\"resellerPaymentStatus\"] || \"\"}\n                  onChange={e => filter(filters => ({ ...filters, \"resellerPaymentStatus\": e.target.value }))}\n                  select>\n                  {RS_PAYMENT_STATUS.map(option => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <Box mr={1} mb={1}>\n                  <ToggleButtons\n                    options={[\n                      { label: \"All\", value: null },\n                      { label: \"Active\", value: \"Active\" },\n                      { label: \"Draft\", value: \"Draft\" }\n                    ]}\n                    value={filters.activeStatus}\n                    onChange={v => filter(f => ({ ...f, activeStatus: v }))}\n                  />\n                </Box>\n              </Box>\n            </Box>\n            <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n              <Box mr={4} mb={-0.5} display=\"flex\" alignItems={\"center\"}>\n                <TextField\n                  variant=\"outlined\"\n                  placeholder={`Min price`}\n                  value={minOrderPrice}\n                  onChange={(e) => {\n                    setMinOrderPrice(Number(e.target.value));\n                  }}\n                  type=\"number\"\n                  size=\"small\"\n                  inputProps={{ min: orderValueRange[0], max: orderValueRange[1] }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  type=\"number\"\n                  placeholder={`Max price`}\n                  value={maxOrderPrice}\n                  onChange={(e) => {\n                    setMaxOrderPrice(Number(e.target.value));\n                  }}\n                  size=\"small\"\n                  inputProps={{ min: orderValueRange[0], max: orderValueRange[1] }}\n                />\n                <Button text={\"Go\"} onClick={() => {\n                  if ((minOrderPrice !== '' && maxOrderPrice !== '') && (minOrderPrice > maxOrderPrice)) {\n                    toast.error(\"Max price cannot be greater than minimum price\");\n                    return;\n                  }\n                  filterByPriceRange([minOrderPrice, maxOrderPrice]);\n                }} />\n              </Box>\n              {!!Object.values(filters).filter(Boolean).length && (\n                <Button\n                  size=\"small\"\n                  variant=\"outlined\"\n                  color=\"warning\"\n                  onClick={clearFilters}\n                  text=\"Clear Filters\"\n                  style={{ marginLeft: 12 }}\n                />\n              )}\n              <Box flexGrow={1} />\n            </Box>\n\n            {orders.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => v._id}\n                  columns={[\n                    { field: \"order\", label: \"Order\", props: { width: 76 } },\n                    { field: \"reseller\", label: \"Reseller Details\" },\n                    { field: \"supplier\", label: \"Supplier Details\" },\n                    { field: \"customer\", label: \"Customer Details\" },\n                    { field: \"status\", label: \"Order Status\" },\n                    { field: \"activeStatus\", label: \"Active Status\" },\n                    { field: \"resellerPaymentStatus\", label: \"Reseller Payment Status\" },\n                    { field: \"total\", label: \"Total (AED)*\" },\n                    { field: \"actions\", label: \"\", props: { width: 48 } }\n                  ]}\n                  rows={[\n                    ...orders.map(o => ({\n                      _id: o._id,\n                      order: (\n                        <Box>\n                          <Typography variant=\"body2\" noWrap>\n                            ID: {o.humanFriendlyId}\n                          </Typography>\n                          <Typography variant=\"body2\" noWrap>\n                            @ {format(new Date(o.createdAt), \"MMM do, yyyy\")}\n                          </Typography>\n                        </Box>\n                      ),\n                      reseller: (\n                        <Box>\n                          {o.reseller?.firstName}\n                          <Typography variant=\"body2\" noWrap>\n                            {getPhoneString(o.reseller?.phone)}\n                          </Typography>\n                        </Box>\n                      ),\n                      supplier: (\n                        <Box>\n                          {o.supplier?.name}\n                          <Typography variant=\"body2\">{o.supplier?.email}</Typography>\n                        </Box>\n                      ),\n                      customer: (\n                        <Box>\n                          {o.customer?.name}\n                        </Box>\n                      ),\n                      createdAt: format(new Date(o.createdAt), \"MMM do, yyyy\"),\n                      status: o.status && <Status status={o.status} />,\n                      activeStatus: o.activeStatus && <Status status={o.activeStatus} />,\n                      resellerPaymentStatus: <Status status={o?.payments?.resellerPaymentStatus || 'Not Payable'}\n                        color={o?.payments?.resellerPaymentStatus === RS_PAYMENT_STATUS[1] ? \"secondary\" : \"primary\"} />,\n                      total: formatCurrency(o.orderValue),\n                      // total: formatCurrency(o.orderValue - (getCouponDiscountedPrice((o.orderValue - o?.payments?.resellerMargin - o?.items[0]?.shippingFee), o.coupon))),\n                      actions: <Button component={Link} to={`/orders/` + o._id} icon={Icons.send} />\n                    }))\n                  ]}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No orders in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default Orders;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/ResellersPayments.js",["528","529","530"],"import React, { useCallback, useState, useEffect } from \"react\";\nimport { Box, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport Icons from \"../constants/icons\";\nimport usePageData from \"../services/PageData\";\nimport { get } from \"../services/api\";\nimport { Table } from \"../components/Table\";\nimport { Button, Icon, Loader, SectionHeader, StatCard, Status } from \"../components\";\nimport { formatCurrency } from \"../utils\";\nimport { Link } from \"react-router-dom\";\nimport { RS_PAYMENT_MODE, RS_PAYMENT_STATUS } from \"../constants\";\nimport { toast } from \"react-toastify\";\nimport debounce from \"lodash/debounce\";\nimport format from \"date-fns/format\";\nimport CsvDownload from \"react-json-to-csv\";\nimport { v4 as uuidv4 } from 'uuid'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\nfunction ResellersPayments() {\n  const classes = useStyles();\n  const {\n    resellerPayment: resellers,\n    totalItems,\n    containerRef,\n    Pagination,\n    filters,\n    filter\n  } = usePageData(\"resellerPayment\", { filters: { status: null } });\n  const [humanFriendlyIdQuery, setHumanFriendlyIdQuery] = useState(filters.reseller || \"\");\n  const [lastQuery, setLastQuery] = useState(filters.reseller || \"\")\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByHumanFriendlyId = useCallback(\n    debounce(q => {\n      if (q !== lastQuery) {\n        setLastQuery(q)\n        filter(f => ({ ...f, reseller: q }))\n      }\n    }, 1250),\n    [filter]\n  );\n\n  const [transactionIdQuery, setTransactionIdQuery] = useState(\"\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByTransactionId = useCallback(\n    debounce(q => filter(f => ({ ...f, transactionId: q })), 1250),\n    [filter]\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByPriceRange = useCallback(\n    debounce(q => filter(f => ({ ...f, minPrice: q[0], maxPrice: q[1] })), 1250),\n    [filter]\n  );\n  const [priceRangeQuery, setPriceRangeQuery] = useState([-1, -1]);\n\n  const [minOrderPrice, setMinOrderPrice] = useState(\"\");\n  const [maxOrderPrice, setMaxOrderPrice] = useState(\"\");\n  const [dateRate, setDateRange] = useState({ startDate:null, endDate: null });\n  const [downloadableData, setDownloadableData] = useState([])\n  const clearFilters = () => {\n    setHumanFriendlyIdQuery(\"\");\n    setTransactionIdQuery(\"\");\n    setMaxOrderPrice(\"\");\n    setMinOrderPrice(\"\");\n    filter({});\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n  };\n\n  function getPhoneNumber({ countryCode, areaCode, number }) {\n    return `${countryCode || ''}${areaCode || ''}${number || ''}`\n  }\n\n  async function getDownloadableData(params) {\n    const resellers = await get['resellerPayment']({ params })\n    let data = resellers.data.map(r => ({\n      \"Reseller Id\": r.resellers.humanFriendlyId || r.resellers._id,\n      \"Reseller Name\": `${r.resellers.firstName} ${r.resellers.lastName || \"\"}`,\n      \"Phone\": r.resellers.phoneDetails[0] ? getPhoneNumber(r.resellers.phoneDetails[0]) : 'N/A',\n      \"Payment Status\": r._id.resellerPaymentStatus,\n      \"Total Amount\": r.totalAmount,\n      \"Orders\": r.payments.map(p => p.orderId).join(\", \"),\n      \"Payment Mode\": r.payments[0].resellerPaymentMode,\n      \"Notes\": r.payments[0].resellerPaymentNotes,\n      \"Transaction Date\": r.payments[0].resellerTransactionDate,\n      \"Transaction Id\": r.payments[0].resellerPaymentStatus,\n      \"Beneficiary Name\": r.payments[0]?.resellerBankDetails?.beneficiaryName || '',\n      \"Bank Name\": r.payments[0]?.resellerBankDetails?.bankName || '',\n      \"IBAN\": r.payments[0]?.resellerBankDetails?.iban || '',\n      \"Last updated by\": r.resellerUpdatedByData && r.resellerUpdatedByData.firstName ? `${r.resellerUpdatedByData.firstName} ${r.resellerUpdatedByData.lastName || ''}` : ''\n    }));\n    setDownloadableData(data)\n  }\n\n  useEffect(() => {\n    getDownloadableData({ getAll: true })\n  }, [])\n\n  useDeepCompareEffect(() => {\n    getDownloadableData({ ...filters, getAll: true })\n  }, [filters])\n\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, startDate: new Date(value).toISOString() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      filter(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n  return (\n    <Box ref={containerRef}>\n      {!resellers ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of resellers payments\" count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.orders}\n              label=\"Resellers Payments\"\n              rightComponent={\n                <>\n                  {\n                    resellers.length ?\n                      <CsvDownload data={downloadableData}\n                        filename={`resellerPayments.${format(new Date(), \"MMM-do-yyyy\")}.csv`}\n                        style={{\n                          background: \"#738C4A\",\n                          color: \"#fff\",\n                          padding: \"6px  16px\",\n                          fontWeight: 500,\n                          lineHeight: 1.75,\n                          border: 0,\n                          borderRadius: \"4px\",\n                          cursor: \"pointer\"\n                        }}>\n                        Download Report\n                      </CsvDownload> : <></>\n                  }\n                </>\n              }\n            />\n          </Box>\n          <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n\n            <Box mr={2} mb={1}>\n              <Icon color=\"primary\" path={Icons.filter} />\n            </Box>\n            <Box mr={4} mb={-0.5}>\n              <TextField\n                label=\"Search\"\n                placeholder=\"code,name\"\n                variant=\"outlined\"\n                value={humanFriendlyIdQuery}\n                onChange={e => {\n                  setHumanFriendlyIdQuery(e.target.value);\n                  filterByHumanFriendlyId(e.target.value);\n                }}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Icon color=\"primary\" path={Icons.search} />\n                    </InputAdornment>\n                  )\n                }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"Payment Status\"\n                size=\"small\"\n                variant=\"outlined\"\n                placeholder=\"payment status\"\n                value={filters.resellerPaymentStatus || \"\"}\n                onChange={e => filter(filters => ({ ...filters, \"resellerPaymentStatus\": e.target.value }))}\n                select>\n                {RS_PAYMENT_STATUS.map(option => (\n                  <MenuItem key={option} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                label=\"Payment Mode\"\n                size=\"small\"\n                variant=\"outlined\"\n                placeholder=\"payment mode\"\n                disabled={filters.resellerPaymentInfoStatus && filters.resellerPaymentInfoStatus !== \"Paid\"}\n                value={filters.resellerPaymentMode || \"\"}\n                onChange={e => filter(filters => ({ ...filters, \"resellerPaymentMode\": e.target.value }))}\n                select>\n                {[\n                  { label: \"Cash\", value: \"cash\" },\n                  { label: \"Card\", value: \"card\" },\n                  { label: \"Bank\", value: \"bank\" },\n                  { label: \"Wallet\", value: \"wallet\" },\n                  { label: \"ATM\", value: \"atm\" }\n                ].map(option => (\n                  <MenuItem key={option.label} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                label=\"Search\"\n                placeholder=\"Transaction Id\"\n                variant=\"outlined\"\n                value={transactionIdQuery}\n                onChange={e => {\n                  setTransactionIdQuery(e.target.value);\n                  filterByTransactionId(e.target.value);\n                }}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Icon color=\"primary\" path={Icons.search} />\n                    </InputAdornment>\n                  )\n                }}\n                size=\"small\"\n              />\n              <TextField\n                id=\"startDate\"\n                label=\"Select Start Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={startDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                id=\"endDate\"\n                label=\"Select End Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={endDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                placeholder={`Min price`}\n                value={minOrderPrice}\n                onChange={(e) => {\n                  setMinOrderPrice(Number(e.target.value));\n                }}\n                size=\"small\"\n              />\n              &nbsp;\n              <TextField\n                variant=\"outlined\"\n                placeholder={`Max price`}\n                value={maxOrderPrice}\n                onChange={(e) => {\n                  setMaxOrderPrice(Number(e.target.value));\n                }}\n                size=\"small\"\n              />\n              &nbsp;\n              <Button text={\"Go\"} onClick={() => {\n                if (maxOrderPrice && minOrderPrice > maxOrderPrice) {\n                  toast.error(\"Max price cannot be greater than minimum price\");\n                  return;\n                }\n                setPriceRangeQuery([minOrderPrice, maxOrderPrice]);\n                filterByPriceRange([minOrderPrice, maxOrderPrice]);\n              }} />\n            </Box>\n          </Box>\n\n\n          {!!Object.values(filters).filter(Boolean).length && (\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"warning\"\n              onClick={clearFilters}\n              text=\"Clear Filters\"\n              style={{ marginLeft: 12 }}\n            />\n          )}\n          <Box mt={5}>\n\n            {resellers.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => uuidv4()}\n                  columns={[\n                    { field: \"resellerId\", label: \"Reseller Id\" },\n                    { field: \"resellerName\", label: \"Reseller Name\" },\n                    { field: \"resellerPhone\", label: \"Phone\" },\n                    { field: \"total\", label: \"Total Amount\" },\n                    { field: \"resellerPaymentStatus\", label: \"Payment status\" },\n                    { field: \"transactionMode\", label: \"Payment Mode\" },\n                    { field: \"transactionId\", label: \"Transaction Id\" },\n                    { field: \"transactionDate\", label: \"Transaction Date\" },\n                    { field: \"bonus\", label: \"Bonus\" },\n                    { field: \"updatedBy\", label: \"Updated By\" },\n                    { field: \"actions\", label: \"\" }\n                  ]}\n                  rows={[\n                    ...resellers.map(o => ({\n                      resellerId: o.resellers?.humanFriendlyId || o.resellers?._id,\n                      resellerName: `${o.resellers?.firstName} ${o.resellers?.lastName || \"\"}`,\n                      resellerPhone: o.resellers?.phoneDetails[0] ? getPhoneNumber(o.resellers.phoneDetails[0]) : 'N/A',\n                      total: formatCurrency(o.totalAmount),\n                      transactionId: o._id.resellerTransactionId || \"-\",\n                      transactionMode: o?.payments[0].resellerPaymentMode ? RS_PAYMENT_MODE.find(rp => rp.value === o?.payments[0].resellerPaymentMode).label : \"-\",\n                      transactionDate: o?.payments[0].resellerTransactionDate ? format(new Date(o?.payments[0].resellerTransactionDate), \"MMM do, yyyy\") : \"-\",\n                      status: o._id.resellerPaymentStatus,\n                      updatedBy: `${o.resellerUpdatedByData && o.resellerUpdatedByData.firstName ? `${o.resellerUpdatedByData.firstName} ${o.resellerUpdatedByData.lastName || ''}` : '-'}`,\n                      actions: <Button component={Link}\n                        to={`/reseller-payments/${o._id.resellerId}/${o._id.resellerPaymentStatus}${o?._id?.resellerTransactionDate ? `/${o._id.resellerTransactionDate}` : \"\"}`}\n                        icon={Icons.send} />,\n                      resellerPaymentStatus: <Status status={o._id.resellerPaymentStatus}\n                        color={o._id.resellerPaymentStatus === RS_PAYMENT_STATUS[1] ? \"secondary\" : \"primary\"} />,\n                      bonus: (o?.payments[0]?.bonusId) ?  <Link style={{color:\"#000\"}} to={`/reseller-payments/${o._id.resellerId}/${o._id.resellerPaymentStatus}${o?._id?.resellerTransactionDate ? `/${o._id.resellerTransactionDate}` : \"\"}`} > Bonus </Link>:\"\"\n                    }))\n                  ]}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No resellers in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default ResellersPayments;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Order.js",["531","532","533","534"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { cloneDeep } from \"lodash\";\nimport { format } from \"date-fns\";\nimport { toast } from \"react-toastify\";\nimport { Box, Card, CardActionArea, CardContent, CardMedia, Grid, Typography } from \"@material-ui/core\";\n\nimport { createOrder, get, updateOrder, updatePayment } from \"../services/api\";\n\nimport Icons from \"../constants/icons\";\nimport { getPermissions, PERMISSION_CODES } from \"../constants/permissions\";\nimport updateOrderCustomer from \"../constants/forms/update-order-customer\";\nimport updateOrderNotes from \"../constants/forms/update-order-notes\";\nimport { promptRemark } from \"../constants/forms\";\nimport { ContentCell, Icon, Loader, Menu, Section, Status } from \"../components\";\nimport { toggleProcessIndicator } from \"../store/reducers/app\";\nimport { getAddressString } from \"../components/Form/Inputs/Address\";\nimport { formatCurrency, getCouponDiscountedPrice, getDiscountedPrice, getErfaPrice, getPhoneString } from \"../utils\";\nimport { ORDER_STATUSES, RS_PAYMENT_MODE, RS_PAYMENT_STATUS } from \"../constants\";\nimport { Table } from \"../components/Table\";\nimport { FormDialog } from \"../components/Form\";\nimport { prompt } from \"../components/Prompt\";\nimport addOrder from \"../constants/forms/add-order\";\n\n\nconst addOrderForm = cloneDeep(addOrder);\nconst updateOrderCustomerForm = cloneDeep(updateOrderCustomer);\nconst updateOrderNotesForm = cloneDeep(updateOrderNotes);\n\n\nfunction Order() {\n  const params = useParams();\n\n  const [refreshCount, setRefreshCount] = useState(0);\n  const refresh = () => setRefreshCount(refreshCount + 1);\n  const [order, setOrder] = useState(null);\n\n  const state = useSelector(state => state);\n  const PERMISSIONS = state.auth?.user?.permissions;\n  const dispatch = useDispatch();\n\n  const resellerStatus = [\"Cancelled\", \"Return requested\", \"Exchange requested\", \"Refund requested\", \"Cancelled refund request\", \"Cancelled exchange request\"];\n  const rejectedOrderPaymentStatus = [\n    'Cancelled',\n    'Rejected',\n    'Exchange accepted',\n    'Exchange rejected',\n    'Exchange initiated',\n    'Exchange picked up',\n    'Exchanged',\n    'Refund accepted',\n    'Refund rejected',\n    'Refund processing',\n    'Refund processed',\n    'Return initiated',\n    'Return picked up',\n    'Returned',\n  ]\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    get[\"order\"](params.orderId)\n      .then(async o => {\n        const [items, actions, notes, reseller] = await Promise.all([\n          await Promise.all(\n            o.items.map(async ({ ...i }) => {\n              i.product = await get[\"product\"](i.product);\n              i.product.supplier = await get[\"supplier\"](i.product.supplier);\n              return i;\n            })\n          ),\n          await Promise.all(\n            o.actions.reverse().map(async ({ ...a }) => {\n              const superuser = await get[\n                resellerStatus.includes(a.status) ? \"reseller\" : \"superuser\"\n              ](a.updatedBy);\n              a.updatedBy = [superuser.firstName, superuser.lastName].filter(Boolean).join(\" \");\n              return a;\n            })\n          ),\n          await Promise.all(\n            o.notes.reverse().map(async ({ ...a }) => {\n              const superuser = await get[\"superuser\"](a.updatedBy);\n              a.updatedBy = [superuser.firstName, superuser.lastName].filter(Boolean).join(\" \");\n              return a;\n            })\n          ),\n          get[\"reseller\"](o.reseller)\n        ]);\n        o.items = items;\n        o.actions = actions;\n        o.notes = notes;\n        o.reseller = reseller;\n        setOrder(o);\n      })\n      .catch(console.log)\n      .finally(() => dispatch(toggleProcessIndicator(false)));\n  }, [dispatch, params.orderId, refreshCount]);\n\n  const _updateOrder = async values => {\n    dispatch(toggleProcessIndicator(true));\n    return updateOrder(order._id, values)\n      .then(resp => {\n        toast.success(\"Order updated successfully.\");\n        refresh();\n      })\n      .catch(() => toast(\"Something went wrong!\", { type: \"error\" }))\n      .finally(() => {\n        dispatch(toggleProcessIndicator(false));\n      });\n  };\n\n  const _updatePayment = async values => {\n    dispatch(toggleProcessIndicator(true));\n    return updatePayment(order.humanFriendlyId, {...values, ids:[order.humanFriendlyId]})\n      .then(resp => {\n        toast.success(\"Order Payment updated successfully.\");\n        refresh();\n      })\n      .catch(() => toast(\"Something went wrong!\", { type: \"error\" }))\n      .finally(() => {\n        dispatch(toggleProcessIndicator(false));\n      });\n  }\n  const updatePaymentActions = RS_PAYMENT_STATUS.filter(s => s !== RS_PAYMENT_STATUS[2] && s !== RS_PAYMENT_STATUS[3]).map(s => ({\n    _id: s,\n    label: s,\n    onClick: () => prompt(`Payment Status`, `Reseller and Supplier Payment Status to ${s}`, () => _updatePayment({ \"resellerPaymentStatus\": s, \"supplierPaymentStatus\": s }))\n  }));\n\n  const updateActions = ORDER_STATUSES.map(s => ({\n    _id: s,\n    label: s,\n    onClick: () =>\n      resellerStatus.includes(s) ? toast.info(\"Can be only done by reseller\") : prompt(`Updating status to '${s}'`, \"Add remark (optional)\", {\n        formConfig: promptRemark,\n        selfDisabled: false,\n        submitHandler: ({ remark }) => _updateOrder({ status: s, remark })\n      })\n  }));\n\n  const allowUpdate = getPermissions(PERMISSIONS, \"order\").includes(PERMISSION_CODES.order[1]);\n\n  if (!order) return <Loader absolute />;\n\n  async function _createOrder(val) {\n    try {\n      const {\n        size,\n        quantity,\n        supplierPrice,\n        platformMargin,\n        platformMarginType,\n        discount,\n        resellerMargin,\n        discountType,\n        shippingFee,\n        customer,\n        shippingAddress,\n        reseller,\n        lastOrder\n      } = val;\n      let items = [];\n      items.push({\n        product: order.items[0].product._id,\n        size,\n        quantity,\n        supplierPrice,\n        platformMargin,\n        platformMarginType,\n        discount,\n        resellerMargin,\n        discountType,\n        shippingFee\n      });\n      if (!reseller) {\n        toast.error(\"Please provide reseller Id\");\n        return;\n      }\n      let orderData = { customer, shippingAddress, items, reseller, lastOrder };\n      await createOrder(orderData);\n      toast.success(\"Order created successfully\");\n      localStorage.removeItem(\"add-order-admin\");\n    } catch (e) {\n      if (e.response.data.message) {\n        toast.error(e.response.data.message);\n      } else\n        toast.error(e.response.data);\n    }\n  }\n\n  function parseOrder(lastOrder) {\n    let data = { ...lastOrder, reseller: lastOrder.reseller.humanFriendlyId || lastOrder.reseller._id };\n    Object.keys(lastOrder.items[0].product).map(op => data[op] = lastOrder.items[0][\"product\"][op]);\n    let p = cloneDeep({\n      ...data,\n      quantity: 0,\n      resellerMargin: 0,\n      shippingFee: 0,\n      size: \"\",\n      lastOrder: lastOrder.humanFriendlyId || lastOrder._id\n    });\n    let localstorageData = cloneDeep(JSON.parse(localStorage.getItem(\"add-order-admin\")));\n    if (localstorageData) {\n      if (!localstorageData.size) {\n        if (localstorageData.quantity) localstorageData.quantity = 0;\n      } else {\n        let localSize = p.sizes.find(ps => ps.size === localstorageData.size);\n        let localQuantity = localstorageData.quantity;\n        if (!localSize)\n          localstorageData.quantity = 0;\n        if (localQuantity && localSize) {\n          if (localQuantity >= localSize.stock)\n            localstorageData.quantity = localSize.stock;\n        }\n      }\n      localstorageData.orderTotal = ((p.discountedPrice) * (localstorageData.quantity || 0)) + (localstorageData.resellerMargin || 0) + (localstorageData.shippingFee || 0);\n    }\n    return { ...localstorageData, ...p };\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={4}>\n        {allowUpdate ? (\n          <Menu\n            activator={(clickHandler, isOpen) => (\n              <Box display=\"flex\" onClick={clickHandler} style={{ cursor: \"pointer\" }} tabIndex=\"0\">\n                <Status status={order.status} />\n                <Icon path={isOpen ? Icons.upArrow : Icons.downArrow} />\n              </Box>\n            )}\n            items={updateActions}\n            menuProps={{\n              anchorOrigin: { vertical: \"bottom\", horizontal: \"left\" },\n              transformOrigin: { vertical: \"top\", horizontal: \"left\" }\n            }}\n          />\n        ) : (\n          <Status status={order.status} />\n        )}\n\n        {order.createdAt && (\n          <ContentCell label=\"Order Time\" content={format(new Date(order.createdAt), \"dd/MM/yyyy hh:mma\")} />\n        )}\n      </Box>\n\n      <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n        <Box display=\"flex\" flexDirection=\"column\">\n          <ContentCell label=\"Order ID\" content={order.humanFriendlyId || order._id} />\n          {order?.paymentInfo?.paymentMode && <ContentCell label=\"Payment Method\"\n            content={RS_PAYMENT_MODE.find(p => p.value === order.paymentInfo.paymentMode).label} />}\n            {order?.paymentInfo?.transactionId && <ContentCell label=\"Transaction ID\"\n              content={order.paymentInfo.transactionId} />}\n        </Box>\n        <Box display=\"flex\">\n          <FormDialog\n            title=\"Add New Order\"\n            formProps={{\n              formConfig: addOrderForm,\n              submitHandler: _createOrder,\n              incomingValue: parseOrder(order)\n            }}\n          />\n        </Box>\n      </Box>\n      {order.trackingLink && (\n        <ContentCell label=\"Tracking Link\">\n          <a href={order.trackingLink} target=\"_blank\" rel=\"noreferrer\">\n            <Typography variant=\"body1\" component=\"span\">\n              {order.trackingLink}\n            </Typography>\n          </a>\n        </ContentCell>\n      )}\n      {order.lastOrder && (\n        <ContentCell label=\"Previous Order\">\n          <a href={order.lastOrders._id} target=\"_blank\" rel=\"noreferrer\">\n            <Typography variant=\"body1\" component=\"span\">\n              {order.lastOrders.humanFriendlyId || order.lastOrders._id.substring(0, 6)}\n            </Typography>\n          </a>\n        </ContentCell>\n      )}\n\n      <Box mt={2.5} display=\"flex\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Section\n              label=\"Customer Details\"\n              containerProps={{ pt: 0 }}\n              cardContent={\n                <Box pl={1} mt={-1}>\n                  <ContentCell label=\"Name\" content={order.customer.name} />\n                  <ContentCell label=\"Phone\" content={getPhoneString(order.customer?.phone)} />\n                  {!!order.customer?.email && <ContentCell label=\"Email\" content={order.customer?.email} />}\n                  {order.shippingAddress && (\n                    <ContentCell label=\"Shipping Address\" content={getAddressString(order.shippingAddress)} />\n                  )}\n                </Box>\n              }\n              rightComponent={\n                <FormDialog\n                  title=\"Update Details\"\n                  buttonProps={{ icon: Icons.edit }}\n                  formProps={{\n                    formConfig: updateOrderCustomerForm,\n                    submitHandler: val =>\n                      _updateOrder({\n                        customer: { name: val.name, phone: val.phone },\n                        shippingAddress: val.address,\n                        trackingLink: val.trackingLink\n                      }),\n                    incomingValue: {\n                      ...order.customer,\n                      address: order.shippingAddress,\n                      trackingLink: order.trackingLink\n                    }\n                  }}\n                />\n              }\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Section\n              label=\"Reseller Details\"\n              containerProps={{ pt: 0 }}\n              cardContent={\n                order.reseller?.firstName && (\n                  <Box pl={1} mt={-1}>\n                    <Box display=\"flex\">\n                      <Typography\n                        variant=\"body1\">{`${order.reseller?.firstName} ${order.reseller?.lastName} (${order.reseller?.humanFriendlyId || order.reseller?._id})`}</Typography>\n                      <Box ml={1}>\n                        {(order?.payments?.resellerPaymentStatus === RS_PAYMENT_STATUS[0] || order?.payments?.resellerPaymentStatus === RS_PAYMENT_STATUS[1] || order?.payments?.resellerPaymentStatus === RS_PAYMENT_STATUS[4]) && (order.status === ORDER_STATUSES[6]) && !rejectedOrderPaymentStatus.includes(order.status) ? (\n                          <Menu\n                            activator={(clickHandler, isOpen) => (\n                              <Box display=\"flex\" onClick={clickHandler} style={{ cursor: \"pointer\" }} tabIndex=\"0\">\n                                <Status status={order.payments.resellerPaymentStatus}\n                                  color={order.payments.resellerPaymentStatus === \"Eligible for Payout\" ? \"secondary\" : \"primary\"} />\n                                <Icon path={isOpen ? Icons.upArrow : Icons.downArrow} />\n                              </Box>\n                            )}\n                            items={updatePaymentActions}\n                            menuProps={{\n                              anchorOrigin: { vertical: \"bottom\", horizontal: \"left\" },\n                              transformOrigin: { vertical: \"top\", horizontal: \"left\" }\n                            }}\n                          />\n                        ) : (\n                          <Status status={order?.payments?.resellerPaymentStatus || \"Not Payable\"}\n                            color={order?.payments?.resellerPaymentStatus === \"Eligible for Payout\" ? \"secondary\" : \"primary\"} />\n                        )}\n                      </Box>\n                    </Box>\n\n                    <ContentCell label=\"Phone\" content={getPhoneString(order.reseller?.phone)} />\n                  </Box>\n                )\n              }\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Section\n              label=\"Supplier Details\"\n              containerProps={{ pt: 0 }}\n              cardContent={\n                order.items[0] && (\n                  <Box pl={1} mt={-1}>\n                    <Typography\n                      variant=\"body1\">{`${order.items[0].product?.supplier?.name} (${order.items[0].product?.supplier?.humanFriendlyId || order.items[0].product?.supplier?._id})`}</Typography>\n                    <ContentCell label=\"Email\" content={order.items[0].product?.supplier?.email} />\n                    {(order?.payments?.supplierPaymentStatus === RS_PAYMENT_STATUS[0] || order?.payments?.supplierPaymentStatus === RS_PAYMENT_STATUS[1] || order?.payments?.supplierPaymentStatus === RS_PAYMENT_STATUS[4]) && (order.status === ORDER_STATUSES[6]) && !rejectedOrderPaymentStatus.includes(order.status) ? (\n                      <Menu\n                        activator={(clickHandler, isOpen) => (\n                          <Box display=\"flex\" onClick={clickHandler} style={{ cursor: \"pointer\" }} tabIndex=\"0\">\n                            <Status status={order.payments.supplierPaymentStatus}\n                              color={order.payments.supplierPaymentStatus === \"Eligible for Payout\" ? \"secondary\" : \"primary\"} />\n                            <Icon path={isOpen ? Icons.upArrow : Icons.downArrow} />\n                          </Box>\n                        )}\n                        items={updatePaymentActions}\n                        menuProps={{\n                          anchorOrigin: { vertical: \"bottom\", horizontal: \"left\" },\n                          transformOrigin: { vertical: \"top\", horizontal: \"left\" }\n                        }}\n                      />\n                    ) : (\n                      <Status status={order?.payments?.supplierPaymentStatus || \"Not Payable\"}\n                        color={order?.payments?.supplierPaymentStatus === \"Eligible for Payout\" ? \"secondary\" : \"primary\"} />\n                    )}\n                  </Box>\n                )\n              }\n            />\n          </Grid>\n          <Grid item xs={8}>\n            <Section\n              label=\"Items\"\n              containerProps={{ pt: 0 }}\n              cardContent={order.items.map(item => {\n                const supplierPrice = item.supplierPrice;\n                const platformMargin =\n                  item.platformMarginType === \"Percentage\"\n                    ? formatCurrency(((item.supplierPrice * item.platformMargin) / 100) * item.quantity)\n                    : formatCurrency(item.platformMargin * item.quantity);\n                const erfaPrice = getErfaPrice(supplierPrice, item.platformMarginType, item.platformMargin);\n                const discount =\n                  item.discountType === \"Percentage\" ? item.discount + \"%\" : formatCurrency(item.discount);\n                const discountedPrice = getDiscountedPrice(\n                  supplierPrice,\n                  item.platformMarginType,\n                  item.platformMargin,\n                  item.discountType,\n                  item.discount\n                );\n                const discountedCouponPrice = getCouponDiscountedPrice(\n                  discountedPrice * item.quantity, order?.coupons\n                )\n\n                return (\n                  <Card key={item._id} style={{ marginRight: 4 }}>\n                    <CardActionArea component={Link} to={`/products/${item.product._id}`}>\n                      <Box style={{ display: \"flex\", alignItems: \"center\" }}>\n                        <CardMedia\n                          image={item.product?.images[0]?.image.thumbnail}\n                          style={{ height: 120, width: 120 }}\n                        />\n                        <CardContent>\n                          <Typography variant=\"body1\" noWrap>\n                            {item.product.name}\n                          </Typography>\n                          <Box display=\"flex\">\n                            <ContentCell label=\"Size\" content={item.size} />\n                            <Box px={2} />\n                            <ContentCell label=\"Quantity\" content={item.quantity} />\n                          </Box>\n                        </CardContent>\n                      </Box>\n                    </CardActionArea>\n                    <CardContent style={{ alignItems: \"flex-start\", display: \"block\" }}>\n                      <ContentCell label=\"Cost Breakup\" inline={false}>\n                        <Box pl={1} pt={1}>\n                          <Table\n                            hideHeader\n                            containerProps={{ style: { width: 360 } }}\n                            getKey={v => v.id}\n                            columns={[\n                              { field: \"label\", label: \"Label\" },\n                              { field: \"operator\", label: \"Op\", props: { width: 12 } },\n                              { field: \"value\", label: \"Value\" }\n                            ]}\n                            rows={[\n                              [\"Quantity\", null, item.quantity],\n                              [\"Supplier Price\", null, formatCurrency(item.supplierPrice)],\n                              [\"Supplier Total\", null, formatCurrency(item.supplierPrice * item.quantity)],\n                              [\"Platform Margin\", null, formatCurrency((discountedPrice * item.quantity) - (item.supplierPrice * item.quantity))],\n                              [\"Order Unit\", null, formatCurrency(discountedPrice)],\n                              [\"Sub total\", null, formatCurrency(discountedPrice * item.quantity)],\n                              [\"Coupon Discount\", null, `- ${formatCurrency(discountedCouponPrice)}`, null],\n                              [\"Shipping Fee\", null, formatCurrency(item.shippingFee)],\n                              [\"Reseller Margin\", null, formatCurrency(item.resellerMargin)],\n                              [\n                                \"Customer Price\",\n                                null,\n                                formatCurrency((discountedPrice * item.quantity) + item.resellerMargin + item.shippingFee - discountedCouponPrice)\n                              ]\n                            ].map((o, idx, arr) => ({\n                              id: o[0],\n                              label: (\n                                <Typography variant={idx === arr.length - 1 ? \"body1\" : \"body2\"} noWrap >\n                                  {(o[0] === \"Coupon Discount\" && order?.coupons) ? <>{o[0]} ({order?.coupons?.couponCode})</> : o[0]}\n                                </Typography>\n                              ),\n                              operator: (\n                                <Typography variant={idx === arr.length - 1 ? \"body1\" : \"body2\"} noWrap>\n                                  {o[1]}\n                                </Typography>\n                              ),\n                              value: (\n                                <Typography variant={idx === arr.length - 1 ? \"body1\" : \"body2\"} noWrap>\n                                  {o[2]}\n                                </Typography>\n                              )\n                            }))}\n                            size=\"small\"\n                          />\n                        </Box>\n                      </ContentCell>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            />\n          </Grid>\n\n          <Grid item xs={4}>\n            <Section\n              label=\"Order Actions\"\n              containerProps={{ pt: 0 }}\n              cardContent={\n                order.actions && order.actions.length ? (\n                  order.actions.map(a => (\n                    <Card key={a._id} style={{ marginBottom: 8 }}>\n                      <CardContent>\n                        <Typography variant=\"body1\">\n                          Status updated to `{a.status}` by {a.updatedBy} at{\" \"}\n                          {format(new Date(a.updatedAt), \"hh:mma MMM do, yyyy\")}\n                          {a.remark && ` with remark \"${a.remark}\"`}\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <Typography variant=\"body1\">No actions yet.</Typography>\n                )\n              }\n            />\n\n            <Box pt={1} />\n\n            <Section\n              label=\"Order Notes\"\n              containerProps={{ pt: 0 }}\n              cardContent={\n                order.notes && order.notes.length ? (\n                  order.notes.map(a => (\n                    <Card key={a._id} style={{ marginBottom: 8, cursor: \"pointer\" }}\n                      onClick={() => prompt(\"Update Note\", `${a._id}`, {\n                        formConfig: updateOrderNotesForm,\n                        incomingValue: a,\n                        submitHandler: val => _updateOrder({ noteId: a._id, ...val })\n                      })}>\n                      <CardContent>\n                        <Box mb={1}>\n                          <Typography variant=\"caption\">\n                            {a.updatedBy} @{format(new Date(a.updatedAt), \"hh:mma MMM do, yyyy\")}\n                          </Typography>\n                        </Box>\n                        <Box style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                          <Typography variant=\"body1\">\n                            <Icon path={Icons.quote} size={0.8} />\n                            {a.message}\n                          </Typography>\n                          <Icon style={{ cursor: \"pointer\" }} path={Icons.edit} size={0.8} />\n                        </Box>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <Typography variant=\"body1\">No order note yet.</Typography>\n                )\n              }\n              rightComponent={\n                <FormDialog\n                  title=\"Add Note\"\n                  buttonProps={{ icon: Icons.add }}\n                  formProps={{\n                    formConfig: updateOrderNotesForm,\n                    submitHandler: val => _updateOrder(val)\n                  }}\n                />\n              }\n            />\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n\nexport default Order;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Advertisements.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Superusers.js",["535","536","537","538","539","540","541","542","543"],"import React, { useEffect, useState } from 'react'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { toast } from 'react-toastify'\nimport { Box, Grid, Typography } from '@material-ui/core'\n\nimport Icons from '../constants/icons'\nimport addSuperuser from '../constants/forms/add-superuser'\nimport { resetPassword as resetPasswordForm } from '../constants/forms'\nimport { createSuperuser, updateSuperuser, resetPassword } from '../services/api'\nimport usePageData from '../services/PageData'\n\nimport { FormDialog } from '../components/Form'\nimport { Button, Loader, SectionHeader, StatCard } from '../components'\nimport { SuperuserInfo } from '../components/entitywise/Superuser'\nimport { getSuperuserStatusToBeUpdated, SUPERUSER_STATUS_CHANGE_BUTTON_TEXTS } from '../constants'\nimport { logout } from '../store/reducers/auth'\nimport { useDispatch } from 'react-redux'\n\nconst addSuperuserForm = cloneDeep(addSuperuser)\nconst updateSuperuserForm = cloneDeep(addSuperuser)\nconst resetPasswordFormConfig = cloneDeep(resetPasswordForm)\n\nfunction Superusers() {\n  const { superusers, totalItems, containerRef, Pagination, refresh } = usePageData('superusers')\n  const [users, setUsers] = useState([])\n  // const dispatch = useDispatch()\n  // const _createSuperuser = async values => {\n  //   await createSuperuser(values).then(resp => refresh())\n  //   toast.success('Superuser added successfully.')\n  // }\n\n  // const _updateSuperuser = async (_id, values) => {\n  //   await updateSuperuser(_id, values).then(resp => refresh())\n  //   let currentUser = JSON.parse(localStorage.getItem('user'))\n  //   if(values.status === 'Blocked' && currentUser._id === _id)\n  //     dispatch(logout())\n  //   toast.success('Superuser updated successfully.')\n  // }\n  useEffect(() => {\n    getUsers()\n  }, [])\n  const getUsers = async () => {\n    try {\n      \n    } catch (error) {}\n  }\n  return (\n    <Box ref={containerRef}>\n      {!superusers ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of Superusers\" count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.superuser}\n              label=\"Superusers\"\n              rightComponent={\n                <FormDialog\n                  title=\"Add Superuser\"\n                  // formProps={{\n                  //   formConfig: addSuperuserForm,\n                  //   submitHandler: _createSuperuser,\n                  // }}\n                />\n              }\n            />\n            <Box mb={2} />\n\n            {superusers.length ? (\n              superusers.map(s => (\n                <Box key={s._id} mb={1.5}>\n                  <SuperuserInfo\n                    superuser={s}\n                    actions={\n                      <FormDialog\n                        title=\"Update Superuser\"\n                        buttonProps={{ icon: Icons.edit }}\n                        formProps={{\n                          formConfig: updateSuperuserForm,\n                          // submitHandler: val => _updateSuperuser(s._id, val),\n                          incomingValue: s,\n                          renderPosition: 'ACTION_BUTTON_AREA',\n                          render: () => (\n                            <Box display=\"flex\">\n                              <Box mr={1}>\n                                <Button\n                                  variant=\"outlined\"\n                                  size=\"small\"\n                                  // onClick={() =>\n                                  //   _updateSuperuser(s._id, {\n                                  //     status: getSuperuserStatusToBeUpdated(s.status),\n                                  //   })\n                                  // }\n                                  color={{ Block: 'warning' }[SUPERUSER_STATUS_CHANGE_BUTTON_TEXTS[s.status]]}\n                                  style={{ marginRight: 8 }}\n                                  text={SUPERUSER_STATUS_CHANGE_BUTTON_TEXTS[s.status]}\n                                />\n                              </Box>\n\n                              <ResetPasswordButton email={s.email} />\n                            </Box>\n                          ),\n                        }}\n                      />\n                    }\n                  />\n                </Box>\n              ))\n            ) : (\n              <Box mt={4}>\n                <Typography variant=\"body2\">No superusers in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  )\n}\n\nexport default Superusers\n\nconst ResetPasswordButton = ({ email }) => {\n  const handleResetPassword = async ({ password }) => {\n    const response = await resetPassword({ email, password, isSuperAdmin: true })\n    if (response) toast.success(response)\n  }\n\n  return (\n    <FormDialog\n      title=\"Update Password\"\n      formProps={{\n        formConfig: resetPasswordFormConfig,\n        submitHandler: handleResetPassword,\n        uiProps: { ctaAreaBoxProps: { pt: 2 }, showRootError: true },\n      }}\n      buttonProps={{\n        startIcon: Icons.edit,\n      }}\n    />\n  )\n}\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Products.js",["544","545","546","547","548","549"],"import React, { useCallback, useEffect, useState } from 'react'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { toast } from 'react-toastify'\nimport { Box, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography } from '@material-ui/core'\nimport debounce from 'lodash/debounce'\nimport Icons from '../constants/icons'\nimport addProduct from '../constants/forms/add-product'\nimport { createProduct, get, updateProduct } from '../services/api'\nimport usePageData from '../services/PageData'\n\nimport { FormDialog } from '../components/Form'\nimport { Avatar, Button, Icon, Loader, SectionHeader, StatCard, Status, ToggleButtons } from '../components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { toggleProcessIndicator } from '../store/reducers/app'\nimport { Table } from '../components/Table'\nimport { Link } from 'react-router-dom'\nimport { format } from 'date-fns'\nimport { getDiscountedPrice, getErfaPrice, downloadPDFBlob } from '../utils'\n\n\nconst addProductForm = cloneDeep(addProduct)\nconst updateProductForm = cloneDeep(addProduct)\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '22ch',\n    },\n    '& .MuiTextField-root:first-child': {\n      marginLeft: theme.spacing(0),\n    },\n  },\n}))\n\nfunction Products() {\n  const classes = useStyles()\n  const state = useSelector(state => state)\n  const [suppliers, setSuppliers] = useState(null)\n  const [status, setStatus] = useState('Active')\n  const [stock, setStock] = useState(null)\n  const [startDateValue,setStartDateValue] = useState(null)\n  const [endDateValue,setEndDateValue] = useState(null)\n  const [forObjChange, setforObjChange] = useState(false)\n  const [selectedCategory, setselectedCategory] = useState(null)\n  const [selectedSubCategory, setselectedSubCategory] = useState(null)\n  const [selectedsubSubcategory, setselectedsubSubcategory ] = useState(null)\n  const [filteredSupplier, setfilteredSupplier] = useState()\n  const { settings } = state\n  const [categories, setCategories] = useState([])\n  const [subcategories, setSubcategories] = useState([])\n  const subSubcategories = state['sub-subcategories']\n  const dispatch = useDispatch()\n  const [dateRate, setDateRange] = useState({ startDate: null, endDate: null })\n  const [supplierQuery, setSupplierQuery] = useState('')\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    async function getCategoriesData() {\n      try {\n        const [categories, subcategories] = await Promise.all([get.categories(), get.subcategories()])\n        setCategories(categories);\n        setSubcategories(subcategories);\n        dispatch(toggleProcessIndicator(false));\n      } catch(e) {\n        dispatch(toggleProcessIndicator(false));\n      }\n    }\n    getCategoriesData()\n  }, [])\n  \n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true))\n    Promise.all([get.allSuppliers({ params: { status: \"Active\" } })])\n      .then(resp => {\n        setSuppliers(resp[0])\n      })\n      .catch(console.log)\n      .finally(() => dispatch(toggleProcessIndicator(false)))\n  }, [dispatch])\n\n  useEffect(() => {\n    if (categories && categories.length) {\n      // const categoryOptions = categories.filter(c=>c.status==='Active').map(c => ({ label: c.name, value: c._id }))\n      const categoryOptions = categories.map(c => ({ label: c.name, value: c._id }))\n      addProductForm.category.options = categoryOptions\n      updateProductForm.category.options = categoryOptions\n    }\n\n    if (subcategories && subcategories.length) {\n      // const subcategoryOptions = subcategories.filter(c=>c.status==='Active').map(c => ({\n      const subcategoryOptions = subcategories.map(c => ({\n        label: c.name,\n        value: c._id,\n        category: c.category,\n      }))\n      addProductForm.subcategory.options = (path, { getValueAtPath }) =>\n        subcategoryOptions.filter(c => c.category === getValueAtPath(['category']))\n      updateProductForm.subcategory.options = (path, { getValueAtPath }) =>\n        subcategoryOptions.filter(c => c.category === getValueAtPath(['category']))\n    }\n\n    if (subSubcategories && subSubcategories.length) {\n      // const subSubcategoryOptions = subSubcategories.filter(c=>c.status==='Active').map(c => ({\n      const subSubcategoryOptions = subSubcategories.map(c => ({\n        label: c.name,\n        value: c._id,\n        subcategory: c.subcategory,\n      }))\n      addProductForm.subSubcategory.options = (path, { getValueAtPath }) =>\n        subSubcategoryOptions.filter(c => c.subcategory === getValueAtPath(['subcategory']))\n      updateProductForm.subSubcategory.options = (path, { getValueAtPath }) =>\n        subSubcategoryOptions.filter(c => c.subcategory === getValueAtPath(['subcategory']))\n    }\n\n    if (suppliers && suppliers.length) {\n      const supplierOptions = suppliers.filter(c=>c.status==='Active').map(s => ({ label: s.name, value: s._id }))\n      addProductForm.supplier.options = supplierOptions\n      updateProductForm.supplier.options = supplierOptions\n    }\n  }, [categories, subcategories, subSubcategories, suppliers])\n\n  const pageData = usePageData('products', { filters: { status: status, stock: stock } })\n  const [suppliersIds, setSuppliersIds] = useState([])\n  const { products, totalItems, containerRef, Pagination, refresh } = pageData\n  const { filters, filter, permissions } = pageData\n\n  const [productQuery, setProductQuery] = useState(null)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const searchProduct = useCallback(\n    debounce(q => {\n      if (q !== productQuery) {\n        filter(f => ({ ...f, query: q }))\n      }\n    }, 1250),\n    [filter],\n  )\n\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterBySupplier = useCallback(\n    debounce(q => {\n      console.log({q, suppliersIds})\n      if ((q || []).join('') !== (suppliersIds || []).join('')) {\n        setSuppliersIds(q)\n        filter(f => ({ ...f, supplier: q }))\n      }\n    }, 1250),\n    [filter],\n  )\n\n  const handleSearchQuery = () =>{ \n    filter(f => ({ ...f, query: productQuery, supplier: filteredSupplier, status: status, stock:stock, category: selectedCategory, subcategory : selectedSubCategory, subSubcategory: selectedsubSubcategory,\n      startDate: dateRate.startDate  , endDate:dateRate.endDate,\n    }))\n\n  }\n\n  const resetFilters = async() => {\n    if(filters.query || filters.category || filters.subcategory || filters.subSubcategory || filters.supplier || filters.startDate || filters.endDate || filters.stock || filters.status != 'Active' ){\n      filter({})\n      }\n    setProductQuery('')\n    setselectedCategory(null)\n    setselectedSubCategory(null)\n    setselectedsubSubcategory(null)\n    setfilteredSupplier(null)\n    setStartDateValue(null)\n    setEndDateValue(null)\n    setStatus('Active')\n    setStock(null)\n    setSupplierQuery('')\n    setDateRange({ startDate:null, endDate: null })\n   \n  }\n\n  const _createProduct = async ({ erfaPrice, discountedPrice, ...values }) => {\n    await createProduct(values).then(resp => refresh())\n    toast.success('Product added successfully.')\n  }\n\n  const _updateProduct = async (_id, { erfaPrice, discountedPrice, ...values }) => {\n    values['discountedPrice'] = discountedPrice;\n    if (!values.eligibleForFreeShipping)\n      values.eligibleForFreeShipping = false\n    await updateProduct(_id, values).then(resp => refresh()).catch(e => toast.error(e.message))\n    toast.success('Product updated successfully.')\n  }\n\n  const getSupplier = (supplier) => {\n    return suppliers && suppliers.filter(_s => _s._id === supplier)[0]\n  }\n\n  const getCategory = (category) => {\n    return categories && categories.filter(_s => _s._id === category)[0]\n  }\n\n  const getSubCategory = (subcategory) => {\n    return subcategories && subcategories.filter(_s => _s._id === subcategory)[0]\n  }\n\n  const getSubSubCategory = (subSubcategory) => {\n    return subSubcategories && subSubcategories.filter(_s => _s._id === subSubcategory)[0]\n  }\n\n  const parseProduct = (product) => {\n    const { supplierPrice, platformMarginType, platformMargin, discountType, discount } = product\n    return {\n      ...product,\n      erfaPrice: getErfaPrice(supplierPrice, platformMarginType, platformMargin),\n      discountedPrice: getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, discountType, discount),\n    }\n  }\n\n  const downloadPdf = async () => {\n    const res = await get[\"products\"]({ params: {...filters, pdf: true}}, {responseType: 'blob'})\n    downloadPDFBlob(res)\n  }\n\n  return (\n    <Box ref={containerRef}>\n      {!products ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label='# of Products' count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.products}\n              label='Products'\n              rightComponent={\n                (<>\n                <Button variant='outlined' size='small' color=\"primary\" style={{marginRight: '20px'}} onClick={downloadPdf} text='Download PDF' />\n                {permissions.CREATE && <FormDialog\n                    title='Add Product'\n                    formProps={{\n                      formConfig: addProductForm,\n                      submitHandler: _createProduct,\n                      incomingValue: {\n                        platformMarginType: settings.platformMarginType,\n                        platformMargin: settings.platformMargin,\n                      },\n                    }}\n                  />}\n                </>)\n              }\n            />\n\n            <Box display='flex' alignItems='flex-end' my={2} className={classes.root}>\n              <Box mr={4} mb={-0.5} width=\"40%\">\n                <TextField\n                  label='Search'\n                  placeholder='code, name, sku'\n                  variant='outlined'\n                  value={productQuery}\n                  style={{width: '35%'}}\n                  onChange={e => {\n                    setProductQuery(e.target.value)\n                  //  searchProduct(e.target.value)\n                  \n                  }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position='start'>\n                        <Icon color='primary' path={Icons.search} />\n                      </InputAdornment>\n                    ),\n                  }}\n                  size='small'\n                />\n                <TextField\n                  variant='outlined'\n                  placeholder={`Supplier Name`}\n                  value={supplierQuery}\n                  style={{width: '30%'}}\n                  onChange={e => {\n                    let _selectedSupplier = e.target.value\n                    if (_selectedSupplier === '') {\n                      setSupplierQuery('')\n                      return\n                    }\n                    let _suppliers = suppliers.filter(s => s.name.toLowerCase().includes(_selectedSupplier)).map(s => s._id)\n                    setSupplierQuery(_selectedSupplier)\n                    setfilteredSupplier(_suppliers)  \n                  }}\n                  size='small'\n                />\n              </Box>\n              <Box mr={2} mb={1}>\n                <Icon color='primary' path={Icons.filter} />\n              </Box>\n              <Box mr={1} mb={1}>\n                <ToggleButtons\n                  options={[\n                    { label: 'All', value: null },\n                    { label: 'Active', value: 'Active' },\n                    { label: 'Hidden', value: 'Hidden' },\n                    { label: 'Pending Approval', value: 'Pending Approval' },\n                  ]}\n                  value={status}\n                  onChange={v => setStatus(v) & filter(f => ({ ...f, status: v }))}\n                />\n              </Box>\n              <Box mr={1} mb={1}>\n                <ToggleButtons\n                  options={[\n                    { label: 'All', value: null },\n                    { label: 'In-Stock', value: 'inStock' },\n                    { label: 'Out of Stock', value: 'outStock' },\n                  ]}\n                  value={stock}\n                  onChange={v => setStock(v) & filter(f => ({ ...f, stock: v }))}\n                />\n              </Box>\n            </Box>\n            <Box display='flex' alignItems='flex-end' my={2} className={classes.root}>\n              <Box mr={1} mb={-0.5}>\n                <TextField\n                  style={{width:\"20ch\"}}\n                  size='small'\n                  label='Category'\n                  value={selectedCategory || ''}\n                  onChange={e => setselectedCategory(e.target.value)}\n                  select>\n                  {(filters.status ? categories.filter(e => e.status === filters.status) : categories).map(option => (\n                    <MenuItem key={option._id} value={option._id}>\n                      {option.name}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <TextField\n                  size='small'\n                  label='Subcategory'\n                  value={selectedSubCategory || ''}\n                  onChange={e => setselectedSubCategory(e.target.value)}\n                  disabled={\n                    !filters.category || !subcategories.filter(i => ((i.category === filters.category) && (!filters.status || i.status === filters.status))).length\n                  }\n                  select>\n                  {subcategories\n                    .filter(i => ((i.category === filters.category) && (!filters.status || i.status === filters.status)))\n                    .map(option => (\n                      <MenuItem key={option._id} value={option._id}>\n                        {option.name}\n                      </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                  size='small'\n                  label='Sub-Subcategory'\n                  value={selectedsubSubcategory || ''}\n                  onChange={e => setselectedsubSubcategory(e.target.value)}\n                  disabled={\n                    !filters.subcategory ||\n                    !subSubcategories.filter(i => ((i.subcategory === filters.subcategory) && (!filters.status || i.status === filters.status))).length\n                  }\n                  select>\n                  {subSubcategories\n                    .filter(i => ((i.subcategory === filters.subcategory) && (!filters.status || i.status === filters.status)))\n                    .map(option => (\n                      <MenuItem key={option._id} value={option._id}>\n                        {option.name}\n                      </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                  id='start_date'\n                  label='Select Start Date'\n                  type='date'\n                  value={startDateValue}\n                  onChange={e => {\n                    setDateRange({ ...dateRate, startDate: new Date(e.target.value).toISOString() })\n                    setStartDateValue(e.target.value)\n                  }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n                <TextField\n                  id='end_date'\n                  label='Select End Date'\n                  type='date'\n                  onChange={e => {\n                    let value = e.target.value\n                    if (new Date(dateRate.startDate) > new Date(value)) {\n                      toast.error('End Date cannot be greater than start date')\n                      return\n                    }\n                    let ed = new Date(value)\n                    ed.setHours(23, 0, 0, 0)\n                    setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() })\n                    setEndDateValue(e.target.value)\n                  }}\n                  value={endDateValue}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Box>\n              <Box flexGrow={1} />\n                <Box mb={1}>\n                  <Button variant='text' size='small' onClick={handleSearchQuery} text='Search' />\n                </Box>\n                <Box mb={1}>\n                  <Button variant='text' size='small' onClick={resetFilters} text='Reset' />\n                </Box>\n            </Box>\n\n            {products.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => v.key + Date.now().toString()}\n                  columns={[\n                    { field: 'avatar', label: 'Avatar' },\n                    { field: 'sku', label: 'SKU' },\n                    { field: 'name', label: 'Name' },\n                    { field: 'supplier', label: 'Supplier' },\n                    { field: 'category', label: 'Category' },\n                    { field: 'size', label: 'Stocks' },\n                    { field: 'status', label: 'Status' },\n                    { field: 'created', label: 'Created At' },\n                    { field: 'actions', label: '', props: { width: 48 } },\n                  ]}\n                  rows={[\n                    ...products.map(o => ({\n                      avatar: (\n                        <Box>\n                          {o.images.slice(0, 1).map((i, idx) => (\n                            <Avatar\n                              key={'image' + idx}\n                              className={classes.image}\n                              size={100}\n                              text={o.name}\n                              src={i.image?.thumbnail}\n                              variant='rounded'\n                              style={{ margin: -8, marginLeft: idx ? -104 : -8 }}\n                            />\n                          ))}\n                        </Box>\n                      ),\n                      sku: o.SKU,\n                      key: o._id,\n                      name: (\n                        <Box>\n                          <Typography variant='body2' noWrap>\n                            {o.name}\n                          </Typography>\n                        </Box>\n                      ),\n                      supplier: (\n                        <Box>\n                          {getSupplier(o.supplier)?.name}\n                          <Typography display='flex' variant='body2'>{getSupplier(o.supplier)?.email}</Typography>\n                        </Box>\n                      ),\n                      category: (\n                        <Box>\n                          {[getCategory(o.category)?.name, getSubCategory(o.subcategory)?.name, getSubSubCategory(o.subSubcategory)?.name]\n                            .filter(Boolean)\n                            .join(' > ')}\n                        </Box>\n                      ),\n                      size: o.stocks,\n                      created: format(new Date(o.createdAt), 'MMM do, yyyy'),\n                      status: <Status status={o.status} />,\n                      actions: <Box display='flex'>\n                        {permissions.UPDATE && (\n                          <FormDialog\n                            title='Update Product'\n                            buttonProps={{ icon: Icons.edit }}\n                            formProps={{\n                              formConfig: updateProductForm,\n                              submitHandler: val => _updateProduct(o._id, val),\n                              incomingValue: parseProduct(o),\n                            }}\n                          />\n                        )\n                        }\n                        <Button component={Link} to={`/products/` + o._id} icon={Icons.send} />\n                      </Box>,\n                    })),\n                  ]}\n                />\n              </Box>\n            ) : (\n              <Box mt={4}>\n                <Typography variant='body2'>No products in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  )\n}\n\nexport default Products\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Product.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Settings.js",["550"],"import React from 'react'\nimport { cloneDeep } from 'lodash'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Box } from '@material-ui/core'\n\nimport Icons from '../constants/icons'\nimport tables from '../constants/tables'\nimport updateSettings from '../constants/forms/update-settings'\nimport { TableSection } from '../components/Table'\nimport { FormDialog } from '../components/Form'\nimport { ContentCell, Loader, SectionHeader } from '../components'\nimport { updateSettings as updateSettingsAPI } from '../services/api'\nimport { updateObject } from '../store/reducers/objectReducers'\nimport { formatCurrency } from '../utils'\n\nconst shippingDetailsTable = cloneDeep(tables['shippingDetails'])\nconst updateSettingsForm = cloneDeep(updateSettings)\n\nfunction Settings() {\n  const settings = useSelector(state => state.settings)\n  const dispatch = useDispatch()\n\n  if (!settings) return <Loader absolute />\n  return (\n    <>\n      <SectionHeader\n        icon={Icons.settings}\n        label=\"Settings\"\n        rightComponent={\n          <FormDialog\n            title=\"Update Settings\"\n            buttonProps={{ icon: Icons.edit }}\n            formProps={{\n              formConfig: updateSettingsForm,\n              submitHandler: val =>\n                updateSettingsAPI({\n                  ...val,\n                  shippingDetails: val.shippingDetails.map(f => ({...f, source: f.source.trim(), destination: f.destination.trim()}))\n                })\n                  .then(resp => dispatch(updateObject('settings', resp)))\n                  .catch(e => console.log(e)),\n              incomingValue: settings,\n            }}\n          />\n        }\n      />\n\n      <Box mt={3} mb={2}>\n        {/*{!!settings.platformMargin && (\n          <ContentCell\n            label=\"Platform Margin\"\n            content={\n              settings.platformMarginType === 'Percentage'\n                ? settings.platformMargin + '%'\n                : formatCurrency(settings.platformMargin)\n            }\n          />\n        )}*/}\n        {!!settings.returnHoldPeriod && (\n          <ContentCell label=\"Return hold period (days)\" content={settings.returnHoldPeriod + ' days'} />\n        )}\n      </Box>\n\n      <TableSection\n        icon={shippingDetailsTable.icon}\n        label={shippingDetailsTable.label}\n        getKey={row => row._id}\n        columns={shippingDetailsTable.columns}\n        rows={settings.shippingDetails}\n      />\n\n      <Box mt={4}>\n        {!!settings.minimumRequiredAppVersions && (\n          <ContentCell\n            label=\"Minimum required app versions\"\n            inline={false}\n            content={\n              <Box display=\"flex\" pl={1} pt={1}>\n                <ContentCell label=\"Android\" content={settings.minimumRequiredAppVersions.android} />\n                <Box px={4} />\n                <ContentCell label=\"iOS\" content={settings.minimumRequiredAppVersions.iOS} />\n              </Box>\n            }\n          />\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default Settings\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/SuppliersPayments.js",["551","552","553"],"import React, { useCallback, useState, useEffect } from \"react\";\nimport { Box, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport Icons from \"../constants/icons\";\nimport usePageData from \"../services/PageData\";\nimport { get } from \"../services/api\";\nimport { Table } from \"../components/Table\";\nimport { Button, Icon, Loader, SectionHeader, StatCard, Status } from \"../components\";\nimport { formatCurrency } from \"../utils\";\nimport { Link } from \"react-router-dom\";\nimport { RS_PAYMENT_MODE, RS_PAYMENT_STATUS } from \"../constants\";\nimport { toast } from \"react-toastify\";\nimport debounce from \"lodash/debounce\";\nimport format from \"date-fns/format\";\nimport CsvDownload from \"react-json-to-csv\";\nimport { v4 as uuidv4 } from 'uuid'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\n\nfunction SuppliersPayments() {\n  const classes = useStyles();\n  const {\n    supplierPayment: suppliers,\n    totalItems,\n    containerRef,\n    Pagination,\n    filters,\n    filter\n  } = usePageData(\"supplierPayment\", { filters: { status: null } });\n  const [humanFriendlyIdQuery, setHumanFriendlyIdQuery] = useState(filters.supplier || \"\");\n  const [lastQuery, setLastQuery] = useState(filters.reseller || \"\")\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByHumanFriendlyId = useCallback(\n    debounce(q => {\n      if (q !== lastQuery) {\n        setLastQuery(q)\n        filter(f => ({ ...f, supplier: q }))\n      }\n    }, 1250),\n    [filter]\n  );\n\n  const [transactionIdQuery, setTransactionIdQuery] = useState(\"\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByTransactionId = useCallback(\n    debounce(q => filter(f => ({ ...f, transactionId: q })), 1250),\n    [filter]\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const filterByPriceRange = useCallback(\n    debounce(q => filter(f => ({ ...f, minPrice: q[0], maxPrice: q[1] })), 1250),\n    [filter]\n  );\n  const [priceRangeQuery, setPriceRangeQuery] = useState([-1, -1]);\n\n  const [minOrderPrice, setMinOrderPrice] = useState(\"\");\n  const [maxOrderPrice, setMaxOrderPrice] = useState(\"\");\n  const [dateRate, setDateRange] = useState({ startDate:null, endDate: null });\n  const [downloadableData, setDownloadableData] = useState([])\n  const clearFilters = () => {\n    setHumanFriendlyIdQuery(\"\");\n    setTransactionIdQuery(\"\");\n    setMaxOrderPrice(\"\");\n    setMinOrderPrice(\"\");\n    filter({});\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n  };\n\n  function getPhoneNumber({countryCode, areaCode, number}) {\n    return `${countryCode || ''}${areaCode || ''}${number || ''}`\n  }\n\n  async function getDownloadableData(params) {\n    const suppliers = await get['supplierPayment']({ params })\n    let data = suppliers.data.map(r => ({\n      \"Supplier Id\": r.suppliers.humanFriendlyId || r.suppliers._id,\n      \"Supplier Name\": `${r.suppliers.name}`,\n      \"Phone\": r.suppliers?.contactPerson?.phone ? getPhoneNumber(r.suppliers.contactPerson.phone) : 'N/A',\n      \"Payment Status\": r._id.supplierPaymentStatus,\n      \"Total Amount\": r.totalAmount,\n      \"Orders\": r.payments.map(p => p.orderId).join(\", \"),\n      \"Payment Mode\": r.payments[0].supplierPaymentMode,\n      \"Notes\": r.payments[0].supplierPaymentNotes,\n      \"Transaction Date\": r.payments[0].supplierTransactionDate,\n      \"Transaction Id\": r.payments[0].supplierPaymentStatus,\n      \"Beneficiary Name\": r.payments[0]?.supplierBankDetails?.beneficiaryName || '',\n      \"Bank Name\": r.payments[0]?.supplierBankDetails?.bankName || '',\n      \"IBAN\": r.payments[0]?.supplierBankDetails?.iban || '',\n      \"Last updated by\": r.supplierUpdatedByData && r.supplierUpdatedByData.firstName? `${r.supplierUpdatedByData.firstName} ${r.supplierUpdatedByData.lastName || ''}`:''\n    }));\n    setDownloadableData(data)\n  }\n\n  useEffect(() => {\n    getDownloadableData({ getAll: true })\n  }, [])\n\n  useDeepCompareEffect(() => {\n    getDownloadableData({ ...filters, getAll: true })\n  }, [filters])\n \n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, startDate: new Date(value).toISOString() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      filter(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  return (\n    <Box ref={containerRef}>\n      {!suppliers ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of suppliers\" count={totalItems} />\n            </Grid>\n          </Grid>\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.orders}\n              label=\"Supplier Payments\"\n              rightComponent={\n                <>\n                  {\n                    suppliers.length ?\n                      <CsvDownload data={downloadableData}\n                                   filename={`supplierPayments.${format(new Date(), \"MMM-do-yyyy\")}.csv`}\n                                   style={{\n                                     background: \"#738C4A\",\n                                     color: \"#fff\",\n                                     padding: \"6px  16px\",\n                                     fontWeight: 500,\n                                     lineHeight: 1.75,\n                                     border: 0,\n                                     borderRadius: \"4px\",\n                                     cursor: \"pointer\"\n                                   }}>\n                        Download Report\n                      </CsvDownload> : <></>\n                  }\n                </>\n              }\n            />\n          </Box>\n          <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n            <Box mr={2} mb={1}>\n              <Icon color=\"primary\" path={Icons.filter} />\n            </Box>\n            <Box mr={4} mb={-0.5}>\n              <TextField\n                label=\"Search\"\n                placeholder=\"code,name\"\n                variant=\"outlined\"\n                value={humanFriendlyIdQuery}\n                onChange={e => {\n                  setHumanFriendlyIdQuery(e.target.value);\n                  filterByHumanFriendlyId(e.target.value);\n                }}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Icon color=\"primary\" path={Icons.search} />\n                    </InputAdornment>\n                  )\n                }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"Payment Status\"\n                size=\"small\"\n                variant=\"outlined\"\n                placeholder=\"payment status\"\n                value={filters.supplierPaymentStatus || \"\"}\n                onChange={e => filter(filters => ({ ...filters, \"supplierPaymentStatus\": e.target.value }))}\n                select>\n                {RS_PAYMENT_STATUS.map(option => (\n                  <MenuItem key={option} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                label=\"Payment Mode\"\n                size=\"small\"\n                variant=\"outlined\"\n                placeholder=\"payment mode\"\n                disabled={filters.supplierPaymentInfoStatus && filters.supplierPaymentInfoStatus !== \"Paid\"}\n                value={filters.supplierPaymentMode || \"\"}\n                onChange={e => filter(filters => ({ ...filters, \"supplierPaymentMode\": e.target.value }))}\n                select>\n                {[\n                  { label: \"Cash\", value: \"cash\" },\n                  { label: \"Card\", value: \"card\" },\n                  { label: \"Bank\", value: \"bank\" },\n                  { label: \"Wallet\", value: \"wallet\" },\n                  { label: \"ATM\", value: \"atm\" }\n                ].map(option => (\n                  <MenuItem key={option.label} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                label=\"Search\"\n                placeholder=\"Transaction Id\"\n                variant=\"outlined\"\n                value={transactionIdQuery}\n                onChange={e => {\n                  setTransactionIdQuery(e.target.value);\n                  filterByTransactionId(e.target.value);\n                }}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Icon color=\"primary\" path={Icons.search} />\n                    </InputAdornment>\n                  )\n                }}\n                size=\"small\"\n              />\n              <TextField\n                id=\"startDate\"\n                label=\"Select Start Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={startDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                id=\"endDate\"\n                label=\"Select End Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={endDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                placeholder={`Min price`}\n                value={minOrderPrice}\n                onChange={(e) => {\n                  setMinOrderPrice(Number(e.target.value));\n                }}\n                size=\"small\"\n              />\n              &nbsp;\n              <TextField\n                variant=\"outlined\"\n                placeholder={`Max price`}\n                value={maxOrderPrice}\n                onChange={(e) => {\n                  setMaxOrderPrice(Number(e.target.value));\n                }}\n                size=\"small\"\n              />\n              &nbsp;\n              <Button text={\"Go\"} onClick={() => {\n                if (maxOrderPrice && minOrderPrice > maxOrderPrice) {\n                  toast.error(\"Max price cannot be greater than minimum price\");\n                  return;\n                }\n                setPriceRangeQuery([minOrderPrice, maxOrderPrice]);\n                filterByPriceRange([minOrderPrice, maxOrderPrice]);\n              }} />\n            </Box>\n          </Box>\n\n\n          {!!Object.values(filters).filter(Boolean).length && (\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"warning\"\n              onClick={clearFilters}\n              text=\"Clear Filters\"\n              style={{ marginLeft: 12 }}\n            />\n          )}\n          <Box mt={5}>\n\n            {suppliers.length ? (\n              <Box mb={2}>\n                <Table\n                  getKey={v => uuidv4()}\n                  columns={[\n                    { field: \"supplierId\", label: \"supplier Id\" },\n                    { field: \"supplierName\", label: \"supplier Name\" },\n                    { field: \"supplierPhone\", label: \"Phone\" },\n                    { field: \"total\", label: \"Total Amount\" },\n                    { field: \"supplierPaymentStatus\", label: \"Payment status\" },\n                    { field: \"transactionMode\", label: \"Payment Mode\" },\n                    { field: \"transactionId\", label: \"Transaction Id\" },\n                    { field: \"transactionDate\", label: \"Transaction Date\" },\n                    { field: \"updatedBy\", label: \"Updated By\" },\n                    { field: \"actions\", label: \"\" }\n                  ]}\n                  rows={[\n                    ...suppliers.map(o => ({\n                      supplierId: o.suppliers?.humanFriendlyId || o.suppliers?._id,\n                      supplierName: `${o.suppliers?.name}`,\n                      supplierPhone: o.suppliers?.contactPerson?.phone ? getPhoneNumber(o.suppliers.contactPerson.phone) : 'N/A',\n                      total: formatCurrency(o.totalAmount),\n                      transactionId: o._id.supplierTransactionId || \"-\",\n                      transactionMode: o?.payments[0].supplierPaymentMode ? RS_PAYMENT_MODE.find(rp => rp.value === o?.payments[0].supplierPaymentMode).label : \"-\",\n                      transactionDate: o?.payments[0].supplierTransactionDate ? format(new Date(o?.payments[0].supplierTransactionDate), \"MMM do, yyyy\") : \"-\",\n                      status: o._id.supplierPaymentStatus,\n                      updatedBy: `${o.supplierUpdatedByData && o.supplierUpdatedByData.firstName? `${o.supplierUpdatedByData.firstName} ${o.supplierUpdatedByData.lastName || ''}`:'-'}`,\n                      actions: <Button component={Link}\n                                       to={`/supplier-payments/${o._id.supplierId}/${o._id.supplierPaymentStatus}${o?._id?.supplierTransactionDate ? `/${o._id.supplierTransactionDate}` : \"\"}`}\n                                       icon={Icons.send} />,\n                      supplierPaymentStatus: <Status status={o._id.supplierPaymentStatus}\n                                                     color={o._id.supplierPaymentStatus === RS_PAYMENT_STATUS[1] ? \"secondary\" : \"primary\"} />\n                    }))\n                  ]}\n                />\n              </Box>\n            ) : (\n              <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n                <Typography variant=\"body2\">No suppliers in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default SuppliersPayments;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Collections.js",["554","555"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport * as Yup from \"yup\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport debounce from \"lodash/debounce\";\nimport { toast } from \"react-toastify\";\nimport { Box, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography } from \"@material-ui/core\";\n\nimport Icons from \"../constants/icons\";\nimport addCollection from \"../constants/forms/add-collection\";\nimport { createCollection, get, updateCollection } from \"../services/api\";\nimport usePageData from \"../services/PageData\";\n\nimport { FormDialog } from \"../components/Form\";\nimport { Button, Icon, Loader, SectionHeader, StatCard, ToggleButtons } from \"../components\";\nimport { CollectionInfo } from \"../components/entitywise/Collection\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toggleProcessIndicator } from \"../store/reducers/app\";\n\nconst addCollectionForm = cloneDeep(addCollection);\nconst updateCollectionForm = cloneDeep(addCollection);\nupdateCollectionForm.goLiveTime.validator = Yup.number().required(\"Required\");\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\nfunction Collections() {\n  const classes = useStyles();\n  const state = useSelector(state => state);\n  const [products, setProducts] = useState(null);\n  const [suppliers, setSuppliers] = useState(null);\n  const [categories, setCategories] = useState([]);\n  const [subcategories, setSubcategories] = useState([]);\n  const subSubcategories = state[\"sub-subcategories\"];\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    async function getCategoriesData() {\n      try {\n        const [categories, subcategories] = await Promise.all([get.categories(), get.subcategories()])\n        setCategories(categories);\n        setSubcategories(subcategories);\n        dispatch(toggleProcessIndicator(false));\n      } catch(e) {\n        dispatch(toggleProcessIndicator(false));\n      }\n    }\n    getCategoriesData()\n  }, [])\n\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    Promise.all([get.allProducts({ params: { status: \"Active\" } }), get.allSuppliers({ params: { status: \"Active\" } })])\n      .then(resp => {\n        setProducts(resp[0]);\n        setSuppliers(resp[1]);\n      })\n      .catch(console.log)\n      .finally(() => dispatch(toggleProcessIndicator(false)));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (categories && categories.length) {\n      const categoryOptions = categories.map(c => ({ label: c.name, value: c._id }));\n      // const categoryOptions = categories.filter(c=>c.status==='Active').map(c => ({ label: c.name, value: c._id }));\n      addCollectionForm.category.options = categoryOptions;\n      updateCollectionForm.category.options = categoryOptions;\n    }\n\n    if (subcategories && subcategories.length) {\n      // const subcategoryOptions = subcategories.filter(c=>c.status==='Active').map(c => ({\n      const subcategoryOptions = subcategories.map(c => ({\n        label: c.name,\n        value: c._id,\n        category: c.category\n      }));\n      const subcategoryOptionsFilter = (path, { getValueAtPath }) =>\n        subcategoryOptions.filter(c => c.category === getValueAtPath([\"category\"]));\n      addCollectionForm.subcategory.options = subcategoryOptionsFilter;\n      updateCollectionForm.subcategory.options = subcategoryOptionsFilter;\n    }\n\n    if (subSubcategories && subSubcategories.length) {\n      // const subSubcategoryOptions = subSubcategories.filter(c=>c.status==='Active').map(c => ({\n      const subSubcategoryOptions = subSubcategories.map(c => ({\n        label: c.name,\n        value: c._id,\n        subcategory: c.subcategory\n      }));\n      const subSubcategoryOptionsFilter = (path, { getValueAtPath }) =>\n        subSubcategoryOptions.filter(c => c.subcategory === getValueAtPath([\"subcategory\"]));\n      addCollectionForm.subSubcategory.options = subSubcategoryOptionsFilter;\n      updateCollectionForm.subSubcategory.options = subSubcategoryOptionsFilter;\n    }\n\n    if (products && products.length) {\n      // const productOptions = products.filter(c=>c.status==='Active').map(p => ({\n      const productOptions = products.map(p => ({\n        label: `${p.name} ${p.SKU} ${p.productCode ? \", \" + p.productCode : \"\"}`,\n        value: p._id,\n        category: p.category,\n        subcategory: p.subcategory,\n        subSubcategory: p.subSubcategory\n      }));\n      const productOptionsFilter = (path, { getValueAtPath }) => {\n        const category = getValueAtPath([\"category\"]);\n        const subcategory = getValueAtPath([\"subcategory\"]);\n        const subSubcategory = getValueAtPath([\"subSubcategory\"]);\n        if (!category || !subcategory) return [];\n        const options = productOptions.filter(\n          p => {\n            let valid = p.category === category;\n            if (subcategory)\n              valid = p.category === category && p.subcategory === subcategory;\n            if (subSubcategory)\n              valid = p.category === category && p.subcategory === subcategory && p.subSubcategory === subSubcategory;\n            return valid;\n          }\n        );\n        return options;\n      };\n      addCollectionForm.products.options = productOptionsFilter;\n      updateCollectionForm.products.options = productOptionsFilter;\n    }\n  }, [categories, subcategories, subSubcategories, products, suppliers]);\n\n  const pageData = usePageData(\"collections\", { filters: { status: \"Active\", sortBy: 'goLiveTime' } });\n  const { collections, totalItems, containerRef, Pagination, refresh } = pageData;\n  const { filters, filter, permissions } = pageData;\n\n  const [collectionQuery, setCollectionQuery] = useState(\"\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const searchCollection = useCallback(\n    debounce(q => {\n      if (q !== collectionQuery) {\n        filter(f => ({ ...f, query: q }))\n      }\n    }, 1250),\n    [filter]\n  );\n\n  const [collectionTagQuery, setCollectionTagQuery] = useState(\"\");\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const searchCollectionTag = useCallback(\n    debounce(q => {\n      if (q !== collectionTagQuery) {\n        filter(f => ({ ...f, collectionTag: q }))\n      }\n    }, 1250),\n    [filter]\n  );\n\n  const resetFilters = () => {\n    setCollectionQuery(\"\");\n    filter({ status: \"Active\" });\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ goLiveStartDate:null, goLiveEndDate: null })\n  };\n\n  const _createCollection = async values => {\n    await createCollection(values).then(resp => refresh());\n    toast.success(\"Collection added successfully.\");\n  };\n\n  const _updateCollection = async (_id, values) => {\n    await updateCollection(_id, values).then(resp => refresh());\n    toast.success(\"Collection updated successfully.\");\n  };\n\n  const [dateRate, setDateRange] = useState({ goLiveStartDate: null, goLiveEndDate: null });\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, goLiveEndDate: new Date(ed.getTime()).getTime() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, goLiveStartDate: new Date(value).getTime() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.goLiveStartDate && dateRate.goLiveEndDate) {\n      filter(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  return (\n    <Box ref={containerRef}>\n      {!collections ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of Collections\" count={totalItems} />\n            </Grid>\n          </Grid>\n\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.collections}\n              label=\"Collections\"\n              rightComponent={\n                permissions.CREATE && (\n                  <FormDialog\n                    title=\"Add Collection\"\n                    formProps={{\n                      formConfig: addCollectionForm,\n                      submitHandler: _createCollection\n                    }}\n                  />\n                )\n              }\n            />\n\n            <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n              <Box mr={4} mb={-0.5}>\n                <TextField\n                  label=\"Search\"\n                  placeholder=\"code, name\"\n                  variant=\"outlined\"\n                  value={collectionQuery}\n                  onChange={e => {\n                    setCollectionQuery(e.target.value);\n                    searchCollection(e.target.value);\n                  }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Icon color=\"primary\" path={Icons.search} />\n                      </InputAdornment>\n                    )\n                  }}\n                  size=\"small\"\n                />\n              </Box>\n              <Box mr={2} mb={-0.5}>\n                <TextField\n                  variant=\"outlined\"\n                  placeholder={`Collection tag`}\n                  value={collectionTagQuery}\n                  onChange={e => {\n                    setCollectionTagQuery(e.target.value);\n                    searchCollectionTag(e.target.value);\n                  }}\n                  size=\"small\"\n                />\n              </Box>\n              <Box mr={2} mb={1}>\n                <Icon color=\"primary\" path={Icons.filter} />\n              </Box>\n              <Box mr={1} mb={1}>\n                <ToggleButtons\n                  options={[\n                    { label: \"All\", value: null },\n                    { label: \"Active\", value: \"Active\" },\n                    { label: \"Hidden\", value: \"Hidden\" },\n                    { label: \"Pending Approval\", value: \"Pending Approval\" }\n                  ]}\n                  value={filters.status}\n                  onChange={v => filter(f => ({ ...f, status: v }))}\n                />\n              </Box>\n              <TextField\n                size=\"small\"\n                label=\"Category\"\n                value={filters.category || \"\"}\n                onChange={e => {\n                  if (e.target.value) {\n                    filter(filters => ({ ...filters, category: e.target.value }))\n                  }\n                }}\n                select>\n                {(filters.status ? categories.filter(e => e.status === filters.status) : categories).length > 0 ? (filters.status ? categories.filter(e => e.status === filters.status) : categories).map(option => (\n                  <MenuItem key={option._id} value={option._id}>\n                    {option.name}\n                  </MenuItem>\n                )) :\n                <MenuItem>\n                  No Category found\n                </MenuItem>\n                }\n              </TextField>\n              <TextField\n                size=\"small\"\n                label=\"Subcategory\"\n                value={filters.subcategory || \"\"}\n                onChange={e => filter(filters => ({ ...filters, subcategory: e.target.value }))}\n                disabled={\n                  !filters.category || !subcategories.filter(i => ((i.category === filters.category) && (!filters.status || i.status === filters.status))).length\n                }\n                select>\n                {subcategories\n                  .filter(i => ((i.category === filters.category) && (!filters.status || i.status === filters.status)))\n                  .map(option => (\n                    <MenuItem key={option._id} value={option._id}>\n                      {option.name}\n                    </MenuItem>\n                  ))}\n              </TextField>\n            </Box>\n            <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n              <TextField\n                size=\"small\"\n                label=\"Sub-Subcategory\"\n                value={filters.subSubcategory || \"\"}\n                onChange={e => filter(filters => ({ ...filters, subSubcategory: e.target.value }))}\n                disabled={\n                  !filters.subcategory ||\n                  !subSubcategories.filter(i => ((i.subcategory === filters.subcategory) && (!filters.status || i.status === filters.status))).length\n                }\n                select>\n                {subSubcategories\n                  .filter(i => ((i.subcategory === filters.subcategory) && (!filters.status || i.status === filters.status)))\n                  .map(option => (\n                    <MenuItem key={option._id} value={option._id}>\n                      {option.name}\n                    </MenuItem>\n                  ))}\n              </TextField>\n              <TextField\n                id=\"startDate\"\n                label=\"Select Start Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={startDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                id=\"endDate\"\n                label=\"Select End Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={endDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <Box flexGrow={1} />\n              {!!Object.values(filters).filter(Boolean).length && (\n                <Box>\n                  <Button variant=\"text\" size=\"small\" onClick={resetFilters} text=\"Reset\" />\n                </Box>\n              )}\n            </Box>\n\n            {collections.length ? (\n              collections.map(s => (\n                <Box key={s._id} mb={1.5}>\n                  <CollectionInfo\n                    collection={{\n                      ...s,\n                      category: categories && categories.filter(c => c._id === s.category)[0],\n                      subcategory: subcategories && subcategories.filter(c => c._id === s.subcategory)[0],\n                      subSubcategory:\n                        subSubcategories && subSubcategories.filter(c => c._id === s.subSubcategory)[0]\n                    }}\n                    actions={\n                      permissions.UPDATE && (\n                        <FormDialog\n                          title=\"Update Collection\"\n                          buttonProps={{ icon: Icons.edit }}\n                          formProps={{\n                            formConfig: updateCollectionForm,\n                            submitHandler: val => _updateCollection(s._id, val),\n                            incomingValue: s\n                          }}\n                        />\n                      )\n                    }\n                  />\n                </Box>\n              ))\n            ) : (\n              <Box mt={4}>\n                <Typography variant=\"body2\">No collections in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default Collections;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/SubSubcategories.js",["556","557"],"import React, { useCallback, useEffect, useState } from 'react'\nimport { batch, useDispatch, useSelector } from 'react-redux'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { toast } from 'react-toastify'\nimport { Box, Chip, Grid, InputAdornment, makeStyles, MenuItem, TextField, Typography } from '@material-ui/core'\n\nimport Icons from '../constants/icons'\nimport { CATEGORY_STATUS_CHANGE_BUTTON_TEXTS, getCategoryStatusToBeUpdated } from '../constants'\nimport { getPermissions, PERMISSION_CODES } from '../constants/permissions'\nimport addSubSubcategory from '../constants/forms/add--sub-subcategory'\nimport { toggleProcessIndicator } from '../store/reducers/app'\nimport { setArray, setItem, updateItem } from '../store/reducers/arrayReducers'\nimport { createSubSubcategory, get, updateSubSubcategory } from '../services/api'\n\nimport { FormDialog } from '../components/Form'\nimport { Button, Icon, Loader, SectionHeader, ToggleButtons } from '../components'\nimport { SubSubcategoryCard } from '../components/entitywise/SubSubcategory'\nimport debounce from 'lodash/debounce'\n\nconst addSubSubcategoryForm = cloneDeep(addSubSubcategory)\nconst updateSubSubcategoryForm = cloneDeep(addSubSubcategory)\n\nconst useStyles = makeStyles(theme => ({\n  p8: { padding: theme.spacing(1) },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '22ch',\n    },\n    '& .MuiTextField-root:first-child': {\n      marginLeft: theme.spacing(0),\n    },\n  },\n}))\n\nfunction SubSubcategories() {\n  const state = useSelector(state => state)\n  const PERMISSIONS = state.auth?.user?.permissions\n  const { categories, subcategories } = state\n  const subSubcategories = state['sub-subcategories']\n  const dispatch = useDispatch()\n  const classes = useStyles()\n  const [filters, setFilters] = useState({ status: 'Active' })\n  const [categoriesQuery, setCategoriesQuery] = useState('')\n  const [dateRate, setDateRange] = useState({ startDate: null, endDate: null });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const searchCategory = useCallback(\n    debounce(q => setFilters({ ...filters, query:q }), 1250),\n    [filters],\n  )\n\n  useEffect(()=>{\n    Promise.all([get.subSubcategories(filters)]).then(resp => {\n      batch(() => {\n        dispatch(setArray('sub-subcategories', resp[0]))\n      })\n    })\n  },[filters])\n  const resetFilters = () => {\n    setCategoriesQuery('')\n    setFilters({ status: 'Active' })\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n  }\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true))\n    Promise.all([get.categories(), get.subcategories(), get.subSubcategories(filters)]).then(resp => {\n      batch(() => {\n        dispatch(setArray('categories', resp[0]))\n        dispatch(setArray('subcategories', resp[1]))\n        dispatch(setArray('sub-subcategories', resp[2]))\n        dispatch(toggleProcessIndicator(false))\n      })\n    })\n  }, [dispatch])\n\n  useEffect(() => {\n    if (!categories || !categories.length || !subcategories || !subcategories.length) return\n    const categoryOptions = categories.filter(s=>s.status === 'Active').map(c => ({ label: c.name, value: c._id }))\n    const subcategoryOptions = subcategories.filter(s=>s.status === 'Active').map(c => ({ label: c.name, value: c._id, category: c.category }))\n    addSubSubcategoryForm.category.options = categoryOptions\n    updateSubSubcategoryForm.category.options = categoryOptions\n    addSubSubcategoryForm.subcategory.options = (path, { getValueAtPath }) =>\n      subcategoryOptions.filter(c => c.category === getValueAtPath(['category']))\n    updateSubSubcategoryForm.subcategory.options = (path, { getValueAtPath }) =>\n      subcategoryOptions.filter(c => c.category === getValueAtPath(['category']))\n  }, [categories, subcategories])\n\n  const _createSubSubcategory = async values => {\n    await createSubSubcategory(values).then(resp => dispatch(setItem('sub-subcategories', resp)))\n    toast.success('Sub-Subcategory added successfully.')\n    setFilters({...filters,status: 'Pending Approval'})\n  }\n\n  const _updateSubSubcategory = async (_id, values) => {\n    await updateSubSubcategory(_id, values).then(resp => dispatch(updateItem('sub-subcategories', resp)))\n    toast.success('Sub-Subcategory updated successfully.')\n  }\n\n  const allowAdd = getPermissions(PERMISSIONS, 'subSubcategory').includes(PERMISSION_CODES.subSubcategory[1])\n  const allowUpdate = getPermissions(PERMISSIONS, 'subSubcategory').includes(\n    PERMISSION_CODES.subSubcategory[2]\n  )\n\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n  \n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, startDate: new Date(value).toISOString() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      setFilters(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  if (!subSubcategories) return <Loader absolute />\n  return (\n    <Box>\n      <SectionHeader\n        icon={Icons.subSubcategories}\n        label=\"Sub-Subcategories\"\n        leftComponent={<Chip label={subSubcategories.length} />}\n        rightComponent={\n          allowAdd && (\n            <FormDialog\n              title=\"Add Sub-Subcategory\"\n              formProps={{\n                formConfig: addSubSubcategoryForm,\n                submitHandler: _createSubSubcategory,\n              }}\n            />\n          )\n        }\n      />\n      <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n        <Box mr={4} mb={-0.5}>\n          <TextField\n            label=\"Search\"\n            placeholder=\"name\"\n            variant=\"outlined\"\n            value={categoriesQuery}\n            onChange={e => {\n              if (e.target.value === \"\")\n                resetFilters();\n              setCategoriesQuery(e.target.value);\n              searchCategory(e.target.value);\n            }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Icon color=\"primary\" path={Icons.search} />\n                </InputAdornment>\n              )\n            }}\n            size=\"small\"\n          />\n        </Box>\n        <Box mr={2} mb={1}>\n          <Icon color=\"primary\" path={Icons.filter} />\n        </Box>\n        <Box mr={1} mb={1}>\n          <ToggleButtons\n            options={[\n              { label: \"All\", value: null },\n              { label: \"Active\", value: \"Active\" },\n              { label: \"Hidden\", value: \"Hidden\" },\n              { label: \"Pending Approval\", value: \"Pending Approval\" }\n            ]}\n            value={filters.status}\n            onChange={v => setFilters({ ...filters, status: v })}\n          />\n        </Box>\n      </Box>\n      <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n        <Box mr={4} mb={-0.5}>\n          <TextField\n            size=\"small\"\n            label=\"Category\"\n            value={filters.category || ''}\n            onChange={e => setFilters({ ...filters,category: e.target.value })}\n            select>\n            {(filters.status ? categories.filter(e => e.status === filters.status) : categories).map(option => (\n              <MenuItem key={option._id} value={option._id}>\n                {option.name}\n              </MenuItem>\n            ))}\n          </TextField>\n          <TextField\n            size=\"small\"\n            label=\"Subcategory\"\n            value={filters.subcategory || ''}\n            onChange={e => setFilters({ ...filters, subcategory: e.target.value })}\n            disabled={\n              !filters.category || !subcategories.filter(i => ((i.category === filters.category) && (!filters.status || i.status === filters.status))).length\n            }\n            select>\n            {subcategories\n              .filter(i => ((i.category === filters.category) && (!filters.status || i.status === filters.status)))\n              .map(option => (\n                <MenuItem key={option._id} value={option._id}>\n                  {option.name}\n                </MenuItem>\n              ))}\n          </TextField>\n          <TextField\n          id=\"startDate\"\n          label=\"Select Start Date\"\n          type=\"date\"\n          onChange={handleFilterDate}\n          value={startDateValue}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        <TextField\n          id=\"endDate\"\n          label=\"Select End Date\"\n          type=\"date\"\n          onChange={handleFilterDate}\n          value={endDateValue}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        </Box>\n        <Box flexGrow={1} />\n        {!!Object.values(filters).filter(Boolean).length && (\n          <Box>\n            <Button variant=\"text\" size=\"small\" onClick={resetFilters} text=\"Reset\" />\n          </Box>\n        )}\n      </Box>\n      <Box mb={2} />\n\n      {subSubcategories.length ? (\n        <Grid container spacing={2}>\n          {subSubcategories.filter(s => filters.status ? s.status === filters.status : true).map(s => (\n            <Grid key={s._id} item xs={3}>\n              <SubSubcategoryCard\n                category={categories.filter(c => c._id === s.category)[0]}\n                subcategory={subcategories.filter(c => c._id === s.subcategory)[0]}\n                subSubcategory={s}\n                actions={\n                  allowUpdate && [\n                    <Button\n                      key={'change-status-button' + s._id}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      onClick={() =>\n                        _updateSubSubcategory(s._id, { status: getCategoryStatusToBeUpdated(s.status) })\n                      }\n                      color={{ Hide: 'warning' }[CATEGORY_STATUS_CHANGE_BUTTON_TEXTS[s.status]]}\n                      style={{ marginRight: 8 }}\n                      text={CATEGORY_STATUS_CHANGE_BUTTON_TEXTS[s.status]}\n                    />,\n                    <FormDialog\n                      key={'update-button' + s._id}\n                      title=\"Update Subcategory\"\n                      buttonProps={{ icon: Icons.edit }}\n                      formProps={{\n                        formConfig: updateSubSubcategoryForm,\n                        submitHandler: val => _updateSubSubcategory(s._id, val),\n                        incomingValue: s,\n                      }}\n                    />,\n                  ]\n                }\n              />\n            </Grid>\n          ))}\n        </Grid>\n      ) : (\n        <Box mt={4}>\n          <Typography variant=\"body2\">No Sub-Subcategories in system.</Typography>\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default SubSubcategories\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Subcategories.js",["558","559"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { batch, useDispatch, useSelector } from \"react-redux\";\nimport { GridContextProvider, GridDropZone, GridItem, swap } from \"react-grid-dnd\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { toast } from \"react-toastify\";\nimport { Box, Chip, InputAdornment, makeStyles, MenuItem, TextField, Typography } from \"@material-ui/core\";\n\nimport Icons from \"../constants/icons\";\nimport { CATEGORY_STATUS_CHANGE_BUTTON_TEXTS, getCategoryStatusToBeUpdated } from \"../constants\";\nimport { getPermissions, PERMISSION_CODES } from \"../constants/permissions\";\nimport addSubcategory from \"../constants/forms/add-subcategory\";\nimport { toggleProcessIndicator } from \"../store/reducers/app\";\nimport { setArray, setItem, updateItem } from \"../store/reducers/arrayReducers\";\nimport { createSubcategory, get, updateSubcategory } from \"../services/api\";\n\nimport { FormDialog } from \"../components/Form\";\nimport { Button, Icon, Loader, SectionHeader, ToggleButtons } from \"../components\";\nimport { SubcategoryCard } from \"../components/entitywise/Subcategory\";\nimport debounce from \"lodash/debounce\";\n\nconst addSubcategoryForm = cloneDeep(addSubcategory);\nconst updateSubcategoryForm = cloneDeep(addSubcategory);\n\nconst useStyles = makeStyles(theme => ({\n  p8: { padding: theme.spacing(1) },\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\nfunction Subcategories() {\n  const classes = useStyles();\n\n  const state = useSelector(state => state);\n  const PERMISSIONS = state.auth?.user?.permissions;\n  const { categories, subcategories } = state;\n  const dispatch = useDispatch();\n\n  const [filters, setFilters] = useState({ status: \"Active\" });\n  const [categoriesQuery, setCategoriesQuery] = useState(\"\");\n  const [dateRate, setDateRange] = useState({ startDate: null, endDate: null });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const searchCategory = useCallback(\n    debounce(q => setFilters({ ...filters, query: q }), 1250),\n    [filters]\n  );\n\n  useEffect(() => {\n    Promise.all([get.subcategories(filters)]).then(resp => {\n      batch(() => {\n        dispatch(setArray(\"subcategories\", resp[0]));\n      });\n    });\n  }, [filters]);\n  const resetFilters = () => {\n    setCategoriesQuery(\"\");\n    setFilters({ status: \"Active\" });\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n  };\n\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    Promise.all([get.categories(), get.subcategories(filters)]).then(resp => {\n      batch(() => {\n        dispatch(setArray(\"categories\", resp[0]));\n        dispatch(setArray(\"subcategories\", resp[1]));\n        dispatch(toggleProcessIndicator(false));\n      });\n    });\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!categories || !categories.length) return;\n    addSubcategoryForm.category.options = categories.filter(c => c.status === \"Active\").map(c => ({\n      label: c.name,\n      value: c._id\n    }));\n    updateSubcategoryForm.category.options = categories.filter(c => c.status === \"Active\").map(c => ({\n      label: c.name,\n      value: c._id\n    }));\n  }, [categories]);\n\n  const _createSubcategory = async values => {\n    await createSubcategory(values).then(resp => dispatch(setItem(\"subcategories\", resp)));\n    toast.success(\"Subcategory added successfully.\");\n    setFilters({...filters,status: 'Pending Approval'})\n  };\n\n  const _updateSubcategory = async (_id, values) => {\n    await updateSubcategory(_id, values).then(resp => dispatch(updateItem(\"subcategories\", resp)));\n    toast.success(\"Subcategory updated successfully.\");\n  };\n\n  function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n    if (sourceIndex === targetIndex) return;\n    _updateSubcategory(subcategories[targetIndex]._id, { order: sourceIndex });\n    _updateSubcategory(subcategories[sourceIndex]._id, { order: targetIndex });\n\n    const nextState = swap(subcategories, sourceIndex, targetIndex);\n    dispatch(setArray(\"subcategories\", nextState));\n  }\n\n  const allowAdd = getPermissions(PERMISSIONS, \"subcategory\").includes(PERMISSION_CODES.subcategory[1]);\n  const allowUpdate = getPermissions(PERMISSIONS, \"subcategory\").includes(PERMISSION_CODES.subcategory[2]);\n\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, startDate: new Date(value).toISOString() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      setFilters(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  if (!subcategories) return <Loader absolute />;\n  return (\n    <Box>\n      <SectionHeader\n        icon={Icons.subcategories}\n        label=\"Subcategories\"\n        leftComponent={<Chip label={subcategories.length} />}\n        rightComponent={\n          allowAdd && (\n            <FormDialog\n              title=\"Add Subcategory\"\n              formProps={{\n                formConfig: addSubcategoryForm,\n                submitHandler: _createSubcategory\n              }}\n            />\n          )\n        }\n      />\n      <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n        <Box mr={4} mb={-0.5}>\n          <TextField\n            label=\"Search\"\n            placeholder=\"name\"\n            variant=\"outlined\"\n            value={categoriesQuery}\n            onChange={e => {\n              if (e.target.value === \"\")\n                resetFilters();\n              setCategoriesQuery(e.target.value);\n              searchCategory(e.target.value);\n            }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Icon color=\"primary\" path={Icons.search} />\n                </InputAdornment>\n              )\n            }}\n            size=\"small\"\n          />\n        </Box>\n        <Box mr={2} mb={1}>\n          <ToggleButtons\n            options={[\n              { label: \"All\", value: null },\n              { label: \"Active\", value: \"Active\" },\n              { label: \"Hidden\", value: \"Hidden\" },\n              { label: \"Pending Approval\", value: \"Pending Approval\" }\n            ]}\n            value={filters.status}\n            onChange={v => setFilters({ ...filters, status: v })}\n          />\n        </Box>\n        <Box mr={4} mb={-0.5}>\n          <TextField\n            size=\"small\"\n            label=\"Category\"\n            value={filters.category || \"\"}\n            onChange={e => setFilters({ ...filters, category: e.target.value })}\n            select>\n            {(filters.status ? categories.filter(e => e.status === filters.status) : categories).map(option => (\n              <MenuItem key={option._id} value={option._id}>\n                {option.name}\n              </MenuItem>\n            ))}\n          </TextField>\n        </Box>\n        <TextField\n          id=\"startDate\"\n          label=\"Select Start Date\"\n          type=\"date\"\n          onChange={handleFilterDate}\n          value={startDateValue}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        <TextField\n          id=\"endDate\"\n          label=\"Select End Date\"\n          type=\"date\"\n          onChange={handleFilterDate}\n          value={endDateValue}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        <Box flexGrow={1} />\n        {!!Object.values(filters).filter(Boolean).length && (\n          <Box>\n            <Button variant=\"text\" size=\"small\" onClick={resetFilters} text=\"Reset\" />\n          </Box>\n        )}\n      </Box>\n      <Box mb={2} />\n\n      {subcategories.length ? (\n        <GridContextProvider onChange={onChange}>\n          <GridDropZone\n            boxesPerRow={4}\n            rowHeight={416}\n            style={{ height: Math.ceil(subcategories.length / 4) * 416 }}>\n            {subcategories.filter(s => filters.status ? s.status === filters.status : true).map(s => (\n              <GridItem key={s._id} className={classes.p8}>\n                <SubcategoryCard\n                  category={categories.filter(c => c._id === s.category)[0]}\n                  subcategory={s}\n                  actions={\n                    allowUpdate && [\n                      <Button\n                        key={\"change-status-button\" + s._id}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        onClick={() =>\n                          _updateSubcategory(s._id, { status: getCategoryStatusToBeUpdated(s.status) })\n                        }\n                        color={{ Hide: \"warning\" }[CATEGORY_STATUS_CHANGE_BUTTON_TEXTS[s.status]]}\n                        style={{ marginRight: 8 }}\n                        text={CATEGORY_STATUS_CHANGE_BUTTON_TEXTS[s.status]}\n                      />,\n                      <FormDialog\n                        key={\"update-button\" + s._id}\n                        title=\"Update Subcategory\"\n                        buttonProps={{ icon: Icons.edit }}\n                        formProps={{\n                          formConfig: updateSubcategoryForm,\n                          submitHandler: val => _updateSubcategory(s._id, val),\n                          incomingValue: s\n                        }}\n                      />\n                    ]\n                  }\n                />\n              </GridItem>\n            ))}\n          </GridDropZone>\n        </GridContextProvider>\n      ) : (\n        <Box mt={4}>\n          <Typography variant=\"body2\">No subcategories in system.</Typography>\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default Subcategories;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Collection.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Categories.js",["560","561"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { batch, useDispatch, useSelector } from \"react-redux\";\nimport { GridContextProvider, GridDropZone, GridItem, swap } from \"react-grid-dnd\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { toast } from \"react-toastify\";\nimport { Box, Chip, InputAdornment, makeStyles, TextField, Typography } from \"@material-ui/core\";\n\nimport Icons from \"../constants/icons\";\nimport { CATEGORY_STATUS_CHANGE_BUTTON_TEXTS, getCategoryStatusToBeUpdated } from \"../constants\";\nimport { getPermissions, PERMISSION_CODES } from \"../constants/permissions\";\nimport addCategory from \"../constants/forms/add-category\";\nimport { toggleProcessIndicator } from \"../store/reducers/app\";\nimport { setArray, setItem, updateItem } from \"../store/reducers/arrayReducers\";\nimport { createCategory, get, updateCategory } from \"../services/api\";\n\nimport { FormDialog } from \"../components/Form\";\nimport { Button, Icon, Loader, SectionHeader, ToggleButtons } from \"../components\";\nimport { CategoryCard } from \"../components/entitywise/Category\";\nimport debounce from \"lodash/debounce\";\n\nconst addCategoryForm = cloneDeep(addCategory);\nconst updateCategoryForm = cloneDeep(addCategory);\n\nconst useStyles = makeStyles(theme => ({\n  p8: { padding: theme.spacing(1) }\n}));\n\nfunction Categories() {\n  const classes = useStyles();\n\n  const state = useSelector(state => state);\n  const PERMISSIONS = state.auth?.user?.permissions;\n  const categories = state.categories;\n  const dispatch = useDispatch();\n\n  const [filters, setFilters] = useState({ status: \"Active\" });\n  const [categoriesQuery, setCategoriesQuery] = useState(\"\");\n  const [dateRate, setDateRange] = useState({ startDate: null, endDate: null });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const searchCategory = useCallback(\n    debounce(q => setFilters({ ...filters, query: q }), 1250),\n    [filters]\n  );\n\n  useEffect(() => {\n    Promise.all([get.categories(filters)]).then(resp => {\n      batch(() => {\n        dispatch(setArray(\"categories\", resp[0]));\n      });\n    });\n  }, [filters]);\n  const resetFilters = () => {\n    setCategoriesQuery(\"\");\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n  setFilters({ status: \"Active\" });\n  };\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    Promise.all([get.categories(filters)]).then(resp => {\n      batch(() => {\n        dispatch(setArray(\"categories\", resp[0]));\n        dispatch(toggleProcessIndicator(false));\n      });\n    });\n  }, [dispatch]);\n\n  const _createCategory = async values => {\n    await createCategory(values).then(resp => dispatch(setItem(\"categories\", resp)));\n    toast.success(\"Category added successfully.\");\n    setFilters({ ...filters, status: \"Pending Approval\" });\n  };\n\n  const _updateCategory = async (_id, values) => {\n    await updateCategory(_id, values).then(resp => dispatch(updateItem(\"categories\", resp)));\n    toast.success(\"Category updated successfully.\");\n  };\n\n  function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n    if (sourceIndex === targetIndex) return;\n    _updateCategory(categories[targetIndex]._id, { order: sourceIndex });\n    _updateCategory(categories[sourceIndex]._id, { order: targetIndex });\n\n    const nextState = swap(categories, sourceIndex, targetIndex);\n    dispatch(setArray(\"categories\", nextState));\n  }\n\n  const allowAdd = getPermissions(PERMISSIONS, \"category\").includes(PERMISSION_CODES.category[1]);\n  const allowUpdate = getPermissions(PERMISSIONS, \"category\").includes(PERMISSION_CODES.category[2]);\n\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, startDate: new Date(value).toISOString() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      setFilters(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  if (!categories) return <Loader absolute />;\n  return (\n    <Box>\n      <SectionHeader\n        icon={Icons.categories}\n        label=\"Categories\"\n        leftComponent={<Chip label={categories.length} />}\n        rightComponent={\n          allowAdd && (\n            <FormDialog\n              title=\"Add Category\"\n              formProps={{\n                formConfig: addCategoryForm,\n                submitHandler: _createCategory\n              }}\n            />\n          )\n        }\n      />\n      <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n        <Box mr={4} mb={-0.5}>\n          <TextField\n            label=\"Search\"\n            placeholder=\"name\"\n            variant=\"outlined\"\n            value={categoriesQuery}\n            onChange={e => {\n              if (e.target.value === \"\")\n                resetFilters();\n              setCategoriesQuery(e.target.value);\n              searchCategory(e.target.value);\n            }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Icon color=\"primary\" path={Icons.search} />\n                </InputAdornment>\n              )\n            }}\n            size=\"small\"\n          />\n        </Box>\n\n        <Box mr={2} mb={1}>\n          <Icon color=\"primary\" path={Icons.filter} />\n        </Box>\n        <Box mr={1} mb={1}>\n          <ToggleButtons\n            options={[\n              { label: \"All\", value: null },\n              { label: \"Active\", value: \"Active\" },\n              { label: \"Hidden\", value: \"Hidden\" },\n              { label: \"Pending Approval\", value: \"Pending Approval\" }\n            ]}\n            value={filters.status}\n            onChange={v => setFilters({ ...filters, status: v })}\n          />\n        </Box>\n        <TextField\n          id=\"startDate\"\n          label=\"Select Start Date\"\n          type=\"date\"\n          onChange={handleFilterDate}\n          value={startDateValue}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        <TextField\n          id=\"endDate\"\n          label=\"Select End Date\"\n          type=\"date\"\n          onChange={handleFilterDate}\n          value={endDateValue}\n          defaultValue={endDateValue}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        <Box flexGrow={1} />\n        {!!Object.values(filters).filter(Boolean).length && (\n          <Box>\n            <Button variant=\"text\" size=\"small\" onClick={resetFilters} text=\"Reset\" />\n          </Box>\n        )}\n      </Box>\n      <Box mb={2} />\n\n      {categories.length ? (\n        <GridContextProvider onChange={onChange}>\n          <GridDropZone\n            boxesPerRow={4}\n            rowHeight={390}\n            style={{ height: Math.ceil(categories.length / 4) * 390 }}>\n            {categories.filter(s => filters.status ? s.status === filters.status : true).map(s => (\n              <GridItem key={s._id} className={classes.p8}>\n                <CategoryCard\n                  category={s}\n                  actions={\n                    allowUpdate && [\n                      <Button\n                        key={\"change-status-button\" + s._id}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        onClick={() =>\n                          _updateCategory(s._id, { status: getCategoryStatusToBeUpdated(s.status) })\n                        }\n                        color={{ Hide: \"warning\" }[CATEGORY_STATUS_CHANGE_BUTTON_TEXTS[s.status]]}\n                        style={{ marginRight: 8 }}\n                        text={CATEGORY_STATUS_CHANGE_BUTTON_TEXTS[s.status]}\n                      />,\n                      <FormDialog\n                        key={\"update-button\" + s._id}\n                        title=\"Update Category\"\n                        buttonProps={{ icon: Icons.edit }}\n                        formProps={{\n                          formConfig: updateCategoryForm,\n                          submitHandler: val => _updateCategory(s._id, val),\n                          incomingValue: s\n                        }}\n                      />\n                    ]\n                  }\n                />\n              </GridItem>\n            ))}\n          </GridDropZone>\n        </GridContextProvider>\n      ) : (\n        <Box mt={4}>\n          <Typography variant=\"body2\">No categories in system.</Typography>\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default Categories;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Supplier.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Resellers.js",["562","563","564","565","566","567","568","569","570","571","572","573","574"],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Suppliers.js",["575","576"],"import React, { useCallback, useState, useEffect } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { toast } from \"react-toastify\";\nimport { Box, Grid, InputAdornment, makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport CsvDownload from \"react-json-to-csv\";\nimport format from \"date-fns/format\";\n\nimport Icons from \"../constants/icons\";\nimport addSupplier from \"../constants/forms/add-supplier\";\nimport { createSupplier, createSupplierBank, updateSupplier, get } from \"../services/api\";\nimport usePageData from \"../services/PageData\";\n\nimport { FormDialog } from \"../components/Form\";\nimport { Button, Dialog, Icon, Loader, SectionHeader, StatCard, ToggleButtons } from \"../components\";\nimport { SupplierInfo } from \"../components/entitywise/Supplier\";\nimport debounce from \"lodash/debounce\";\nimport { getResellerStatusToBeUpdated, RESELLER_STATUS_CHANGE_BUTTON_TEXTS } from \"../constants\";\nimport BankDetails from \"../components/entitywise/BankDetails\";\n\nimport addBank from \"../constants/forms/add-bank\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport moment from \"moment\";\n\nconst addBankForm = cloneDeep(addBank);\nconst addSupplierForm = cloneDeep(addSupplier);\nconst updateSupplierForm = cloneDeep(addSupplier);\nconst useStyles = makeStyles(theme => ({\n  fullScreen: {\n    flexGrow: 1\n  },\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"22ch\"\n    },\n    \"& .MuiTextField-root:first-child\": {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n\nfunction Suppliers() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const {\n    filters,\n    filter,\n    suppliers,\n    totalItems,\n    containerRef,\n    Pagination,\n    refresh,\n    permissions\n  } = usePageData(\"suppliers\", { filters: { status: \"Active\" } });\n  const [collectionQuery, setCollectionQuery] = useState(\"\");\n  const [dateRate, setDateRange] = useState({ startDate: null, endDate: null });\n  const [downloadableData, setDownloadableData] = useState([])\n  const _createSupplier = async values => {\n    await createSupplier(values).then(resp => refresh());\n    toast.success(\"Supplier added successfully.\");\n  };\n\n  const _updateSupplier = async (_id, values) => {\n    await updateSupplier(_id, values).then(resp => refresh());\n    toast.success(\"Supplier updated successfully.\");\n  };\n\n  useEffect(() => {\n    function getPhoneNumber({ countryCode, areaCode, number }) {\n      return `${countryCode || ''}-${areaCode || ''}-${number || ''}`\n    }\n    async function getDownloadableData() {\n      const suppliers = await get['suppliers']({ params: { getAll: true } })\n      let data = suppliers.data.map(r => ({\n        \"Name\": r.name,\n        \"Email\": r.email,\n        \"Status\": r.status,\n        \"Contact Person Name\": r.contactPerson?.firstName,\n        \"Contact Person Phone\": r.contactPerson.phone ? getPhoneNumber(r.contactPerson.phone) : 'N/A',\n        \"Human Friendly Id\": r.humanFriendlyId,\n        \"Created At\": format(new Date(r.createdAt), 'MMM do, yyyy'),\n      }));\n      setDownloadableData(data)\n    }\n    getDownloadableData()\n  }, [])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const searchCollection = useCallback(\n    debounce(q => filter(f => ({ ...f, query: q })), 1250),\n    [filter]\n  );\n\n  const resetFilters = () => {\n    setCollectionQuery(\"\");\n    filter({ status: \"Active\" });\n    setStartDateValue(\"\")\n    setEndDateValue(\"\")\n    setDateRange({ startDate:null, endDate: null })\n  };\n\n\n  const _createSupplierBank = async (resellerId, val) => {\n    try {\n      delete val.entityId;\n      let bank = await createSupplierBank(resellerId, val);\n      if (!bank)\n        throw new Error(\"Bank cannot be created, try again\");\n      refresh();\n      toast.success(\"Bank added successfully\");\n    } catch (e) {\n      toast.error(e.message);\n    }\n  };\n\n  const [startDateValue, setStartDateValue] = useState(null)\n  const [endDateValue, setEndDateValue] = useState(null)\n\n  const handleFilterDate = (e) => {\n    const { id, value } = e.target\n    if (id === 'endDate') {\n      if (new Date(startDateValue) > new Date(value)) {\n        toast.error(\"End Date cannot be greater than start date\");\n        return;\n      }\n      let ed = new Date(value);\n      ed.setHours(23, 0, 0, 0);\n      setEndDateValue(value)\n      setDateRange({ ...dateRate, endDate: new Date(ed.getTime()).toISOString() });\n    }\n    if (id === 'startDate') {\n      if(endDateValue !== null){\n        if (new Date(value) > new Date(endDateValue)) {\n          toast.error(\"End Date cannot be greater than start date\");\n          return;\n        }\n      }\n      setStartDateValue(value)\n      setDateRange({ ...dateRate, startDate: new Date(value).toISOString() });\n    }\n  }\n\n  useEffect(() => {\n    if (dateRate.startDate && dateRate.endDate) {\n      filter(filters => ({ ...filters, ...dateRate }))\n    }\n  }, [dateRate])\n\n  return (\n    <Box ref={containerRef}>\n      {!suppliers ? (\n        <Loader absolute />\n      ) : (\n        <>\n          <Grid container spacing={3}>\n            <Grid item xs={3}>\n              <StatCard label=\"# of Suppliers\" count={totalItems} />\n            </Grid>\n          </Grid>\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.orders}\n              label=\"Suppliers\"\n              rightComponent={\n                <>\n                  {\n                    suppliers.length ?\n                      <CsvDownload data={downloadableData}\n                        filename={`Suppliers.${format(new Date(), \"MMM-do-yyyy\")}.csv`}\n                        style={{\n                          background: \"#738C4A\",\n                          color: \"#fff\",\n                          padding: \"6px  16px\",\n                          fontWeight: 500,\n                          lineHeight: 1.75,\n                          border: 0,\n                          borderRadius: \"4px\",\n                          cursor: \"pointer\"\n                        }}>\n                        Download Report\n                      </CsvDownload> : <></>\n                  }\n                </>\n              }\n            />\n          </Box>\n          <Box mt={5}>\n            <SectionHeader\n              icon={Icons.supplier}\n              label=\"Suppliers\"\n              rightComponent={\n                permissions.CREATE && (\n                  <FormDialog\n                    title=\"Add Supplier\"\n                    formProps={{\n                      formConfig: addSupplierForm,\n                      submitHandler: _createSupplier\n                    }}\n                  />\n                )\n              }\n            />\n            <Box display=\"flex\" alignItems=\"flex-end\" my={2} className={classes.root}>\n              <Box mr={4} mb={-0.5}>\n                <TextField\n                  label=\"Search\"\n                  placeholder=\"name, id\"\n                  variant=\"outlined\"\n                  value={collectionQuery}\n                  onChange={e => {\n                    if (e.target.value === \"\") {\n                      resetFilters();\n                    } else {\n                      searchCollection(e.target.value);\n                    }\n                    setCollectionQuery(e.target.value);\n                  }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Icon color=\"primary\" path={Icons.search} />\n                      </InputAdornment>\n                    )\n                  }}\n                  size=\"small\"\n                />\n              </Box>\n\n              <Box mr={2} mb={1}>\n                <Icon color=\"primary\" path={Icons.filter} />\n              </Box>\n              <Box mr={1} mb={1}>\n                <ToggleButtons\n                  options={[\n                    { label: \"All\", value: null },\n                    { label: \"Active\", value: \"Active\" },\n                    { label: \"Block\", value: \"Blocked\" }\n                  ]}\n                  value={filters.status}\n                  onChange={v => filter(f => ({ ...f, status: v }))}\n                />\n              </Box>\n              <TextField\n                id=\"startDate\"\n                label=\"Select Start Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={startDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <TextField\n                id=\"endDate\"\n                label=\"Select End Date\"\n                type=\"date\"\n                onChange={handleFilterDate}\n                value={endDateValue}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <Box flexGrow={1} />\n              {!!Object.values(filters).filter(Boolean).length && (\n                <Box>\n                  <Button variant=\"text\" size=\"small\" onClick={resetFilters} text=\"Reset\" />\n                </Box>\n              )}\n            </Box>\n            <Box mb={2} />\n\n            {suppliers.length ? (\n              suppliers.map(s => (\n                <Box key={s._id} mb={1.5}>\n                  <SupplierInfo\n                    supplier={s}\n                    actions={\n                      <>\n                        {\n                          permissions.UPDATE && (\n                            <FormDialog\n                              title=\"Update Supplier\"\n                              buttonProps={{ icon: Icons.edit }}\n                              formProps={{\n                                formConfig: updateSupplierForm,\n                                submitHandler: val => _updateSupplier(s._id, val),\n                                incomingValue: s,\n                                renderPosition: \"ACTION_BUTTON_AREA\",\n                                render: () => (\n                                  <Button\n                                    variant=\"outlined\"\n                                    size=\"small\"\n                                    onClick={() =>\n                                      _updateSupplier(s._id, {\n                                        status: getResellerStatusToBeUpdated(s.status)\n                                      })\n                                    }\n                                    color={{ Block: \"warning\" }[RESELLER_STATUS_CHANGE_BUTTON_TEXTS[s.status]]}\n                                    style={{ marginRight: 8 }}\n                                    text={RESELLER_STATUS_CHANGE_BUTTON_TEXTS[s.status]}\n                                  />\n                                )\n                              }}\n                            />\n                          )\n                        }\n                        {\n                          s.banks.length < 1 && <FormDialog\n                            title=\"Add Bank\"\n                            buttonProps={{ icon: Icons.bankAdd }}\n                            formProps={{\n                              formConfig: addBankForm,\n                              submitHandler: val => _createSupplierBank(s.humanFriendlyId || s._id, val),\n                              incomingValue: { entityId: s.humanFriendlyId || s._id }\n                            }}\n                          />\n                        }\n                        {\n                          <Dialog\n                            width={\"sm\"}\n                            dialogProps={{ fullScreen }}\n                            title=\"Update Bank\"\n                            buttonProps={{ icon: Icons.bank }}\n                          >\n                            {\n                              <div className={classes.fullScreen}>\n                                <Grid container spacing={3}>\n                                  {\n                                    s?.banks.map(m =>\n                                      <Grid item xs=\"12\">\n                                        <BankDetails {...m} _id={s.humanFriendlyId || s._id} entity='suppliers' />\n                                      </Grid>)\n                                  }\n                                </Grid>\n                              </div>\n                            }\n                          </Dialog>\n                        }\n                      </>\n                    }\n                  />\n                </Box>\n              ))\n            ) : (\n              <Box mt={4}>\n                <Typography variant=\"body2\">No suppliers in system.</Typography>\n              </Box>\n            )}\n          </Box>\n\n          <Pagination />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default Suppliers;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/pages/Dashboard.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/index.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/Table.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-coupon.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-advertisement.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-advertisement-template.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/reseller-payment-update.js",["577","578","579"],"import { RS_PAYMENT_STATUS } from \"../index\";\nimport * as Yup from \"yup\";\nimport * as moment from \"moment\"\n\nconst resellerPaymentUpdate = {\n  _type: \"object\",\n\n  date: {\n    variant: \"outlined\",\n    type: \"date\",\n    defaultValue: \"\",\n    label: \"Date\",\n    breakpoints: { xs: 4 },\n    // validator: Yup.date().required(\"Required\").max(new Date(moment().endOf('day').valueOf()), `Date can't be in future`)\n  },\n  notes: {\n    type: \"text\",\n    label: \"Notes\",\n    validator: Yup.string(),\n    defaultValue: \"\",\n    breakpoints: { xs: 6 }\n  },\n  entity: {\n    _hide: () => true,\n    type: \"text\"\n  },\n  payments: {\n    _hide: () => true,\n    type: \"object\"\n  },\n  bonus: {\n    _hide: () => true,\n    type: \"object\"\n  },\n  orderIds: {\n    type: \"combobox\",\n    label: \"Order Ids\",\n    validator: Yup.array().of(Yup.string()),\n    defaultValue: \"\",\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      let payments = getValueAtPath([\"payments\"]);\n      const bonusIds = getValueAtPath([\"bonusIds\"]);\n      payments = payments.filter(p => currentValue?.includes(p?.orderSystemId) || currentValue?.includes(p?.order?._id) || bonusIds?.includes(p?.bonusId));\n      const entity = getValueAtPath([\"entity\"]);\n      const amountToPay = payments.reduce((total, next) => {\n        let value = entity === \"reseller\" ? next.resellerMargin : (next.supplierPrice * next.order?.items[0].quantity);\n        return total+value\n      }, 0);\n      setFieldValue(\"amountToPay\", amountToPay);\n    },\n    breakpoints: { xs: 6 }\n  },\n  bonusIds: {\n    _hide: () => true,\n    type: \"combobox\",\n    label: \"Bonus Ids\",\n    validator: Yup.array().of(Yup.string()),\n    defaultValue: \"\",\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      let payments = getValueAtPath([\"payments\"]);\n      const orderIds = getValueAtPath([\"orderIds\"]);\n      payments = payments.filter(p => orderIds?.includes(p?.orderSystemId) || orderIds?.includes(p.orderId) || currentValue?.includes(p.bonusId));\n      const entity = getValueAtPath([\"entity\"]);\n      const amountToPay = payments.reduce((total, next) => {\n        let value = entity === \"reseller\" ? next.resellerMargin : next.supplierPrice;\n        return total+value\n      }, 0);\n      setFieldValue(\"amountToPay\", amountToPay);\n    },\n    breakpoints: { xs: 6 }\n  },\n  amountToPay: {\n    type: \"text\",\n    label: \"Amount to pay\",\n    defaultValue: 0,\n    disabled: true,\n    breakpoints: { xs: 6 }\n  },\n  status: {\n    type: \"select\",\n    label: \"Status\",\n    options: [\n      ...RS_PAYMENT_STATUS.map(s => ({ label: s, value: s }))\n    ],\n    defaultValue: RS_PAYMENT_STATUS[1],\n    breakpoints: { xs: 4 },\n    validator: Yup.string().required(\"Required\")\n  },\n  mode: {\n    type: \"select\",\n    label: \"Payment Mode\",\n    options: [\n      { label: \"Cash\", value: \"cash\" },\n      { label: \"Card\", value: \"card\" },\n      { label: \"Bank\", value: \"bank\" },\n      { label: \"Wallet\", value: \"wallet\" },\n      { label: \"ATM\", value: \"atm\" }\n    ],\n    defaultValue: \"cash\",\n    breakpoints: { xs: 4 },\n    validator: Yup.string().required(\"Required\").when(\"status\", (v, s) => (v !== RS_PAYMENT_STATUS[2] && v !== RS_PAYMENT_STATUS[3] ? s.notRequired() : s)),\n    _hide: (currentPath, { backTracePath, getValueAtPath }) => {\n      return getValueAtPath(backTracePath(currentPath)).status !== RS_PAYMENT_STATUS[3] && getValueAtPath(backTracePath(currentPath)).status !== RS_PAYMENT_STATUS[2];\n    }\n  },\n  transactionId: {\n    type: \"text\",\n    label: \"Transaction Id\",\n    breakpoints: { xs: 4 },\n    _hide: (currentPath, { backTracePath, getValueAtPath }) => {\n      return false && (getValueAtPath(backTracePath(currentPath)).mode === \"cash\" || getValueAtPath(backTracePath(currentPath)).status !== RS_PAYMENT_STATUS[3] && getValueAtPath(backTracePath(currentPath)).status !== RS_PAYMENT_STATUS[2]);\n    },\n    // validator: Yup.string().required(\"Required\").when(\"mode\", (v, s) => (v === \"cash\" ? s.notRequired() : s)).when(\"status\", (v, s) => (v !== RS_PAYMENT_STATUS[3] && v !== RS_PAYMENT_STATUS[2] ? s.notRequired() : s))\n    validator: Yup.string()\n  },\n\n  bankDetails: {\n    _type: \"object\",\n    _label: \"Bank Details\",\n    _hide: (currentPath, { backTracePath, getValueAtPath }) => {\n      return false && !(getValueAtPath(backTracePath([\"mode\"])) === \"bank\" && (getValueAtPath(backTracePath([\"status\"])) === RS_PAYMENT_STATUS[3] || getValueAtPath(backTracePath([\"status\"])) === RS_PAYMENT_STATUS[2]));\n    },\n    beneficiaryName: {\n      type: \"text\",\n      label: \"Beneficiary Name\",\n      validator: Yup.string().matches(/^[a-zA-Z ]*$/, \"Please enter valid name\").required(\"Required\").when(\"mode\", (v, s) => (v !== \"bank\" ? s.notRequired() : s)).when(\"status\", (v, s) => (v !== RS_PAYMENT_STATUS[3] ? s.notRequired() : s)),\n      breakpoints: { xs: 6 }\n    },\n    bankName: {\n      type: \"text\",\n      label: \"Receiver Bank Name\",\n      defaultValue: \"\",\n      validator: Yup.string().matches(/^[a-zA-Z ]*$/, \"Please enter valid name\").required(\"Required\").when(\"mode\", (v, s) => (v !== \"bank\" ? s.notRequired() : s)).when(\"status\", (v, s) => (v !== RS_PAYMENT_STATUS[3] ? s.notRequired() : s)),\n      breakpoints: { xs: 6 }\n    },\n    iban: {\n      type: \"text\",\n      label: \"Receiver IBAN\",\n      defaultValue: \"\",\n      validator: Yup.string().min(5).max(23).required(\"Required\").when(\"mode\", (v, s) => (v !== \"bank\" ? s.notRequired() : s)).when(\"status\", (v, s) => (v !== RS_PAYMENT_STATUS[3] ? s.notRequired() : s)),\n      breakpoints: { xs: 6 }\n    }\n  }\n\n\n};\n\nexport default resellerPaymentUpdate;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/AdvertisementBannerCard.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/AdvertisementBannerTemplate.js",["580","581","582","583","584","585","586","587","588","589"],"import React, { useEffect, useState } from 'react'\nimport { Box, Card, CardActionArea, CardActions, CardContent, CardMedia, Chip, Grid, makeStyles, Typography } from '@material-ui/core'\nimport {Responsive, WidthProvider} from 'react-grid-layout';\nimport MaterialUIReactGridLayoutBuilder, {connectReactGridLayoutBuilder, withOpeningDock} from 'react-grid-layout-builder';\nimport cloneDeep from \"lodash/cloneDeep\";\nimport _ from 'lodash';\nimport AdBannerTemplateCard from './AdBannerTemplateCard';\nimport Icons from \"../../../constants/icons\";\nimport { addAdvertisementTemplate } from '../../../constants/forms';\nimport { FormDialog } from '../../Form';\nimport { Button, Icon, SectionHeader } from '../..';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Layout } from './Layouts';\nimport { toast } from 'react-toastify';\nimport { toggleProcessIndicator } from \"../../../store/reducers/app\";\nimport { get } from \"../../../services/api\";\n\nconst ResponsiveReactGridLayout = connectReactGridLayoutBuilder(WidthProvider(Responsive));\n\nconst addAdvertisementForm = cloneDeep(addAdvertisementTemplate);\n\nconst useStyles = makeStyles(theme => ({\n  gridWrapper : {\n    margin: 'auto !important',\n    position: 'relative',\n\n    '&::before': {\n      content: '\"Screen Height\"',\n      position: 'absolute',\n      right: -100,\n      top: 10,\n      height: 470,\n      width: 50,\n      border: \"3px solid #999\",\n      borderLeft: 'none',\n      display: 'flex',\n      fontSize: 15,\n      alignItems: 'center',\n      textAlign: 'right',\n      color: \"#fff\"\n    },\n    '&::after': {\n      content: '\"Screen Height\"',\n      position: 'absolute',\n      left: -100,\n      top: 10,\n      height: 470,\n      width: 50,\n      border: \"3px solid #999\",\n      borderRight: 'none',\n      display: 'flex',\n      fontSize: 15,\n      alignItems: 'center',\n      color: \"#fff\"\n    }\n  },\n  layoutButtonWrapper: {\n    marginTop: 15,\n    textAlign: \"right\"\n  }\n}));\n\nconst AdvertisementBannerTemplate = ({ getBannerData, defaultBanner, permissions, showScreen, categories, subcategories}) => {\n  const state = useSelector(state => state);\n  const [collections, setCollections] = useState(null);\n  const subSubcategories = state[\"sub-subcategories\"];\n\n  const [gridLayout, setGridLayout] = useState({...Layout})\n\n  const [gridComponents, setGridComponents] = useState([...Layout.layouts.lg])\n  const [errors, setErrors] = useState([])\n\n  const [openFormDialog, setOpenFormDialog] = useState()\n  const [selectedReactGrid, setSelectedReactGrid] = useState()\n  const [selectedReactGridData, setSelectedReactGridData] = useState()\n\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  useEffect(() => {\n    dispatch(toggleProcessIndicator(true));\n    Promise.all([get.allCollections({ params: { status:\"Active\" } })])\n      .then(resp => {\n        setCollections(resp[0]);\n      })\n      .catch(console.log)\n      .finally(() => dispatch(toggleProcessIndicator(false)));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if(defaultBanner && defaultBanner?.layouts) {\n      setGridComponents(defaultBanner?.layouts?.lg)\n      setGridLayout({...defaultBanner })\n    }\n    else {\n      setGridLayout({...Layout })\n\n    }\n  }, [defaultBanner])\n\n  useEffect(() => {\n    if (!categories || !categories.length) return;\n    const categoryOptions = categories.filter(s=>s.status === 'Active').map(c => ({ label: c.name, value: c._id }));\n    addAdvertisementForm.category.options = categoryOptions;\n\n    if (!subcategories || !subcategories.length) return;\n    const subcategoryOptions = subcategories.filter(s=>s.status === 'Active').map(c => ({ label: c.name, value: c._id, category: c.category }));\n    addAdvertisementForm.subcategory.options = (path, { getValueAtPath }) =>\n      subcategoryOptions.filter(c => c.category === getValueAtPath([\"category\"]));\n\n    if (!subSubcategories || !subSubcategories.length) return;\n    const subSubcategoryOptions = subSubcategories.filter(s=>s.status === 'Active').map(c => ({\n      label: c.name,\n      value: c._id,\n      subcategory: c.subcategory\n    }));\n    addAdvertisementForm.subSubcategory.options = (path, { getValueAtPath }) =>\n      subSubcategoryOptions.filter(c => c.subcategory === getValueAtPath([\"subcategory\"]));\n\n    if (!collections || !collections.length) return;\n    const collectionOptions = collections.map(c => ({\n      label: c.name,\n      value: c._id,\n      category: c.category,\n      subcategory: c.subcategory,\n      subSubcategory: c.subSubcategory\n    }));\n    const collectionOptionsFilter = (path, { getValueAtPath }) =>\n      collectionOptions.filter(c => {\n        const subSubcategory = getValueAtPath([\"subSubcategory\"]);\n        if (subSubcategory) return c.subSubcategory === subSubcategory;\n        const subcategory = getValueAtPath([\"subcategory\"]);\n        if (subcategory) return c.subcategory === subcategory;\n        const category = getValueAtPath([\"category\"]);\n        if (category) return c.category === category;\n        return false;\n      });\n    addAdvertisementForm._collection.options = collectionOptionsFilter;\n  }, [categories, subcategories, subSubcategories, collections]);\n\n  const updateConfig = (newGridLayout) => {\n    // setGridLayout({...newGridLayout});\n  }\n\n  const updateConfigLayout = (newGridLayout) => {\n    setGridLayout({...gridLayout, layouts: {lg: newGridLayout} })\n\n  }\n\n  const _addComponent = () => {\n    const tempLayout = gridLayout?.layouts?.lg || []\n    const newLayout = {\n      \"x\": 0,\n      \"y\": gridLayout.layouts.lg[gridLayout.layouts.lg.length - 1].y,\n      \"w\": 12,\n      \"h\": 4,\n      \"i\": `${gridLayout.layouts.lg.length}`,\n      \"static\": false,\n      \"minH\": 1,\n      \"maxH\": 8\n    }\n    tempLayout.push(newLayout)\n    setGridLayout({...gridLayout, layouts: {lg: tempLayout,} })\n    setGridComponents([...gridComponents,{...newLayout}])\n  }\n\n  const _removeComponent = (index) => {\n    const tempLayout = gridLayout.layouts.lg\n    const tempLayoutComp = gridComponents\n    tempLayout.splice(index, 1)\n    tempLayoutComp.splice(index, 1)\n    tempLayout.forEach((e, i) => {\n      e.i = `${i}`\n    })\n    tempLayoutComp.forEach((e, i) => {\n      e.i = `${i}`\n    })\n    setGridLayout({...gridLayout, layouts: {lg: tempLayout} })\n    setGridComponents(tempLayoutComp)\n  }\n\n  const _addAdvertisement = (index, data) => {\n    setOpenFormDialog(false)\n    const tempLayout = gridComponents\n    tempLayout[index] = {...tempLayout[index], data  }\n\n    setGridComponents(tempLayout)\n    setGridLayout({...gridLayout})\n  }\n\n  const _saveTemplate = () => {\n    let errorTemp = []\n    const finalLayout = gridComponents.map((ly, i) => {\n      if(!ly.data) errorTemp[i] = true\n      else errorTemp[i] = false\n      return ({\n      ...ly,\n      coords: {\n        w: gridLayout.layouts.lg[i].w,\n        h: gridLayout.layouts.lg[i].h,\n        i: gridLayout.layouts.lg[i].i,\n        x: gridLayout.layouts.lg[i].x,\n        y: gridLayout.layouts.lg[i].y\n      }\n      })\n    })\n    setErrors(errorTemp)\n    if(errorTemp.filter(e => !!e).length) {\n      toast.error('Add all the images!')\n      return\n    }\n    getBannerData(finalLayout)\n\n  }\n\n  const _openFormDialogBox = (i) => {\n    setSelectedReactGrid(i)\n    let gridData = gridComponents[i]?.data\n    gridData = {\n      ...gridData,\n      category: gridData?.category ? gridData?.category._id : '',\n      subcategory: gridData?.subcategory ? gridData?.subcategory._id : '',\n      subSubcategory: gridData?.subSubcategory ? gridData?.subSubcategory._id : '',\n      _collection: gridData?._collection ? gridData?._collection._id : '',\n      product: gridData?.product ? gridData?.product._id : '',\n    }\n    setSelectedReactGridData(gridData)\n    setOpenFormDialog(true)\n  }\n  return (\n    <>\n      <SectionHeader\n        icon={Icons.ads}\n        label='Advertisement'\n        alignItems={'flex-start'}\n        rightComponent={\n          <>\n            <div>\n              <Grid>\n                <Button style={{marginLeft: 10}}\n                variant=\"outlined\"\n                onClick={showScreen}>\n                  Cancel\n                </Button>\n                <Button style={{marginLeft: 10}}\n                // size=\"small\"\n                onClick={_saveTemplate}>\n                  Save\n                </Button>\n              </Grid>\n              <Grid className={classes.layoutButtonWrapper}>\n                <Button\n                startIcon={<Icon path={Icons.add} />}\n                variant=\"outlined\" size=\"small\"\n                onClick={_addComponent}\n              >{'Add Layout'}</Button>\n              </Grid>\n            </div>\n\n          </>\n        }\n      />\n\n      <Grid item xs={12} style={{backgroundColor: '#777777', padding: \"30px 0\", minHeight: 550}} >\n        <Grid item xs={12} style={{margin: 15}}>\n          <Typography>The size is adjusted according to screen size - 414x680 (W x H)</Typography>\n        </Grid>\n        <Grid item xs={3} className={`${classes.gridWrapper}`} style={{border: \"3px dashed #999\"}}>\n          <div >\n            <ResponsiveReactGridLayout className=\"layout\"\n              {...gridLayout}\n              updateConfigFunc={updateConfig}\n              onLayoutChange={updateConfigLayout}\n              >\n\n              {_.map(gridLayout.layouts.lg, (l, i) => {\n                return (\n                  <AdBannerTemplateCard key={i} l={l} i={i}\n                  advertisement={gridComponents[i]?.data}\n\n                  actions={\n                    permissions.UPDATE && (\n                      <>\n                        <Button onClick={() => {\n                          _openFormDialogBox(i)\n                        }} icon={Icons.edit} />\n                        <Button onClick={() => {\n                          _removeComponent(i);\n                        }} icon={Icons.delete} />\n                      </>\n                    )\n                  }\n                  />\n                );\n              })}\n            </ResponsiveReactGridLayout>\n          </div>\n        </Grid>\n      </Grid>\n      <FormDialog\n        title=\"Add Image\"\n        buttonProps={{ icon: <></>}}\n        formProps={{\n          formConfig: addAdvertisementForm,\n          submitHandler: val => _addAdvertisement(selectedReactGrid, val),\n          uiProps: { ctaAreaBoxProps: { pt: 2 }, submitButtonText: 'Add' },\n          incomingValue: selectedReactGridData || {}\n        }}\n        dialogOpen={{\n          open: openFormDialog,\n          setOpen: setOpenFormDialog,\n          handleClose: () => {setOpenFormDialog(false)}\n        }}\n      />\n  </>\n  )\n}\nexport default AdvertisementBannerTemplate\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/Layouts.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-bonus.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Superuser.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Collection.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-order.js",["590"],"import * as Yup from \"yup\";\nimport { getDiscountedPrice, getErfaPrice } from \"../../utils\";\nimport { toast } from \"react-toastify\";\n\nconst getValues = getValueAtPath => {\n  const sizes = getValueAtPath([\"allSize\"]);\n  const supplierPrice = getValueAtPath([\"supplierPrice\"]);\n  const discountType = getValueAtPath([\"discountType\"]);\n  const discount = getValueAtPath([\"discount\"]);\n  const platformMarginType = getValueAtPath([\"platformMarginType\"]);\n  const platformMargin = getValueAtPath([\"platformMargin\"]);\n  const shippingFee = getValueAtPath([\"shippingFee\"]);\n  const resellerMargin = getValueAtPath([\"resellerMargin\"]);\n  const quantity = getValueAtPath([\"quantity\"]);\n  return {\n    quantity,\n    supplierPrice,\n    sizes,\n    shippingFee,\n    discountType,\n    discount,\n    platformMarginType,\n    platformMargin,\n    resellerMargin\n  };\n};\n\nconst saveAtLocalStorage = (data) => {\n  let lastData = JSON.parse(localStorage.getItem(\"add-order-admin\"));\n  localStorage.setItem(\"add-order-admin\", JSON.stringify({\n    ...lastData,\n    customer: { phone: { countryCode: \"+971\" } ,...lastData?.customer || {} }, ...data\n  }));\n};\n\nconst addOrder = {\n  _type: \"object\",\n\n  productCode: {\n    variant: \"outlined\",\n    type: \"text\",\n    label: \"Product Id\",\n\n    defaultValue: \"\",\n    validator: Yup.string()\n      .uppercase()\n      .length(6)\n      .matches(/^[A-Z0-9]+$/, \"Invalid code!\"),\n    disabled: true,\n    breakpoints: { xs: 4 }\n  },\n  name: {\n    type: \"text\",\n    label: \"Product name\",\n    disabled: true,\n    defaultValue: \"\",\n    validator: Yup.string().max(64, \"Too long!\").required(\"Required\"),\n\n    breakpoints: { xs: 7 }\n  },\n  supplierPrice: {\n    type: \"currency\",\n    label: \"Supplier Price\",\n    disabled: true,\n    defaultValue: \"\",\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      const { platformMarginType, platformMargin } = getValues(getValueAtPath);\n      setFieldValue(\"erfaPrice\", getErfaPrice(currentValue, platformMarginType, platformMargin) || \"\");\n    },\n    validator: Yup.number().positive().required(\"Required\"),\n\n    breakpoints: { xs: 6 }\n  },\n\n  platformMarginType: {\n    type: \"select\",\n    label: \"Platform Margin Type\",\n    options: [\n      { label: \"Fixed\", value: \"Fixed\" },\n      { label: \"Percentage\", value: \"Percentage\" }\n    ],\n    disabled: true,\n    defaultValue: \"Percentage\",\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      const { supplierPrice, platformMargin } = getValues(getValueAtPath);\n      setFieldValue(\"erfaPrice\", getErfaPrice(supplierPrice, currentValue, platformMargin) || \"\");\n      setFieldValue([\"platformMargin\"], \"\");\n    },\n    validator: Yup.string().required(\"Required\"),\n\n    breakpoints: { xs: 4 }\n  },\n  platformMargin: {\n    type: \"number\",\n    label: \"Platform Margin\",\n    disabled: true,\n    defaultValue: 0,\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      const { supplierPrice, platformMarginType } = getValues(getValueAtPath);\n      setFieldValue(\"erfaPrice\", getErfaPrice(supplierPrice, platformMarginType, currentValue) || \"\");\n    },\n    validator: Yup.number()\n      .required(\"Required\")\n      .when(\"platformMarginType\", (t, schema) => {\n        if (t === \"Percentage\") return schema.positive().min(0).max(100);\n        if (t === \"Fixed\")\n          schema.test(\n            \"is-less-than-supplier-price\",\n            \"Platform Margin can not be greater than product supplier price\",\n            (platformMargin, context) => (platformMargin || 0) <= (context.parent.supplierPrice || 0)\n          );\n        return schema;\n      }),\n\n    _hide: (currentPath, { backTracePath, getValueAtPath }) => {\n      return !getValueAtPath([\"platformMarginType\"]);\n    },\n    breakpoints: { xs: 3 }\n  },\n  erfaPrice: {\n    type: \"currency\",\n    label: \"ERFA Price\",\n    disabled: true,\n\n    defaultValue: \"\",\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      const { supplierPrice, discountType, discount, platformMarginType, platformMargin } = getValues(\n        getValueAtPath\n      );\n      setFieldValue(\n        \"discountedPrice\",\n        getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, discountType, discount) || \"\"\n      );\n    },\n    _getInitialValue: (currentPath, expectedValue, { backTracePath, getValueAtPath }) => {\n      const { supplierPrice, platformMarginType, platformMargin } = getValues(getValueAtPath);\n      return getErfaPrice(supplierPrice, platformMarginType, platformMargin) || \"\";\n    },\n    validator: Yup.number().positive().required(\"Required\"),\n\n    breakpoints: { xs: 5 }\n  },\n\n  discountType: {\n    type: \"select\",\n    label: \"Discount Type\",\n    options: [\n      { label: \"Fixed\", value: \"Fixed\" },\n      { label: \"Percentage\", value: \"Percentage\" }\n    ],\n    disabled: true,\n    defaultValue: \"Percentage\",\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      const { supplierPrice, discount, platformMarginType, platformMargin } = getValues(getValueAtPath);\n      setFieldValue(\n        \"discountedPrice\",\n        getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, currentValue, discount) || \"\"\n      );\n      setFieldValue([\"discount\"], \"\");\n    },\n    validator: Yup.string().required(\"Required\"),\n\n    breakpoints: { xs: 4 }\n  },\n  discount: {\n    type: \"number\",\n    label: \"Discount\",\n    disabled: true,\n    defaultValue: 0,\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      const { supplierPrice, discountType, platformMarginType, platformMargin } = getValues(getValueAtPath);\n      setFieldValue(\n        \"discountedPrice\",\n        getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, discountType, currentValue) ||\n        \"\"\n      );\n    },\n    validator: Yup.number()\n      .required(\"Required\")\n      .when(\"discountType\", (t, schema) => {\n        if (t === \"Percentage\") return schema.positive().min(0).max(100);\n        if (t === \"Fixed\")\n          schema.test(\n            \"is-less-than-supplier-price\",\n            \"Discount can not be greater than product supplier price\",\n            (discount, context) => (discount || 0) <= (context.parent.supplierPrice || 0)\n          );\n        return schema;\n      }),\n\n    _hide: (currentPath, { backTracePath, getValueAtPath }) => {\n      return !getValueAtPath([\"discountType\"]);\n    },\n    breakpoints: { xs: 3 }\n  },\n\n  discountedPrice: {\n    type: \"currency\",\n    label: \"Discounted Price\",\n    disabled: true,\n\n    defaultValue: \"\",\n    _getInitialValue: (currentPath, expectedValue, { backTracePath, getValueAtPath }) => {\n      const { supplierPrice, platformMarginType, platformMargin, discountType, discount } = getValues(\n        getValueAtPath\n      );\n      return (\n        getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, discountType, discount) || \"\"\n      );\n    },\n    validator: Yup.number()\n      .positive()\n      .required(\"Required\")\n      .test(\n        \"is-less-than--supplier-price\",\n        \"Discounted Price can not be less than supplier price\",\n        (v, context) => (v || 0) >= (context.parent.supplierPrice || 0)\n      ),\n\n    breakpoints: { xs: 5 }\n  },\n  eligibleForFreeShipping: {\n    type: \"checkbox\",\n    label: \"Eligible for Free Shipping?\",\n    disabled: true,\n    defaultValue: false,\n    validator: Yup.boolean().required(\"Required\"),\n\n    breakpoints: { xs: 12 }\n  },\n  sizes: {\n    _type: \"array\",\n    _label: \"Sizes and Availability\",\n    _hide: () => true,\n    size: {\n      type: \"text\",\n      label: \"Size\",\n\n      defaultValue: \"\",\n      validator: Yup.string().label(\"Size\").required(),\n\n      breakpoints: { xs: 4 }\n    },\n    stock: {\n      type: \"number\",\n      label: \"Stock\",\n\n      defaultValue: \"\",\n      validator: Yup.number().min(0).integer().label(\"Stock\").required(\"Required\"),\n\n      breakpoints: { xs: 3 }\n    }\n  },\n\n  size: {\n    type: \"select\",\n    label: \"Size\",\n    defaultValue: \"\",\n    options: (currentPath, { backTracePath, getValueAtPath }) => {\n      let sizes = getValueAtPath([\"sizes\"]);\n      return sizes && sizes.length ? sizes.filter(s => s.stock > 0).map(s => {\n        return { label: s.size, value: s.size };\n      }) : [];\n    },\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      saveAtLocalStorage({ size: currentValue });\n      setFieldValue(\"quantity\", 0);\n      setFieldValue(\"shippingFee\", 0);\n      setFieldValue(\"resellerMargin\", 0);\n    },\n    validator: Yup.string().label(\"Size\").required(),\n    breakpoints: { xs: 6 }\n  },\n  quantity: {\n    type: \"number\",\n    label: \"Quantity\",\n    defaultValue: 0,\n    validator: Yup.number().min(1).integer().label(\"Quantity\").required(\"Required\"),\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      saveAtLocalStorage({ quantity: currentValue });\n      let size = getValueAtPath([\"size\"]);\n      let sizes = getValueAtPath([\"sizes\"]);\n      setFieldValue(\"shippingFee\", 0);\n      setFieldValue(\"resellerMargin\", 0);\n      let s = sizes.find(s => s.size === size);\n      const {\n        discountType,\n        shippingFee,\n        resellerMargin,\n        platformMargin,\n        supplierPrice,\n        discount,\n        platformMarginType\n      } = getValues(getValueAtPath);\n      let discountedPrice = getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, discountType, discount);\n      if (s && currentValue > s.stock) {\n        toast.error(`Sorry we have only ${s.stock} item left!!`);\n        setFieldValue(\"quantity\", s.stock);\n        setFieldValue(\n          \"orderTotal\",\n          Number(((discountedPrice) * (s.stock)) + (resellerMargin || 0) + (shippingFee || 0)).toFixed(2).toString().replace(/\\.00$/, \"\") ||\n          \"\"\n        );\n      } else {\n        setFieldValue(\n          \"orderTotal\",\n          Number(((discountedPrice) * (currentValue)) + (resellerMargin || 0) + (shippingFee || 0)).toFixed(2).toString().replace(/\\.00$/, \"\") ||\n          \"\"\n        );\n      }\n\n    },\n    breakpoints: { xs: 6 }\n  },\n  shippingFee: {\n    type: \"number\",\n    label: \"Shipping Fee\",\n    defaultValue: 0,\n    validator: Yup.number().min(0).integer().label(\"Shipping Fee\").required(\"Required\"),\n    _hide: (currentPath, { backTracePath, getValueAtPath }) => {\n      return getValueAtPath([\"eligibleForFreeShipping\"]);\n    },\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      saveAtLocalStorage({ shippingFee: currentValue });\n      setFieldValue(\"resellerMargin\", 0);\n      const {\n        discountType,\n        resellerMargin,\n        platformMargin,\n        supplierPrice,\n        quantity,\n        discount,\n        platformMarginType\n      } = getValues(getValueAtPath);\n      let discountedPrice = getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, discountType, discount);\n      setFieldValue(\n        \"orderTotal\",\n        Number(((discountedPrice) * (quantity)) + (resellerMargin || 0) + (currentValue)).toFixed(2).toString().replace(/\\.00$/, \"\") ||\n        \"\"\n      );\n    },\n    breakpoints: { xs: 6 }\n  },\n  resellerMargin: {\n    type: \"number\",\n    label: \"Reseller Margin\",\n    defaultValue: 0,\n    validator: Yup.number().min(0).integer().label(\"Reseller Margin\").required(\"Required\"),\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      saveAtLocalStorage({ resellerMargin: currentValue });\n      const {\n        discountType,\n        resellerMargin,\n        platformMargin,\n        supplierPrice,\n        quantity,\n        discount,\n        shippingFee,\n        platformMarginType\n      } = getValues(getValueAtPath);\n      let discountedPrice = getDiscountedPrice(supplierPrice, platformMarginType, platformMargin, discountType, discount);\n      setFieldValue(\n        \"orderTotal\",\n        Number((discountedPrice) * (quantity) + (shippingFee || 0) + (currentValue)).toFixed(2).toString().replace(/\\.00$/, \"\") ||\n        \"\"\n      );\n    },\n    breakpoints: { xs: 6 }\n  },\n  orderTotal: {\n    type: \"number\",\n    label: \"Order Total\",\n    disabled: true,\n    defaultValue: \"\",\n    breakpoints: { xs: 6 }\n  },\n  lastOrder: {\n    type: \"text\",\n    label: \"Previous Order Id\",\n    defaultValue: \"\",\n    validator: Yup.string().required(\"Required\"),\n    breakpoints: { xs: 6 },\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      saveAtLocalStorage({ lastOrder: currentValue });\n    }\n  },\n  reseller: {\n    type: \"text\",\n    label: \"Reseller Id\",\n    defaultValue: \"\",\n    validator: Yup.string().max(64, \"Too long!\").required(\"Required\"),\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      saveAtLocalStorage({ reseller: currentValue });\n    },\n    breakpoints: { xs: 12 }\n  },\n  customer: {\n    _type: \"object\",\n    _label: \"Customer Details\",\n    name: {\n      type: \"text\",\n      label: \"Customer name\",\n\n      defaultValue: \"\",\n      validator: Yup.string().max(64, \"Too long!\").required(\"Required\"),\n      onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n        let lastData = JSON.parse(localStorage.getItem(\"add-order-admin\"));\n        saveAtLocalStorage({ customer: { ...lastData?.customer, name: currentValue } });\n      },\n      breakpoints: { xs: 12 }\n    },\n    phone: {\n      _type: \"object\",\n      _label: \"Phone\",\n\n      countryCode: {\n        type: \"select\",\n        label: \"Country Code\",\n        options: [\n          { label: \"+971 UAE\", value: \"+971\" },\n          { label: \"+91 India\", value: \"+91\" }\n        ],\n        disabled: true,\n\n        defaultValue: \"+971\",\n        onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n          let lastData = JSON.parse(localStorage.getItem(\"add-order-admin\"));\n          saveAtLocalStorage({\n            customer: {\n              ...lastData?.customer,\n              phone: { ...lastData.customer.phone, countryCode: currentValue }\n            }\n          });\n          setFieldValue(backTracePath(currentPath, \"areaCode\"), \"\");\n        },\n        validator: Yup.string().label(\"Country code\").required(\"Required\"),\n\n        breakpoints: { xs: 3 }\n      },\n      areaCode: {\n        type: \"number\",\n        label: \"Area Code\",\n\n        defaultValue: \"\",\n        validator: Yup.string()\n          .required(\"Required\")\n          .when(\"countryCode\", (v, s) => (v === \"+91\" ? s.notRequired() : s)),\n        onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n          let lastData = JSON.parse(localStorage.getItem(\"add-order-admin\"));\n          saveAtLocalStorage({\n            customer: {\n              ...lastData?.customer,\n              phone: { ...lastData.customer.phone, areaCode: currentValue }\n            }\n          });\n        },\n        /*_hide: (currentPath, { backTracePath, getValueAtPath }) => {\n          return getValueAtPath(backTracePath(currentPath)).countryCode !== \"+971\";\n        },*/\n        breakpoints: { xs: 3 }\n      },\n      number: {\n        type: \"number\",\n        label: \"Phone\",\n\n        defaultValue: \"\",\n        validator: Yup.string().min(7, \"Must be exactly 7 digits\").max(7, \"Must be exactly 7 digits\").required(\"Required\"),\n        onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n          let lastData = JSON.parse(localStorage.getItem(\"add-order-admin\"));\n          saveAtLocalStorage({\n            customer: {\n              ...lastData?.customer,\n              phone: { ...lastData.customer.phone, number: currentValue }\n            }\n          });\n        },\n        breakpoints: { xs: 6 }\n      }\n    }\n  },\n  shippingAddress: {\n    type: \"address\",\n    label: \"Address\",\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n      saveAtLocalStorage({ shippingAddress: currentValue });\n    },\n    defaultValue: \"\",\n    validator: Yup.object().required(\"Required\"),\n\n    breakpoints: { xs: 12 }\n  }\n};\n\nexport default addOrder;\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/SubSubcategory.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Subcategory.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Category.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-product.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-bank.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Supplier.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/BankDetails.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-supplier.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-reseller.js",["591"],"import * as Yup from 'yup'\n\nimport { AGE_GROUPS, GENDERS, UAE_AREAS, UAE_CITIES } from \"../index\";\n\nconst addReseller = {\n  _type: 'object',\n\n  humanFriendlyId: {\n    type:\"text\",\n    label: \"Reseller Id\",\n    disabled: true,\n    breakpoints: { xs: 4 },\n  },\n  firstName: {\n    type: 'text',\n    label: 'First name',\n\n    defaultValue: '',\n    validator: Yup.string().max(64, 'Too long!').required('Required'),\n\n    breakpoints: { xs: 4 },\n  },\n  lastName: {\n    type: 'text',\n    label: 'Last name',\n\n    defaultValue: '',\n    validator: Yup.string().max(64, 'Too long!'),\n\n    breakpoints: { xs: 4 },\n  },\n  gender: {\n    type: 'select',\n    label: 'Gender',\n    options: GENDERS,\n\n    defaultValue: '',\n    validator: Yup.string().max(64, 'Too long!'),\n\n    breakpoints: { xs: 2 },\n  },\n  ageGroup: {\n    type: 'select',\n    label: 'Age Group',\n    options: AGE_GROUPS,\n\n    defaultValue: '',\n    validator: Yup.string().max(64, 'Too long!'),\n\n    breakpoints: { xs: 4 },\n  },\n  occupation: {\n    type: 'select',\n    label: 'Occupation',\n    options: [\n      {label: 'Student', value: 'student'},\n      {label: 'Job', value: 'job'},\n      {label: 'Teacher', value: 'teacher'},\n      {label: 'Housewife', value: 'housewife'},\n      {label: 'Business', value: 'business'},\n      {label: 'Other', value: 'other'},\n    ],\n    defaultValue: '',\n    validator: Yup.string().max(64, 'Too long!'),\n\n    breakpoints: { xs: 4 },\n  },\n  language: {\n    type: 'select',\n    label: 'Language',\n    options: [\n      { label: 'English', value: 'English' },\n      { label: 'Arabic', value: 'Arabic' },\n      { label: 'Hindi', value: 'Hindi' },\n      { label: 'Urdu', value: 'Urdu' },\n      { label: 'Tagalog', value: 'Tagalog' },\n      { label: 'Malay', value: 'Malay' },\n    ],\n\n    defaultValue: 'English',\n    disabled: true,\n    validator: Yup.string().max(64, 'Too long!'),\n\n    breakpoints: { xs: 4 },\n  },\n  displayName: {\n    type: 'text',\n    label: 'Display/Shop name',\n\n    defaultValue: '',\n    validator: Yup.string().max(64, 'Too long!'),\n\n    breakpoints: { xs: 6 },\n  },\n  email: {\n    type: 'email',\n    label: 'Email',\n\n    defaultValue: '',\n    validator: Yup.string().email('Invalid email'),\n\n    breakpoints: { xs: 6 },\n  },\n  city: {\n    type: 'autoComplete',\n    label: 'City',\n    options: UAE_CITIES,\n\n    defaultValue: '',\n    onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getDefaultValue }) => {\n      setFieldValue(['area'], '')\n    },\n    validator: Yup.string().required('Required'),\n\n    breakpoints: { xs: 6 },\n  },\n  country: {\n    type: 'text',\n    label: 'Country',\n    disabled:true,\n    defaultValue: 'UAE',\n    validator: Yup.string().max(64, 'Too long!'),\n\n    breakpoints: { xs: 6 },\n  },\n  phone: {\n    _type: 'object',\n    _label: 'Phone',\n\n    countryCode: {\n      type: 'select',\n      label: 'Country Code',\n      options: [\n        { label: '+971 UAE', value: '+971' },\n        { label: '+91 India', value: '+91' },\n      ],\n      disabled: true,\n\n      defaultValue: '+971',\n      onChange: (currentPath, currentValue, { setFieldValue, backTracePath, getValueAtPath }) => {\n        setFieldValue(backTracePath(currentPath, 'areaCode'), '')\n      },\n      validator: Yup.string().label('Country code').required('Required'),\n\n      breakpoints: { xs: 3 },\n    },\n    areaCode: {\n      type: 'number',\n      label: 'Area Code',\n\n      defaultValue: '',\n      validator: Yup.string()\n        .required('Required')\n        .when('countryCode', (v, s) => (v === '+91' ? s.notRequired() : s)),\n\n      _hide: (currentPath, { backTracePath, getValueAtPath }) => {\n        return getValueAtPath(backTracePath(currentPath)).countryCode !== '+971'\n      },\n      breakpoints: { xs: 3 },\n    },\n    number: {\n      type: 'number',\n      label: 'Phone',\n\n      defaultValue: '',\n      validator: Yup.string().required('Required'),\n\n      breakpoints: { xs: 6 },\n    },\n  },\n  avatar: {\n    type: 'file',\n    label: 'Avatar',\n\n    defaultValue: '',\n    validator: Yup.mixed(),\n\n    breakpoints: { xs: 12 },\n  },\n  shippingAddresses: {\n    _type: 'array',\n    _label: 'Shipping Addresses',\n\n    address: {\n      type: 'shippingAddress',\n      label: 'Address',\n      multiline: true,\n\n      defaultValue: '',\n      validator: Yup.object().label('Address'),\n\n      breakpoints: { xs: 12 },\n    },\n  },\n}\n\nexport default addReseller\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-category.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-collection.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-subcategory.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add--sub-subcategory.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-settings.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/add-superuser.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/login.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-order-customer.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/forms/update-order-notes.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/Advertisement.js",[],"/Users/piyushrathor/Downloads/erfa_frontend-uat/src/components/entitywise/AdvertisementBannerTemplate/AdBannerTemplateCard.js",["592","593"],"import { Box, Card, CardActions, CardMedia, makeStyles, Tooltip, Typography } from '@material-ui/core';\nimport React, { useRef } from 'react'\nimport Inputs from '../../Form/Inputs';\n\nconst useStyles = makeStyles(theme => ({\n  bottomButtons : {\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    width: '100%',\n    backgroundColor: \"#00000099\",\n    flexDirection: 'row-reverse',\n    justifyContent: 'center'\n  }\n}));\n\nconst AdBannerTemplateCard = ({advertisement: c, actions, l, i, children, ...props}) => {\n\n  const classes = useStyles();\n  return (\n    <Tooltip title={`${parseInt(l.w/12 * 414)}x${parseInt(l.h/12 * 680)}`} placement=\"right\" interactive>\n      <Card  about className={`${l.static ? \"static\" : \"\"}`} {...props}>\n        <CardActions style={{ padding: 0, position: 'relative', paddingTop: 0, height: 'calc(100% - 0px)' }} >\n          <CardMedia image={c?.banner?.thumbnail || 'https://via.placeholder.com/300?text=Upload Image'} style={{height: '100%', width: '100%', margin: 0}} alt=\"dfs\" />\n        </CardActions>\n        <CardActions className={classes.bottomButtons}>\n          <Typography gutterBottom variant=\"body1\" noWrap title={c?.name}>\n            {c?.target}\n          </Typography>\n          <Box flexGrow={1} />\n          {actions}\n        </CardActions>\n        {children}\n      </Card>\n    </Tooltip>\n  );\n}\n\nexport default AdBannerTemplateCard\n","/Users/piyushrathor/Downloads/erfa_frontend-uat/src/constants/tables/index.js",[],{"ruleId":"594","replacedBy":"595"},{"ruleId":"596","replacedBy":"597"},{"ruleId":"598","severity":1,"message":"599","line":480,"column":6,"nodeType":"600","endLine":480,"endColumn":12,"suggestions":"601"},{"ruleId":"602","severity":1,"message":"603","line":2,"column":10,"nodeType":"604","messageId":"605","endLine":2,"endColumn":15},{"ruleId":"602","severity":1,"message":"606","line":5,"column":10,"nodeType":"604","messageId":"605","endLine":5,"endColumn":16},{"ruleId":"602","severity":1,"message":"607","line":6,"column":10,"nodeType":"604","messageId":"605","endLine":6,"endColumn":20},{"ruleId":"602","severity":1,"message":"608","line":6,"column":22,"nodeType":"604","messageId":"605","endLine":6,"endColumn":25},{"ruleId":"602","severity":1,"message":"609","line":7,"column":10,"nodeType":"604","messageId":"605","endLine":7,"endColumn":18},{"ruleId":"602","severity":1,"message":"610","line":8,"column":10,"nodeType":"604","messageId":"605","endLine":8,"endColumn":19},{"ruleId":"602","severity":1,"message":"611","line":9,"column":10,"nodeType":"604","messageId":"605","endLine":9,"endColumn":20},{"ruleId":"602","severity":1,"message":"612","line":13,"column":8,"nodeType":"604","messageId":"605","endLine":13,"endColumn":17},{"ruleId":"602","severity":1,"message":"613","line":14,"column":8,"nodeType":"604","messageId":"605","endLine":14,"endColumn":16},{"ruleId":"602","severity":1,"message":"614","line":16,"column":8,"nodeType":"604","messageId":"605","endLine":16,"endColumn":18},{"ruleId":"602","severity":1,"message":"615","line":17,"column":8,"nodeType":"604","messageId":"605","endLine":17,"endColumn":21},{"ruleId":"602","severity":1,"message":"616","line":18,"column":8,"nodeType":"604","messageId":"605","endLine":18,"endColumn":24},{"ruleId":"602","severity":1,"message":"617","line":19,"column":8,"nodeType":"604","messageId":"605","endLine":19,"endColumn":19},{"ruleId":"602","severity":1,"message":"618","line":20,"column":8,"nodeType":"604","messageId":"605","endLine":20,"endColumn":18},{"ruleId":"602","severity":1,"message":"619","line":21,"column":8,"nodeType":"604","messageId":"605","endLine":21,"endColumn":16},{"ruleId":"602","severity":1,"message":"620","line":22,"column":8,"nodeType":"604","messageId":"605","endLine":22,"endColumn":15},{"ruleId":"602","severity":1,"message":"621","line":23,"column":8,"nodeType":"604","messageId":"605","endLine":23,"endColumn":22},{"ruleId":"602","severity":1,"message":"622","line":24,"column":8,"nodeType":"604","messageId":"605","endLine":24,"endColumn":13},{"ruleId":"602","severity":1,"message":"623","line":25,"column":8,"nodeType":"604","messageId":"605","endLine":25,"endColumn":14},{"ruleId":"602","severity":1,"message":"624","line":26,"column":8,"nodeType":"604","messageId":"605","endLine":26,"endColumn":18},{"ruleId":"602","severity":1,"message":"625","line":27,"column":8,"nodeType":"604","messageId":"605","endLine":27,"endColumn":16},{"ruleId":"602","severity":1,"message":"626","line":28,"column":8,"nodeType":"604","messageId":"605","endLine":28,"endColumn":25},{"ruleId":"602","severity":1,"message":"627","line":29,"column":8,"nodeType":"604","messageId":"605","endLine":29,"endColumn":25},{"ruleId":"602","severity":1,"message":"628","line":30,"column":8,"nodeType":"604","messageId":"605","endLine":30,"endColumn":13},{"ruleId":"602","severity":1,"message":"629","line":31,"column":8,"nodeType":"604","messageId":"605","endLine":31,"endColumn":15},{"ruleId":"602","severity":1,"message":"630","line":32,"column":8,"nodeType":"604","messageId":"605","endLine":32,"endColumn":24},{"ruleId":"602","severity":1,"message":"631","line":33,"column":8,"nodeType":"604","messageId":"605","endLine":33,"endColumn":23},{"ruleId":"602","severity":1,"message":"632","line":34,"column":8,"nodeType":"604","messageId":"605","endLine":34,"endColumn":28},{"ruleId":"602","severity":1,"message":"633","line":35,"column":8,"nodeType":"604","messageId":"605","endLine":35,"endColumn":15},{"ruleId":"602","severity":1,"message":"634","line":3,"column":10,"nodeType":"604","messageId":"605","endLine":3,"endColumn":21},{"ruleId":"602","severity":1,"message":"635","line":3,"column":23,"nodeType":"604","messageId":"605","endLine":3,"endColumn":34},{"ruleId":"602","severity":1,"message":"636","line":11,"column":3,"nodeType":"604","messageId":"605","endLine":11,"endColumn":9},{"ruleId":"602","severity":1,"message":"637","line":12,"column":3,"nodeType":"604","messageId":"605","endLine":12,"endColumn":16},{"ruleId":"602","severity":1,"message":"638","line":13,"column":3,"nodeType":"604","messageId":"605","endLine":13,"endColumn":16},{"ruleId":"602","severity":1,"message":"639","line":14,"column":3,"nodeType":"604","messageId":"605","endLine":14,"endColumn":20},{"ruleId":"602","severity":1,"message":"640","line":15,"column":3,"nodeType":"604","messageId":"605","endLine":15,"endColumn":14},{"ruleId":"602","severity":1,"message":"641","line":16,"column":3,"nodeType":"604","messageId":"605","endLine":16,"endColumn":12},{"ruleId":"602","severity":1,"message":"642","line":19,"column":8,"nodeType":"604","messageId":"605","endLine":19,"endColumn":13},{"ruleId":"602","severity":1,"message":"643","line":20,"column":10,"nodeType":"604","messageId":"605","endLine":20,"endColumn":28},{"ruleId":"602","severity":1,"message":"644","line":20,"column":30,"nodeType":"604","messageId":"605","endLine":20,"endColumn":44},{"ruleId":"602","severity":1,"message":"608","line":20,"column":46,"nodeType":"604","messageId":"605","endLine":20,"endColumn":49},{"ruleId":"602","severity":1,"message":"645","line":21,"column":10,"nodeType":"604","messageId":"605","endLine":21,"endColumn":32},{"ruleId":"602","severity":1,"message":"646","line":24,"column":18,"nodeType":"604","messageId":"605","endLine":24,"endColumn":24},{"ruleId":"602","severity":1,"message":"647","line":24,"column":47,"nodeType":"604","messageId":"605","endLine":24,"endColumn":60},{"ruleId":"602","severity":1,"message":"648","line":25,"column":10,"nodeType":"604","messageId":"605","endLine":25,"endColumn":26},{"ruleId":"602","severity":1,"message":"649","line":26,"column":10,"nodeType":"604","messageId":"605","endLine":26,"endColumn":22},{"ruleId":"602","severity":1,"message":"650","line":27,"column":8,"nodeType":"604","messageId":"605","endLine":27,"endColumn":19},{"ruleId":"602","severity":1,"message":"651","line":28,"column":10,"nodeType":"604","messageId":"605","endLine":28,"endColumn":20},{"ruleId":"602","severity":1,"message":"652","line":30,"column":10,"nodeType":"604","messageId":"605","endLine":30,"endColumn":15},{"ruleId":"602","severity":1,"message":"653","line":32,"column":8,"nodeType":"604","messageId":"605","endLine":32,"endColumn":20},{"ruleId":"602","severity":1,"message":"654","line":34,"column":7,"nodeType":"604","messageId":"605","endLine":34,"endColumn":22},{"ruleId":"602","severity":1,"message":"655","line":13,"column":8,"nodeType":"604","messageId":"605","endLine":13,"endColumn":21},{"ruleId":"602","severity":1,"message":"656","line":7,"column":18,"nodeType":"604","messageId":"605","endLine":7,"endColumn":29},{"ruleId":"602","severity":1,"message":"636","line":7,"column":31,"nodeType":"604","messageId":"605","endLine":7,"endColumn":37},{"ruleId":"602","severity":1,"message":"657","line":7,"column":39,"nodeType":"604","messageId":"605","endLine":7,"endColumn":45},{"ruleId":"602","severity":1,"message":"648","line":8,"column":10,"nodeType":"604","messageId":"605","endLine":8,"endColumn":26},{"ruleId":"602","severity":1,"message":"658","line":9,"column":10,"nodeType":"604","messageId":"605","endLine":9,"endColumn":24},{"ruleId":"602","severity":1,"message":"659","line":75,"column":7,"nodeType":"604","messageId":"605","endLine":75,"endColumn":19},{"ruleId":"602","severity":1,"message":"660","line":2,"column":49,"nodeType":"604","messageId":"605","endLine":2,"endColumn":57},{"ruleId":"598","severity":1,"message":"661","line":133,"column":6,"nodeType":"600","endLine":133,"endColumn":8,"suggestions":"662"},{"ruleId":"602","severity":1,"message":"663","line":18,"column":10,"nodeType":"604","messageId":"605","endLine":18,"endColumn":14},{"ruleId":"602","severity":1,"message":"664","line":20,"column":37,"nodeType":"604","messageId":"605","endLine":20,"endColumn":56},{"ruleId":"602","severity":1,"message":"665","line":20,"column":90,"nodeType":"604","messageId":"605","endLine":20,"endColumn":109},{"ruleId":"602","severity":1,"message":"666","line":27,"column":55,"nodeType":"604","messageId":"605","endLine":27,"endColumn":59},{"ruleId":"602","severity":1,"message":"610","line":28,"column":10,"nodeType":"604","messageId":"605","endLine":28,"endColumn":19},{"ruleId":"602","severity":1,"message":"667","line":33,"column":7,"nodeType":"604","messageId":"605","endLine":33,"endColumn":27},{"ruleId":"602","severity":1,"message":"668","line":34,"column":7,"nodeType":"604","messageId":"605","endLine":34,"endColumn":30},{"ruleId":"598","severity":1,"message":"669","line":77,"column":6,"nodeType":"600","endLine":77,"endColumn":8,"suggestions":"670"},{"ruleId":"602","severity":1,"message":"671","line":90,"column":11,"nodeType":"604","messageId":"605","endLine":90,"endColumn":32},{"ruleId":"602","severity":1,"message":"672","line":104,"column":11,"nodeType":"604","messageId":"605","endLine":104,"endColumn":34},{"ruleId":"673","severity":1,"message":"674","line":43,"column":33,"nodeType":"675","messageId":"676","endLine":43,"endColumn":35},{"ruleId":"673","severity":1,"message":"677","line":44,"column":37,"nodeType":"675","messageId":"676","endLine":44,"endColumn":39},{"ruleId":"602","severity":1,"message":"678","line":24,"column":9,"nodeType":"604","messageId":"605","endLine":24,"endColumn":16},{"ruleId":"673","severity":1,"message":"674","line":46,"column":33,"nodeType":"675","messageId":"676","endLine":46,"endColumn":35},{"ruleId":"673","severity":1,"message":"677","line":47,"column":34,"nodeType":"675","messageId":"676","endLine":47,"endColumn":36},{"ruleId":"673","severity":1,"message":"677","line":89,"column":27,"nodeType":"675","messageId":"676","endLine":89,"endColumn":29},{"ruleId":"673","severity":1,"message":"677","line":91,"column":37,"nodeType":"675","messageId":"676","endLine":91,"endColumn":39},{"ruleId":"602","severity":1,"message":"679","line":11,"column":10,"nodeType":"604","messageId":"605","endLine":11,"endColumn":25},{"ruleId":"602","severity":1,"message":"680","line":21,"column":10,"nodeType":"604","messageId":"605","endLine":21,"endColumn":24},{"ruleId":"602","severity":1,"message":"681","line":22,"column":10,"nodeType":"604","messageId":"605","endLine":22,"endColumn":20},{"ruleId":"602","severity":1,"message":"634","line":23,"column":10,"nodeType":"604","messageId":"605","endLine":23,"endColumn":21},{"ruleId":"682","severity":1,"message":"683","line":42,"column":5,"nodeType":"684","messageId":"685","endLine":42,"endColumn":21,"fix":"686"},{"ruleId":"602","severity":1,"message":"678","line":49,"column":5,"nodeType":"604","messageId":"605","endLine":49,"endColumn":12},{"ruleId":"602","severity":1,"message":"687","line":79,"column":9,"nodeType":"604","messageId":"605","endLine":79,"endColumn":30},{"ruleId":"673","severity":1,"message":"688","line":128,"column":30,"nodeType":"675","messageId":"689","endLine":128,"endColumn":32},{"ruleId":"673","severity":1,"message":"677","line":129,"column":42,"nodeType":"690","messageId":"691","endLine":129,"endColumn":48},{"ruleId":"673","severity":1,"message":"677","line":130,"column":31,"nodeType":"690","messageId":"691","endLine":130,"endColumn":37},{"ruleId":"598","severity":1,"message":"692","line":228,"column":6,"nodeType":"600","endLine":228,"endColumn":16,"suggestions":"693"},{"ruleId":"602","severity":1,"message":"678","line":18,"column":9,"nodeType":"604","messageId":"605","endLine":18,"endColumn":16},{"ruleId":"602","severity":1,"message":"694","line":116,"column":29,"nodeType":"604","messageId":"605","endLine":116,"endColumn":43},{"ruleId":"602","severity":1,"message":"695","line":119,"column":29,"nodeType":"604","messageId":"605","endLine":119,"endColumn":38},{"ruleId":"602","severity":1,"message":"696","line":120,"column":29,"nodeType":"604","messageId":"605","endLine":120,"endColumn":37},{"ruleId":"602","severity":1,"message":"697","line":14,"column":10,"nodeType":"604","messageId":"605","endLine":14,"endColumn":34},{"ruleId":"602","severity":1,"message":"698","line":15,"column":26,"nodeType":"604","messageId":"605","endLine":15,"endColumn":50},{"ruleId":"598","severity":1,"message":"699","line":88,"column":6,"nodeType":"600","endLine":88,"endColumn":8,"suggestions":"700"},{"ruleId":"598","severity":1,"message":"692","line":149,"column":6,"nodeType":"600","endLine":149,"endColumn":16,"suggestions":"701"},{"ruleId":"602","severity":1,"message":"702","line":65,"column":10,"nodeType":"604","messageId":"605","endLine":65,"endColumn":25},{"ruleId":"598","severity":1,"message":"703","line":109,"column":6,"nodeType":"600","endLine":109,"endColumn":8,"suggestions":"704"},{"ruleId":"598","severity":1,"message":"692","line":146,"column":6,"nodeType":"600","endLine":146,"endColumn":16,"suggestions":"705"},{"ruleId":"598","severity":1,"message":"706","line":98,"column":6,"nodeType":"600","endLine":98,"endColumn":46,"suggestions":"707"},{"ruleId":"602","severity":1,"message":"694","line":403,"column":23,"nodeType":"604","messageId":"605","endLine":403,"endColumn":37},{"ruleId":"602","severity":1,"message":"695","line":407,"column":23,"nodeType":"604","messageId":"605","endLine":407,"endColumn":32},{"ruleId":"602","severity":1,"message":"696","line":408,"column":23,"nodeType":"604","messageId":"605","endLine":408,"endColumn":31},{"ruleId":"602","severity":1,"message":"708","line":9,"column":10,"nodeType":"604","messageId":"605","endLine":9,"endColumn":25},{"ruleId":"602","severity":1,"message":"709","line":9,"column":27,"nodeType":"604","messageId":"605","endLine":9,"endColumn":42},{"ruleId":"602","severity":1,"message":"710","line":15,"column":10,"nodeType":"604","messageId":"605","endLine":15,"endColumn":39},{"ruleId":"602","severity":1,"message":"606","line":16,"column":10,"nodeType":"604","messageId":"605","endLine":16,"endColumn":16},{"ruleId":"602","severity":1,"message":"634","line":17,"column":10,"nodeType":"604","messageId":"605","endLine":17,"endColumn":21},{"ruleId":"602","severity":1,"message":"711","line":19,"column":7,"nodeType":"604","messageId":"605","endLine":19,"endColumn":23},{"ruleId":"602","severity":1,"message":"678","line":24,"column":61,"nodeType":"604","messageId":"605","endLine":24,"endColumn":68},{"ruleId":"602","severity":1,"message":"712","line":25,"column":10,"nodeType":"604","messageId":"605","endLine":25,"endColumn":15},{"ruleId":"602","severity":1,"message":"713","line":25,"column":17,"nodeType":"604","messageId":"605","endLine":25,"endColumn":25},{"ruleId":"602","severity":1,"message":"714","line":44,"column":10,"nodeType":"604","messageId":"605","endLine":44,"endColumn":22},{"ruleId":"602","severity":1,"message":"715","line":44,"column":24,"nodeType":"604","messageId":"605","endLine":44,"endColumn":39},{"ruleId":"598","severity":1,"message":"669","line":69,"column":6,"nodeType":"600","endLine":69,"endColumn":8,"suggestions":"716"},{"ruleId":"602","severity":1,"message":"717","line":129,"column":9,"nodeType":"604","messageId":"605","endLine":129,"endColumn":22},{"ruleId":"602","severity":1,"message":"718","line":140,"column":9,"nodeType":"604","messageId":"605","endLine":140,"endColumn":25},{"ruleId":"719","severity":1,"message":"720","line":159,"column":186,"nodeType":"721","messageId":"722","endLine":159,"endColumn":188},{"ruleId":"602","severity":1,"message":"723","line":14,"column":10,"nodeType":"604","messageId":"605","endLine":14,"endColumn":24},{"ruleId":"602","severity":1,"message":"702","line":66,"column":10,"nodeType":"604","messageId":"605","endLine":66,"endColumn":25},{"ruleId":"598","severity":1,"message":"703","line":110,"column":6,"nodeType":"600","endLine":110,"endColumn":8,"suggestions":"724"},{"ruleId":"598","severity":1,"message":"692","line":147,"column":6,"nodeType":"600","endLine":147,"endColumn":16,"suggestions":"725"},{"ruleId":"598","severity":1,"message":"669","line":58,"column":6,"nodeType":"600","endLine":58,"endColumn":8,"suggestions":"726"},{"ruleId":"598","severity":1,"message":"692","line":212,"column":6,"nodeType":"600","endLine":212,"endColumn":16,"suggestions":"727"},{"ruleId":"598","severity":1,"message":"669","line":58,"column":5,"nodeType":"600","endLine":58,"endColumn":14,"suggestions":"728"},{"ruleId":"598","severity":1,"message":"699","line":76,"column":6,"nodeType":"600","endLine":76,"endColumn":16,"suggestions":"729"},{"ruleId":"598","severity":1,"message":"669","line":60,"column":6,"nodeType":"600","endLine":60,"endColumn":15,"suggestions":"730"},{"ruleId":"598","severity":1,"message":"699","line":78,"column":6,"nodeType":"600","endLine":78,"endColumn":16,"suggestions":"731"},{"ruleId":"598","severity":1,"message":"669","line":51,"column":6,"nodeType":"600","endLine":51,"endColumn":15,"suggestions":"732"},{"ruleId":"598","severity":1,"message":"699","line":67,"column":6,"nodeType":"600","endLine":67,"endColumn":16,"suggestions":"733"},{"ruleId":"602","severity":1,"message":"734","line":1,"column":17,"nodeType":"604","messageId":"605","endLine":1,"endColumn":28},{"ruleId":"602","severity":1,"message":"735","line":6,"column":8,"nodeType":"604","messageId":"605","endLine":6,"endColumn":14},{"ruleId":"602","severity":1,"message":"736","line":10,"column":10,"nodeType":"604","messageId":"605","endLine":10,"endColumn":28},{"ruleId":"602","severity":1,"message":"737","line":10,"column":30,"nodeType":"604","messageId":"605","endLine":10,"endColumn":44},{"ruleId":"602","severity":1,"message":"608","line":10,"column":46,"nodeType":"604","messageId":"605","endLine":10,"endColumn":49},{"ruleId":"602","severity":1,"message":"650","line":11,"column":8,"nodeType":"604","messageId":"605","endLine":11,"endColumn":19},{"ruleId":"602","severity":1,"message":"636","line":15,"column":18,"nodeType":"604","messageId":"605","endLine":15,"endColumn":24},{"ruleId":"602","severity":1,"message":"738","line":15,"column":65,"nodeType":"604","messageId":"605","endLine":15,"endColumn":78},{"ruleId":"602","severity":1,"message":"739","line":17,"column":10,"nodeType":"604","messageId":"605","endLine":17,"endColumn":38},{"ruleId":"602","severity":1,"message":"740","line":18,"column":8,"nodeType":"604","messageId":"605","endLine":18,"endColumn":16},{"ruleId":"602","severity":1,"message":"741","line":19,"column":8,"nodeType":"604","messageId":"605","endLine":19,"endColumn":19},{"ruleId":"602","severity":1,"message":"742","line":25,"column":7,"nodeType":"604","messageId":"605","endLine":25,"endColumn":18},{"ruleId":"602","severity":1,"message":"743","line":44,"column":9,"nodeType":"604","messageId":"605","endLine":44,"endColumn":19},{"ruleId":"602","severity":1,"message":"744","line":23,"column":8,"nodeType":"604","messageId":"605","endLine":23,"endColumn":14},{"ruleId":"598","severity":1,"message":"692","line":149,"column":6,"nodeType":"600","endLine":149,"endColumn":16,"suggestions":"745"},{"ruleId":"602","severity":1,"message":"744","line":3,"column":13,"nodeType":"604","messageId":"605","endLine":3,"endColumn":19},{"ruleId":"746","severity":1,"message":"747","line":111,"column":83,"nodeType":"748","messageId":"749","endLine":111,"endColumn":85},{"ruleId":"746","severity":1,"message":"747","line":111,"column":161,"nodeType":"748","messageId":"749","endLine":111,"endColumn":163},{"ruleId":"602","severity":1,"message":"750","line":2,"column":10,"nodeType":"604","messageId":"605","endLine":2,"endColumn":13},{"ruleId":"602","severity":1,"message":"751","line":2,"column":15,"nodeType":"604","messageId":"605","endLine":2,"endColumn":19},{"ruleId":"602","severity":1,"message":"752","line":2,"column":21,"nodeType":"604","messageId":"605","endLine":2,"endColumn":35},{"ruleId":"602","severity":1,"message":"753","line":2,"column":37,"nodeType":"604","messageId":"605","endLine":2,"endColumn":48},{"ruleId":"602","severity":1,"message":"754","line":2,"column":50,"nodeType":"604","messageId":"605","endLine":2,"endColumn":61},{"ruleId":"602","severity":1,"message":"755","line":2,"column":63,"nodeType":"604","messageId":"605","endLine":2,"endColumn":72},{"ruleId":"602","severity":1,"message":"756","line":2,"column":74,"nodeType":"604","messageId":"605","endLine":2,"endColumn":78},{"ruleId":"602","severity":1,"message":"757","line":4,"column":8,"nodeType":"604","messageId":"605","endLine":4,"endColumn":40},{"ruleId":"602","severity":1,"message":"758","line":4,"column":74,"nodeType":"604","messageId":"605","endLine":4,"endColumn":89},{"ruleId":"602","severity":1,"message":"759","line":71,"column":10,"nodeType":"604","messageId":"605","endLine":71,"endColumn":16},{"ruleId":"602","severity":1,"message":"760","line":353,"column":9,"nodeType":"604","messageId":"605","endLine":353,"endColumn":23},{"ruleId":"602","severity":1,"message":"761","line":3,"column":31,"nodeType":"604","messageId":"605","endLine":3,"endColumn":40},{"ruleId":"602","severity":1,"message":"762","line":2,"column":17,"nodeType":"604","messageId":"605","endLine":2,"endColumn":23},{"ruleId":"602","severity":1,"message":"763","line":3,"column":8,"nodeType":"604","messageId":"605","endLine":3,"endColumn":14},"no-native-reassign",["764"],"no-negated-in-lhs",["765"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dialogOpen?.open'. Either include it or remove the dependency array. If 'setOpen' needs the current value of 'dialogOpen.open', you can also switch to useReducer instead of useState and read 'dialogOpen.open' in the reducer.","ArrayExpression",["766"],"no-unused-vars","'batch' is defined but never used.","Identifier","unusedVar","'logout' is defined but never used.","'checkLogin' is defined but never used.","'get' is defined but never used.","'setArray' is defined but never used.","'setObject' is defined but never used.","'updateUser' is defined but never used.","'Suppliers' is defined but never used.","'Supplier' is defined but never used.","'Categories' is defined but never used.","'Subcategories' is defined but never used.","'SubSubcategories' is defined but never used.","'Collections' is defined but never used.","'Collection' is defined but never used.","'Products' is defined but never used.","'Product' is defined but never used.","'Advertisements' is defined but never used.","'Order' is defined but never used.","'Orders' is defined but never used.","'Superusers' is defined but never used.","'Settings' is defined but never used.","'ResellersPayments' is defined but never used.","'SuppliersPayments' is defined but never used.","'Bonus' is defined but never used.","'Bonuses' is defined but never used.","'ResellersPayment' is defined but never used.","'SupplierPayment' is defined but never used.","'AdvertisementBanners' is defined but never used.","'Coupons' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'TextField' is defined but never used.","'Icons' is defined but never used.","'addReferralNetwork' is defined but never used.","'deleteReferral' is defined but never used.","'toggleProcessIndicator' is defined but never used.","'Button' is defined but never used.","'SectionHeader' is defined but never used.","'getAddressString' is defined but never used.","'ResellerInfo' is defined but never used.","'usePageData' is defined but never used.","'FormDialog' is defined but never used.","'toast' is defined but never used.","'Autocomplete' is defined but never used.","'addReferralForm' is assigned a value but never used.","'addressConfig' is defined but never used.","'ContentCell' is defined but never used.","'Status' is defined but never used.","'getPhoneString' is defined but never used.","'blobToBase64' is assigned a value but never used.","'MenuItem' is defined but never used.","React Hook useEffect has a missing dependency: 'status'. Either include it or remove the dependency array.",["767"],"'Icon' is defined but never used.","'deleteAdvertisement' is defined but never used.","'updateAdvertisement' is defined but never used.","'swap' is defined but never used.","'addAdvertisementForm' is assigned a value but never used.","'updateAdvertisementForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["768"],"'subSubcategoryOptions' is assigned a value but never used.","'collectionOptionsFilter' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a return value from arrow function.","'refresh' is assigned a value but never used.","'RS_PAYMENT_MODE' is defined but never used.","'createSupplier' is defined but never used.","'updateItem' is defined but never used.","no-useless-rename","Destructuring assignment bonuses unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"769","text":"770"},"'filterByTransactionId' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array.",["771"],"'platformMargin' is assigned a value but never used.","'erfaPrice' is assigned a value but never used.","'discount' is assigned a value but never used.","'getShippingAddressString' is defined but never used.","'getCouponDiscountedPrice' is defined but never used.","React Hook useEffect has a missing dependency: 'filters'. Either include it or remove the dependency array.",["772"],["773"],"'priceRangeQuery' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDownloadableData'. Either include it or remove the dependency array.",["774"],["775"],"React Hook useEffect has a missing dependency: 'resellerStatus'. Either include it or remove the dependency array.",["776"],"'createSuperuser' is defined but never used.","'updateSuperuser' is defined but never used.","'getSuperuserStatusToBeUpdated' is defined but never used.","'addSuperuserForm' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'forObjChange' is assigned a value but never used.","'setforObjChange' is assigned a value but never used.",["777"],"'searchProduct' is assigned a value but never used.","'filterBySupplier' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'formatCurrency' is defined but never used.",["778"],["779"],["780"],["781"],["782"],["783"],["784"],["785"],["786"],["787"],"'useCallback' is defined but never used.","'format' is defined but never used.","'createResellerBank' is defined but never used.","'updateReseller' is defined but never used.","'ToggleButtons' is defined but never used.","'getResellerStatusToBeUpdated' is defined but never used.","'debounce' is defined but never used.","'BankDetails' is defined but never used.","'addBankForm' is assigned a value but never used.","'fullScreen' is assigned a value but never used.","'moment' is defined but never used.",["788"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'Box' is defined but never used.","'Card' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'Chip' is defined but never used.","'MaterialUIReactGridLayoutBuilder' is defined but never used.","'withOpeningDock' is defined but never used.","'errors' is assigned a value but never used.","'resellerMargin' is assigned a value but never used.","'UAE_AREAS' is defined but never used.","'useRef' is defined but never used.","'Inputs' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"789","fix":"790"},{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},[1532,1548],"bonuses",{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"795","fix":"799"},{"desc":"800","fix":"801"},{"desc":"795","fix":"802"},{"desc":"803","fix":"804"},{"desc":"793","fix":"805"},{"desc":"800","fix":"806"},{"desc":"795","fix":"807"},{"desc":"793","fix":"808"},{"desc":"795","fix":"809"},{"desc":"810","fix":"811"},{"desc":"810","fix":"812"},{"desc":"810","fix":"813"},{"desc":"810","fix":"814"},{"desc":"810","fix":"815"},{"desc":"810","fix":"816"},{"desc":"795","fix":"817"},"Update the dependencies array to be: [dialogOpen?.open, open]",{"range":"818","text":"819"},"Update the dependencies array to be: [status]",{"range":"820","text":"821"},"Update the dependencies array to be: [dispatch]",{"range":"822","text":"823"},"Update the dependencies array to be: [dateRate, filter]",{"range":"824","text":"825"},"Update the dependencies array to be: [filters]",{"range":"826","text":"827"},{"range":"828","text":"825"},"Update the dependencies array to be: [getDownloadableData]",{"range":"829","text":"830"},{"range":"831","text":"825"},"Update the dependencies array to be: [dispatch, params.orderId, refreshCount, resellerStatus]",{"range":"832","text":"833"},{"range":"834","text":"823"},{"range":"835","text":"830"},{"range":"836","text":"825"},{"range":"837","text":"823"},{"range":"838","text":"825"},"Update the dependencies array to be: [dispatch, filters]",{"range":"839","text":"840"},{"range":"841","text":"840"},{"range":"842","text":"840"},{"range":"843","text":"840"},{"range":"844","text":"840"},{"range":"845","text":"840"},{"range":"846","text":"825"},[13602,13608],"[dialogOpen?.open, open]",[4799,4801],"[status]",[3229,3231],"[dispatch]",[7278,7288],"[dateRate, filter]",[3484,3486],"[filters]",[5483,5493],[4224,4226],"[getDownloadableData]",[5360,5370],[3837,3877],"[dispatch, params.orderId, refreshCount, resellerStatus]",[2808,2810],[4195,4197],[5332,5342],[2164,2166],[8105,8115],[2324,2333],"[dispatch, filters]",[2951,2961],[2337,2346],[2894,2904],[2093,2102],[2572,2582],[5009,5019]]